//-----------------------------------------------------------------
//  Copyright 2010 Brady Wright and Above and Beyond Software
//	All rights reserved
//-----------------------------------------------------------------


using UnityEngine;
using System.Collections;



// Serves as the base for all non-sprite controls.
// The main purpose of having this is so we can deal with
// all control types as a group, such as using a custom
// inspector.
[ExecuteInEditMode]
public abstract class ControlBase : MonoBehaviour, IControl, IUIObject
{
	protected ControlBaseMirror mirror;

	//---------------------------------------------------
	// Control property stuff
	//---------------------------------------------------

	/// <summary>
	/// String whose meaning is to keep the previous
	/// state's label.
	/// </summary>
	public const string DittoString = "[\"]";

	/// <summary>
	/// Text to be displayed on the control.
	/// Do not set this directly in-code. Instead, use
	/// the "Text" property or else your changes will
	/// not take effect.
	/// </summary>
	public string text;

	/// <summary>
	/// Reference to optional SpriteText which will display
	/// this item's text. It is STRONGLY recommended that
	/// this mesh exist on a GameObject that is a child of
	/// the list item itself.
	/// </summary>
	public SpriteText spriteText;			// Mesh that will display our text

	/// <summary>
	/// When text is generated by the control at runtime, 
	/// it will, by default, have its offsetZ setting set 
	/// to this value.  NOTE: Negative values will result
	/// in text being in front of the control.  Positive
	/// values will place the text behind the control.
	/// </summary>
	public float textOffsetZ = -0.1f;

	/// <summary>
	/// When true, of a collider is generated for the
	/// control, the associated text is taken into
	/// account when calculating the extents of the
	/// collider.
	/// </summary>
	public bool includeTextInAutoCollider;

	// Default text options, used when creating a new child
	// SpriteText object:
	protected SpriteText.Anchor_Pos defaultTextAnchor = SpriteText.Anchor_Pos.Middle_Center;
	protected SpriteText.Alignment_Type defaultTextAlignment = SpriteText.Alignment_Type.Center;

	// Lets us keep track of whether we've been destroyed
	protected bool deleted = false;


	/// <summary>
	/// Sets the text to be displayed in this control.
	/// </summary>
	public virtual string Text
	{
		get { return text; }

		set
		{
			text = value;

			// See if we need to create a TextMesh and an
			// object to host it:
			if (spriteText == null)
			{
				if (text == "")
					return;

				if (UIManager.instance == null)
				{
					Debug.LogWarning("Warning: No UIManager exists in the scene. A UIManager with a default font is required to automatically add text to a control.");
					return;
				}
				else if (UIManager.instance.defaultFont == null)
				{
					Debug.LogWarning("Warning: No default font defined.  A UIManager object with a default font is required to automatically add text to a control.");
					return;
				}

				// Create a GO to host the TextMesh:
				GameObject go = new GameObject();
				go.layer = gameObject.layer;
				go.transform.parent = transform;
				go.transform.localPosition = Vector3.zero;
				go.transform.localRotation = Quaternion.identity;
				go.name = "control_text";

				// Add a mesh renderer:
				MeshRenderer mr = (MeshRenderer)go.AddComponent(typeof(MeshRenderer));
				mr.material = UIManager.instance.defaultFontMaterial;

				// Add the SpriteText component:
				spriteText = (SpriteText)go.AddComponent(typeof(SpriteText));
				spriteText.font = UIManager.instance.defaultFont;

				spriteText.offsetZ = textOffsetZ;

				// Tell the text object we're its parent
				spriteText.Parent = this;

				// Anchor and align centered by default:
				spriteText.anchor = defaultTextAnchor;
				spriteText.alignment = defaultTextAlignment;
				spriteText.pixelPerfect = true;

				// Make sure it is fully initialized before we assign text:
				spriteText.Start();
			}

			spriteText.Text = text;

			// Assign the text back, in case the spriteText removed
			// some unsupported characters:
			text = spriteText.Text;

			// Update the collider if need be:
			if (includeTextInAutoCollider)
				UpdateCollider();
		}
	}

	/// <summary>
	/// When set to true, the control will instruct any
	/// pointers which have it as their target to
	/// de-target them.  Use this if you are deactivating
	/// a control and want no input to go to it.
	/// It is strongly recommended NOT to use this feature
	/// on any control that appears in a scroll list, or
	/// else you may be unable to scroll past the edge of
	/// the list's viewable area.
	/// </summary>
	public bool detargetOnDisable = false;

	// Tracks whether we are using a pre-made collider.
	protected bool customCollider;

	/// <summary>
	/// Can hold a reference to any data that the
	/// developer wishes to be associated with
	/// the control.
	/// </summary>
	[HideInInspector]
	public object data;

	/// <summary>
	/// Accessor for the data member to comply
	/// with the IControl interface.
	/// </summary>
	public object Data
	{
		get { return data; }
		set { data = value; }
	}

	public virtual bool IncludeTextInAutoCollider
	{
		get { return includeTextInAutoCollider; }
		set
		{
			includeTextInAutoCollider = value;
			UpdateCollider();
		}
	}

	protected virtual void Awake()
	{
		if (collider != null)
			customCollider = true;

		if (dragDropHelper == null)
			dragDropHelper = new EZDragDropHelper(this);
		else
			dragDropHelper.host = this;
	}

	public virtual void Start()
	{
		if (spriteText != null)
			spriteText.Parent = this;

		if (UIManager.Exists())
		{
			if (Application.isPlaying)
			{
				if (cancelDragEasing == EZAnimation.EASING_TYPE.Default)
					cancelDragEasing = UIManager.instance.cancelDragEasing;

				if (cancelDragDuration == -1f)
					cancelDragDuration = UIManager.instance.cancelDragDuration;

				if (float.IsNaN(dragOffset))
					dragOffset = UIManager.instance.defaultDragOffset;
			}
		}
	}


	// Adds a basic box collider to this control.
	protected virtual void AddCollider()
	{
		// Don't create our own if a custom collider exists
		if (customCollider)
			return;

		gameObject.AddComponent(typeof(BoxCollider));
		UpdateCollider();
	}

	/// <summary>
	/// Updates the collider of the control so that
	/// it encompasses the extents of the control's
	/// content.
	/// NOTE: To include the control's associated
	/// text in the calculation, be sure to check
	/// the includeTextInAutoCollider box.
	/// </summary>
	public virtual void UpdateCollider()
	{
		if (customCollider || !(collider is BoxCollider))
			return;

		BoxCollider bc = (BoxCollider)collider;

		if (includeTextInAutoCollider && spriteText != null)
		{
			Bounds bounds = new Bounds(bc.center, bc.size);

			Matrix4x4 sm = spriteText.transform.localToWorldMatrix;
			Matrix4x4 lm = transform.worldToLocalMatrix;
			Vector3 tl = lm.MultiplyPoint3x4(sm.MultiplyPoint3x4(spriteText.TopLeft)) * 2f;
			Vector3 br = lm.MultiplyPoint3x4(sm.MultiplyPoint3x4(spriteText.BottomRight)) * 2f;
			bounds.Encapsulate(tl);
			bounds.Encapsulate(br);

			bc.size = bounds.extents;
			bc.center = bounds.center * 0.5f;
		}

		bc.isTrigger = true;
	}


	//---------------------------------------------------
	// IUIObject interface stuff
	//---------------------------------------------------
	protected bool m_controlIsEnabled = true;

	/// <summary>
	/// Allows you to get/set whether the control is disabled.
	/// If it is disabled, it will not receive input.
	/// </summary>
	public virtual bool controlIsEnabled
	{
		get { return m_controlIsEnabled; }
		set { m_controlIsEnabled = value; }
	}

	/// <summary>
	/// When set to true, the control will instruct any
	/// pointers which have it as their target to
	/// de-target them.  Use this if you are deactivating
	/// a control and want no input to go to it.
	/// It is strongly recommended NOT to use this feature
	/// on any control that appears in a scroll list, or
	/// else you may be unable to scroll past the edge of
	/// the list's viewable area.
	/// </summary>
	public virtual bool DetargetOnDisable
	{
		get { return DetargetOnDisable; }
		set { DetargetOnDisable = value; }
	}

	// Allows an object to act as a proxy for other
	// controls - i.e. a UIVirtualScreen
	// But in our case, just return ourselves since
	// we're not acting as a proxy
	public IUIObject GetControl(ref POINTER_INFO ptr)
	{
		return this;
	}

	protected IUIContainer container;

	public virtual IUIContainer Container
	{
		get { return container; }
		set
		{
			if (container != null)
			{
				if (spriteText != null)
					container.RemoveChild(spriteText.gameObject);
			}

			if (value != null)
			{
				if (spriteText != null)
					value.AddChild(spriteText.gameObject);
			}

			container = value;
		}
	}

	public bool RequestContainership(IUIContainer cont)
	{
		Transform t = transform.parent;
		Transform c = ((Component)cont).transform;

		while (t != null)
		{
			if (t == c)
			{
				Container = cont;
				return true;
			}
			else if (t.gameObject.GetComponent("IUIContainer") != null)
				return false;

			t = t.parent;
		}

		// Never found *any* containers:
		return false;
	}

	public virtual bool GotFocus() { return false; }

	protected EZInputDelegate inputDelegate;
	protected EZValueChangedDelegate changeDelegate;
	public virtual void SetInputDelegate(EZInputDelegate del)
	{
		inputDelegate = del;
	}
	public virtual void AddInputDelegate(EZInputDelegate del)
	{
		inputDelegate += del;
	}
	public virtual void RemoveInputDelegate(EZInputDelegate del)
	{
		inputDelegate -= del;
	}
	public virtual void SetValueChangedDelegate(EZValueChangedDelegate del)
	{
		changeDelegate = del;
	}
	public virtual void AddValueChangedDelegate(EZValueChangedDelegate del)
	{
		changeDelegate += del;
	}
	public virtual void RemoveValueChangedDelegate(EZValueChangedDelegate del)
	{
		changeDelegate -= del;
	}

	public virtual void OnInput(POINTER_INFO ptr)
	{
		OnInput(ref ptr);
	}

	public virtual void OnInput(ref POINTER_INFO ptr)
	{
		if (Container != null)
		{
			ptr.callerIsControl = true;
			Container.OnInput(ptr);
		}
	}

	public virtual void OnEnable() {}

	public virtual void OnDisable()
	{
		if (Application.isPlaying)
		{
			if (EZAnimator.Exists())
			{
				EZAnimator.instance.Stop(gameObject);
				EZAnimator.instance.Stop(this);
			}

			if (detargetOnDisable && UIManager.Exists())
			{
				UIManager.instance.Detarget(this);
			}
		}
	}

	public virtual void OnDestroy()
	{
		deleted = true;
	}


	//---------------------------------------------------
	// IControl compliance stuff
	//---------------------------------------------------
	public virtual void Copy(IControl ctl)
	{
		Copy(ctl, ControlCopyFlags.All);
	}

	public virtual void Copy(IControl ctl, ControlCopyFlags flags)
	{
		if (!(ctl is ControlBase))
			return;

		ControlBase c = (ControlBase)ctl;


		// Copy transitions:
		if ((flags & ControlCopyFlags.Transitions) == ControlCopyFlags.Transitions)
		{
			if (c is UIStateToggleBtn3D)
			{
				if (c.Transitions != null)
				{
					((UIStateToggleBtn3D)this).transitions = new EZTransitionList[c.Transitions.Length];
					for (int i = 0; i < Transitions.Length; ++i)
						c.Transitions[i].CopyToNew(Transitions[i], true);
				}
			}
			else
			{
				if (Transitions != null && c.Transitions != null)
					for (int i = 0; i < Transitions.Length && i < c.Transitions.Length; ++i)
						c.Transitions[i].CopyTo(Transitions[i], true);
			}
		}


		if ((flags & ControlCopyFlags.Text) == ControlCopyFlags.Text)
		{
			// See if we want to clone the other
			// control's text mesh:
			if (spriteText == null && c.spriteText != null)
			{
				GameObject newText = (GameObject)Instantiate(c.spriteText.gameObject);
				newText.transform.parent = transform;
				newText.transform.localPosition = c.spriteText.transform.localPosition;
				newText.transform.localScale = c.spriteText.transform.localScale;
				newText.transform.localRotation = c.spriteText.transform.localRotation;
			}

			Text = c.Text;
		}

		if ((flags & ControlCopyFlags.Appearance) == ControlCopyFlags.Appearance)
		{
			// See if we can copy the other control's collider's settings:
			if (collider.GetType() == c.collider.GetType())
			{
				if (collider is BoxCollider)
				{
					BoxCollider bc1 = (BoxCollider)collider;
					BoxCollider bc2 = (BoxCollider)c.collider;
					bc1.center = bc2.center;
					bc1.size = bc2.size;
				}
				else if (collider is SphereCollider)
				{
					SphereCollider sc1 = (SphereCollider)collider;
					SphereCollider sc2 = (SphereCollider)c.collider;
					sc1.center = sc2.center;
					sc1.radius = sc2.radius;
				}
				else if (collider is CapsuleCollider)
				{
					CapsuleCollider cc1 = (CapsuleCollider)collider;
					CapsuleCollider cc2 = (CapsuleCollider)c.collider;
					cc1.center = cc2.center;
					cc1.radius = cc2.radius;
					cc1.height = cc2.height;
					cc1.direction = cc2.direction;
				}
				else if (collider is MeshCollider)
				{
					MeshCollider mc1 = (MeshCollider)collider;
					MeshCollider mc2 = (MeshCollider)c.collider;
					mc1.smoothSphereCollisions = mc2.smoothSphereCollisions;
					mc1.convex = mc2.convex;
					mc1.sharedMesh = mc2.sharedMesh;
				}

				collider.isTrigger = c.collider.isTrigger;
			}
		}

		if ((flags & ControlCopyFlags.Invocation) == ControlCopyFlags.Invocation)
		{
			changeDelegate = c.changeDelegate;
			inputDelegate = c.inputDelegate;
		}

		if ((flags & ControlCopyFlags.State) == ControlCopyFlags.State)
		{
			Container = c.Container;

			if (Application.isPlaying)
				controlIsEnabled = c.controlIsEnabled;
		}
	}


	#region Drag&Drop

	//---------------------------------------------------
	// Drag & Drop stuff
	//---------------------------------------------------

	// Encapsulates most of our drag-and-drop logic:
	protected EZDragDropHelper dragDropHelper = new EZDragDropHelper();

	/// <summary>
	/// Indicates whether the object can be dragged as part of a drag & drop operation.
	/// </summary>
	public bool isDraggable = false;

	/// <summary>
	/// Indicates whether the object can be dragged as part of a drag & drop operation.
	/// </summary>
	public bool IsDraggable
	{
		get { return isDraggable; }
		set { isDraggable = value; }
	}

	/// <summary>
	/// A mask which can be used to make the object only be "droppable" on
	/// objects in a certain layer.
	/// NOTE: This mask is combined with the camera's mask.
	/// </summary>
	public LayerMask dropMask = -1;

	/// <summary>
	/// A mask which can be used to make the object only be "droppable" on
	/// objects in a certain layer.
	/// NOTE: This mask is combined with the camera's mask.
	/// </summary>
	public LayerMask DropMask
	{
		get { return dropMask; }
		set { dropMask = value; }
	}

	/// <summary>
	/// The distance an object being dragged and dropped
	/// should be offset toward the camera to ensure it
	/// hovers above other objects and controls in the
	/// scene.
	/// A value of NaN indicates the default value will
	/// be used from the UIManager.
	/// </summary>
	public float dragOffset = float.NaN;

	/// <summary>
	/// The distance an object being dragged and dropped
	/// should be offset toward the camera to ensure it
	/// hovers above other objects and controls in the
	/// scene.
	/// </summary>
	public float DragOffset
	{
		get { return dragOffset; }
		set
		{
			dragOffset = value;

			if (IsDragging)
			{
				POINTER_INFO ptr;
				if (UIManager.Exists())
				{
					if (UIManager.instance.GetPointer(this, out ptr))
					{
						dragDropHelper.DragUpdatePosition(ptr);
					}
				}
			}
		}
	}

	/// <summary>
	/// The type of easing to use to animate the object back to its starting
	/// position when a drag operation is canceled.
	/// </summary>
	public EZAnimation.EASING_TYPE cancelDragEasing = EZAnimation.EASING_TYPE.Default;

	/// <summary>
	/// The type of easing to use to animate the object back to its starting
	/// position when a drag operation is canceled.
	/// </summary>
	public EZAnimation.EASING_TYPE CancelDragEasing
	{
		get { return cancelDragEasing; }
		set { cancelDragEasing = value; }
	}

	/// <summary>
	/// The duration of the easing animation when a drag and drop operation
	/// is canceled.  A value of -1 indicates to use the default value
	/// specified in the UIManager.
	/// </summary>
	public float cancelDragDuration = -1f;

	/// <summary>
	/// The duration of the easing animation when a drag and drop operation
	/// is canceled.
	/// </summary>
	public float CancelDragDuration
	{
		get { return cancelDragDuration; }
		set { cancelDragDuration = value; }
	}

	/// <summary>
	/// Indicates whether the object is being dragged as part of a drag & drop operation.
	/// Setting this value to false while the object is being dragged will cause the drag
	/// and drop operation to be canceled.
	/// </summary>
	public bool IsDragging
	{
		get { return dragDropHelper.IsDragging; }
		set { dragDropHelper.IsDragging = value; }
	}

	/// <summary>
	/// The GameObject over which the object being dragged
	/// is hovering and will attempt to be dropped if it 
	/// let go.
	/// </summary>
	public GameObject DropTarget
	{
		get { return dragDropHelper.DropTarget; }
		set { dragDropHelper.DropTarget = value; }
	}

	/// <summary>
	/// In the context of a drag & drop operation, this
	/// indicates whether the drop action was handled.
	/// If this is not set to true in response to a
	/// Dropped message sent to OnEZDragDrop(), the
	/// drop will be considered to be unhandled and will
	/// result in a canceled drop, causing the dragged
	/// object to return to its original position.
	/// </summary>
	public bool DropHandled
	{
		get { return dragDropHelper.DropHandled; }
		set { dragDropHelper.DropHandled = value; }
	}

	// Updates the position of an object being dragged and dropped
	// according to the current pointer position.
	// This is called internally by UIManager's DoDragUpdate().
	public void DragUpdatePosition(POINTER_INFO ptr)
	{
		dragDropHelper.DragUpdatePosition(ptr);
	}

	/// <summary>
	/// The default method of updating the drag position
	/// </summary>
	/// <param name="ptr">The pointer info struct for the pointer dragging the object.</param>
	public void DefaultDragUpdatePosition(POINTER_INFO ptr)
	{
		dragDropHelper.DefaultDragUpdatePosition(ptr);
	}

	/// <summary>
	/// Sets the delegate to be called in order to update the drag
	/// position of the object being dragged.
	/// </summary>
	/// <param name="del">The delegate that will update the object's position.</param>
	public void SetDragPosUpdater(EZDragDropHelper.UpdateDragPositionDelegate del)
	{
		dragDropHelper.SetDragPosUpdater(del);
	}

	/// <summary>
	/// Cancels any pending drag and drop operation.
	/// </summary>
	public void CancelDrag()
	{
		dragDropHelper.CancelDrag();
	}

	/// <summary>
	/// Indicates whether to use the default drag canceling animation.
	/// </summary>
	public bool UseDefaultCancelDragAnim
	{
		get { return dragDropHelper.UseDefaultCancelDragAnim; }
		set
		{
			dragDropHelper.UseDefaultCancelDragAnim = value;
		}
	}

	/// <summary>
	/// Signals to the object that its cancel drag transition
	/// has completed.  Only call this yourself if you have
	/// overridden the default drag canceling and you are
	/// finished animating/whatever the object as a result of
	/// having its drag canceled.
	/// </summary>
	public void CancelFinished()
	{
		dragDropHelper.CancelFinished();
	}

	/// <summary>
	/// Performs the default cancel drag animation.
	/// </summary>
	public void DoDefaultCancelDrag()
	{
		dragDropHelper.DoDefaultCancelDrag();
	}

	// <summary>
	// Receives regular notification of drag & drop events
	// pertaining to this object when an object is being
	// dragged.  This is called on potential drop targets
	// when an object is dragged over them.  It is also
	// called on the object(s) being dragged/dropped.
	// </summary>
	// <param name="parms">The EZDragDropParams structure which holds information about the event.</param>
	public void OnEZDragDrop_Internal(EZDragDropParams parms)
	{
		dragDropHelper.OnEZDragDrop_Internal(parms);
	}

	/// <summary>
	/// Adds a delegate to be called with drag and drop notifications.
	/// </summary>
	/// <param name="del">The delegate to add.</param>
	public void AddDragDropDelegate(EZDragDropDelegate del)
	{
		dragDropHelper.AddDragDropDelegate(del);
	}

	/// <summary>
	/// Removes a delegate from the list of those to be called 
	/// with drag and drop notifications.
	/// </summary>
	/// <param name="del">The delegate to add.</param>
	public void RemoveDragDropDelegate(EZDragDropDelegate del)
	{
		dragDropHelper.RemoveDragDropDelegate(del);
	}

	/// <summary>
	/// Sets the delegate to be called with drag and drop notifications.
	/// NOTE: This will replace any previously registered delegates.
	/// </summary>
	/// <param name="del">The delegate to add.</param>
	public void SetDragDropDelegate(EZDragDropDelegate del)
	{
		dragDropHelper.SetDragDropDelegate(del);
	}


	#endregion


	//---------------------------------------------------
	// Inspector/Editor stuff
	//---------------------------------------------------
	public abstract string[] States
	{
		get;
	}


	// Draws the UI for the control's
	// properties before state selection.
	// Accepts the currently-selected state
	// index.
	// The height of the content drawn is
	// returned so that other UI elements 
	// can be adjusted accordingly:
	public virtual int DrawPreStateSelectGUI(int selState, bool inspector) { return 0; }

	// Draws the UI for the control's
	// properties after state selection.
	// Accepts the currently-selected state
	// index.
	// The height of the content drawn is
	// returned so that other UI elements 
	// can be adjusted accordingly:
	public virtual int DrawPostStateSelectGUI(int selState) { return 0; }

	// Draws the UI for the control's properties
	// just before the transition UI stuff is drawn.
	public virtual void DrawPreTransitionUI(int selState, IGUIScriptSelector gui) { }

	// Returns an array of strings which are the
	// names of the states/elements supported by
	// the control.
	public virtual string[] EnumStateElements()
	{
		return States;
	}

	// So that we can access each control type's different
	// transition arrays in a generic manner:
	public abstract EZTransitionList GetTransitions(int index);

	public abstract EZTransitionList[] Transitions
	{
		get;
		set;
	}

	/// <summary>
	/// Gets/sets the array of strings that correspond to each
	/// control state.
	/// </summary>
	public virtual string GetStateLabel(int index)
	{
		return null;
	}

	/// <summary>
	/// Sets the string for the specified state label.
	/// </summary>
	/// <param name="index">index of the state to set.</param>
	/// <param name="label">The string to set as the state's label.</param>
	public virtual void SetStateLabel(int index, string label)
	{ }


	// Returns the info for the specified state/element.
	public virtual ASCSEInfo GetStateElementInfo(int stateNum)
	{
		ASCSEInfo info = new ASCSEInfo();

		info.transitions = GetTransitions(stateNum);
		info.stateLabel = GetStateLabel(stateNum);

		return info;
	}


	// Sets the label text of the control to 
	// the state label of the specified state.
	protected void UseStateLabel(int index)
	{
		string label = GetStateLabel(index);

		// If we want to keep whatever we've
		// already got, bail:
		if (label == DittoString)
			return;

		// If we don't have any text to show
		// and don't have a SpriteText anyway,
		// just bail:
		if (label == "" && spriteText == null)
			return;

		Text = label;
	}

	//---------------------------------------------------
	// Edit-time updating stuff
	//---------------------------------------------------

	// Uses the mirror object to validate and respond
	// to changes in our inspector.
	public virtual void DoMirror()
	{
		// Only run if we're not playing:
		if (Application.isPlaying)
			return;

		if (mirror == null)
		{
			mirror = new ControlBaseMirror();
			mirror.Mirror(this);
		}

		mirror.Validate(this);

		// Compare our mirrored settings to the current settings
		// to see if something was changed:
		if (mirror.DidChange(this))
		{
			mirror.Mirror(this);	// Update the mirror
		}
	}

#if (UNITY_3_0 || UNITY_3_1 || UNITY_3_2 || UNITY_3_3 || UNITY_3_4 || UNITY_3_5 || UNITY_3_6 || UNITY_3_7 || UNITY_3_8 || UNITY_3_9) && UNITY_EDITOR
	void Update() 
	{
		DoMirror();
	}
#else
	// Ensures that the control is updated in the scene view
	// while editing:
	public virtual void OnDrawGizmos()
	{
		DoMirror();
	}
#endif
}


// Mirrors the editable settings of a control that affect
// how the control is drawn in the scene view
public class ControlBaseMirror
{
	string text;
	float textOffsetZ;

	// Mirrors the specified control's settings
	public virtual void Mirror(ControlBase c)
	{
		text = c.text;
		textOffsetZ = c.textOffsetZ;
	}


	// Returns true if any of the settings do not match:
	public virtual bool DidChange(ControlBase c)
	{
		if (text != c.text)
		{
			c.Text = c.text;
			return true;
		}

		if (textOffsetZ != c.textOffsetZ)
		{
			if (c.spriteText != null)
				c.spriteText.offsetZ = textOffsetZ;
			return true;
		}

		return false;
	}

	public virtual void Validate(ControlBase c)
	{

	}
}