/*=============================================================================
*	Copyright (C) 2006-2011, Zhang Kun. All Rights Reserved.
*	Generated by: ProtocolGen 1.3
=============================================================================*/
//
using System;
//
using System.Threading;
//
using System.Collections.Generic;

	//
	public class SNavMeshNodeIndex
	{
		public SNavMeshNodeIndex()
		{
			x		= -1;
			y		= -1;
			z		= -1;
		}

		public int		x = 0;				//x
		public int		y = 0;				//y
		public int		z = 0;				//z

		public static void Write(Packet os, SNavMeshNodeIndex v)
		{
			os.WriteInt(v.x);
			os.WriteInt(v.y);
			os.WriteInt(v.z);
		}

		public static void Read(Packet ins, out SNavMeshNodeIndex v)
		{
			v = new SNavMeshNodeIndex();
			v.x = ins.ReadInt();
			v.y = ins.ReadInt();
			v.z = ins.ReadInt();
		}
	}

	//
	public class vectorNavNodeIndexArray : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorNavNodeIndexArray v)
		{
			os.WriteInt(v.Count);
			foreach (SNavMeshNodeIndex m in v)
			{
				SNavMeshNodeIndex.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorNavNodeIndexArray v)
		{
			v = new vectorNavNodeIndexArray();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SNavMeshNodeIndex m;
				SNavMeshNodeIndex.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//status
	public class EStatusOperateType
	{
		public const int eStatusType_Add	= 0;		//
		public const int eStatusType_Update	= 1;		//
		public const int eStatusType_Delete	= 2;		//
		public const int eStatusType_Once	= 3;		//
		public EStatusOperateType()
		{
			_value = 0;
		}

		public EStatusOperateType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EStatusOperateType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EStatusOperateType v)
		{
			v = new EStatusOperateType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eStatusType_Add" ;
			case 1:
				return   "eStatusType_Update" ;
			case 2:
				return   "eStatusType_Delete" ;
			case 3:
				return   "eStatusType_Once" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//MonsterReward
	public class EMonsterRewardType
	{
		public const int eMonsterRewardType_Exp	= 1;		//
		public const int eMonsterRewardType_Sk	= 2;		//
		public EMonsterRewardType()
		{
			_value = 1;
		}

		public EMonsterRewardType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EMonsterRewardType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EMonsterRewardType v)
		{
			v = new EMonsterRewardType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 1:
				return   "eMonsterRewardType_Exp" ;
			case 2:
				return   "eMonsterRewardType_Sk" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//status
	public class SStatusEffect
	{
		public SStatusEffect()
		{
			statustID		= 0;
			soureObjectID		= 0;
			destObjectID		= 0;
		}

		public int		statustID = 0;				//
		public EStatusOperateType		statusOperateType;				//
		public int		soureObjectID = 0;				//
		public int		destObjectID = 0;				//
		public vectorAttrChange		attribueVec;				//
		public vectorSpecialEffect		specialEffectVec;				//

		public static void Write(Packet os, SStatusEffect v)
		{
			os.WriteInt(v.statustID);
			EStatusOperateType.Write(os, v.statusOperateType);
			os.WriteInt(v.soureObjectID);
			os.WriteInt(v.destObjectID);
			vectorAttrChange.Write(os, v.attribueVec);
			vectorSpecialEffect.Write(os, v.specialEffectVec);
		}

		public static void Read(Packet ins, out SStatusEffect v)
		{
			v = new SStatusEffect();
			v.statustID = ins.ReadInt();
			EStatusOperateType.Read(ins, out v.statusOperateType);
			v.soureObjectID = ins.ReadInt();
			v.destObjectID = ins.ReadInt();
			vectorAttrChange.Read(ins, out v.attribueVec);
			vectorSpecialEffect.Read(ins, out v.specialEffectVec);
		}
	}

	//
	public class vectorStatusEffects : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorStatusEffects v)
		{
			os.WriteInt(v.Count);
			foreach (SStatusEffect m in v)
			{
				SStatusEffect.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorStatusEffects v)
		{
			v = new vectorStatusEffects();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SStatusEffect m;
				SStatusEffect.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//skill
	public class SSkillEffect
	{
		public SSkillEffect()
		{
			targetID		= 0;
			isCritical		= false;
		}

		public int		targetID = 0;				//
		public UnityEngine.Vector3		targetPos = new UnityEngine.Vector3();				//
		public bool		isCritical = false;				//
		public EStatusElementType		elementType;				//element type
		public vectorAttrChange		attributeChangeVec;				//
		public vectorStatusEffects		statusEffectVec;				//status

		public static void Write(Packet os, SSkillEffect v)
		{
			os.WriteInt(v.targetID);
			os.WriteFloat(v.targetPos.x);	os.WriteFloat(v.targetPos.y);	os.WriteFloat(v.targetPos.z);
			os.WriteBool(v.isCritical);
			EStatusElementType.Write(os, v.elementType);
			vectorAttrChange.Write(os, v.attributeChangeVec);
			vectorStatusEffects.Write(os, v.statusEffectVec);
		}

		public static void Read(Packet ins, out SSkillEffect v)
		{
			v = new SSkillEffect();
			v.targetID = ins.ReadInt();
			v.targetPos.x = ins.ReadFloat();	v.targetPos.y = ins.ReadFloat();	v.targetPos.z = ins.ReadFloat(); 
			v.isCritical = ins.ReadBool();
			EStatusElementType.Read(ins, out v.elementType);
			vectorAttrChange.Read(ins, out v.attributeChangeVec);
			vectorStatusEffects.Read(ins, out v.statusEffectVec);
		}
	}

	//
	public class vectorSkillEffects : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSkillEffects v)
		{
			os.WriteInt(v.Count);
			foreach (SSkillEffect m in v)
			{
				SSkillEffect.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSkillEffects v)
		{
			v = new vectorSkillEffects();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SSkillEffect m;
				SSkillEffect.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SUseSkillResult
	{
		public SUseSkillResult()
		{
			skillID		= 0;
			sourceObjectID		= 0;
			destObejctID		= 0;
		}

		public int		skillID = 0;				//
		public int		sourceObjectID = 0;				//
		public int		destObejctID = 0;				//
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//
		public vectorAttrChange		attributeChangeVec;				//
		public vectorStatusEffects		statusEffectVec;				//status
		public vectorSkillEffects		skillEffectVec;				//

		public static void Write(Packet os, SUseSkillResult v)
		{
			os.WriteInt(v.skillID);
			os.WriteInt(v.sourceObjectID);
			os.WriteInt(v.destObejctID);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			vectorAttrChange.Write(os, v.attributeChangeVec);
			vectorStatusEffects.Write(os, v.statusEffectVec);
			vectorSkillEffects.Write(os, v.skillEffectVec);
		}

		public static void Read(Packet ins, out SUseSkillResult v)
		{
			v = new SUseSkillResult();
			v.skillID = ins.ReadInt();
			v.sourceObjectID = ins.ReadInt();
			v.destObejctID = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			vectorAttrChange.Read(ins, out v.attributeChangeVec);
			vectorStatusEffects.Read(ins, out v.statusEffectVec);
			vectorSkillEffects.Read(ins, out v.skillEffectVec);
		}
	}

	//object
	public class EObjectMoveType
	{
		public const int eMoveType_Idle	= 0;		//
		public const int eMoveType_Normal	= 1;		//
		public const int eMoveType_Max	= 2;		//
		public EObjectMoveType()
		{
			_value = 0;
		}

		public EObjectMoveType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EObjectMoveType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EObjectMoveType v)
		{
			v = new EObjectMoveType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eMoveType_Idle" ;
			case 1:
				return   "eMoveType_Normal" ;
			case 2:
				return   "eMoveType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class SCharacterEnter
	{
		public SCharacterEnter()
		{
			objectID		= 0;
			camp		= 0;
			race		= 0;
			avatar		= 0;
			gender		= true;
			direction		= 0;
		}

		public int		objectID = 0;				//objectID
		public string		charName = "";				//
		public int		camp = 0;				//
		public int		race = 0;				//
		public int		avatar = 0;				//
		public bool		gender = false;				//
		public float		direction = 0;				//
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//
		public EObjectMoveType		moveType;				//
		public float		moveSpeed = 0;				//
		public int		hp = 0;				//
		public int		weapon = 0;				//

		public static void Write(Packet os, SCharacterEnter v)
		{
			os.WriteInt(v.objectID);
			os.WriteString(v.charName);
			os.WriteInt(v.camp);
			os.WriteInt(v.race);
			os.WriteInt(v.avatar);
			os.WriteBool(v.gender);
			os.WriteFloat(v.direction);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			EObjectMoveType.Write(os, v.moveType);
			os.WriteFloat(v.moveSpeed);
			os.WriteInt(v.hp);
			os.WriteInt(v.weapon);
		}

		public static void Read(Packet ins, out SCharacterEnter v)
		{
			v = new SCharacterEnter();
			v.objectID = ins.ReadInt();
			v.charName = ins.ReadString();
			v.camp = ins.ReadInt();
			v.race = ins.ReadInt();
			v.avatar = ins.ReadInt();
			v.gender = ins.ReadBool();
			v.direction = ins.ReadFloat();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			EObjectMoveType.Read(ins, out v.moveType);
			v.moveSpeed = ins.ReadFloat();
			v.hp = ins.ReadInt();
			v.weapon = ins.ReadInt();
		}
	}

	//
	public class SCharacterUpdateInfo
	{
		public SCharacterUpdateInfo()
		{
			objectID		= 0;
		}

		public int		objectID = 0;				//objectID
		public EObjectMoveType		moveType;				//
		public float		moveSpeed = 0;				//
		public int		hp = 0;				//
		public int		weapon = 0;				//

		public static void Write(Packet os, SCharacterUpdateInfo v)
		{
			os.WriteInt(v.objectID);
			EObjectMoveType.Write(os, v.moveType);
			os.WriteFloat(v.moveSpeed);
			os.WriteInt(v.hp);
			os.WriteInt(v.weapon);
		}

		public static void Read(Packet ins, out SCharacterUpdateInfo v)
		{
			v = new SCharacterUpdateInfo();
			v.objectID = ins.ReadInt();
			EObjectMoveType.Read(ins, out v.moveType);
			v.moveSpeed = ins.ReadFloat();
			v.hp = ins.ReadInt();
			v.weapon = ins.ReadInt();
		}
	}

	//
	public class SItemEnter
	{
		public SItemEnter()
		{
			objectID		= 0;
		}

		public int		objectID = 0;				//objectID
		public SItemInfo		iteminfo;				//SItemInfo
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//pos
		public UnityEngine.Vector3		rot = new UnityEngine.Vector3();				//rot
		public UnityEngine.Vector3		scale = new UnityEngine.Vector3();				//scale

		public static void Write(Packet os, SItemEnter v)
		{
			os.WriteInt(v.objectID);
			SItemInfo.Write(os, v.iteminfo);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			os.WriteFloat(v.rot.x);	os.WriteFloat(v.rot.y);	os.WriteFloat(v.rot.z);
			os.WriteFloat(v.scale.x);	os.WriteFloat(v.scale.y);	os.WriteFloat(v.scale.z);
		}

		public static void Read(Packet ins, out SItemEnter v)
		{
			v = new SItemEnter();
			v.objectID = ins.ReadInt();
			SItemInfo.Read(ins, out v.iteminfo);
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			v.rot.x = ins.ReadFloat();	v.rot.y = ins.ReadFloat();	v.rot.z = ins.ReadFloat(); 
			v.scale.x = ins.ReadFloat();	v.scale.y = ins.ReadFloat();	v.scale.z = ins.ReadFloat(); 
		}
	}

	//skill object
	public class SSkillObjectEnter
	{
		public SSkillObjectEnter()
		{
			objectID		= 0;
			skillID		= 0;
			objectTypeID		= 0;
			ownerObjectID		= 0;
		}

		public int		objectID = 0;				//
		public int		skillID = 0;				//skillID
		public int		objectTypeID = 0;				//objectTypeID
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//pos
		public UnityEngine.Vector3		direction = new UnityEngine.Vector3();				//direction
		public int		ownerObjectID = 0;				//

		public static void Write(Packet os, SSkillObjectEnter v)
		{
			os.WriteInt(v.objectID);
			os.WriteInt(v.skillID);
			os.WriteInt(v.objectTypeID);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			os.WriteFloat(v.direction.x);	os.WriteFloat(v.direction.y);	os.WriteFloat(v.direction.z);
			os.WriteInt(v.ownerObjectID);
		}

		public static void Read(Packet ins, out SSkillObjectEnter v)
		{
			v = new SSkillObjectEnter();
			v.objectID = ins.ReadInt();
			v.skillID = ins.ReadInt();
			v.objectTypeID = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			v.direction.x = ins.ReadFloat();	v.direction.y = ins.ReadFloat();	v.direction.z = ins.ReadFloat(); 
			v.ownerObjectID = ins.ReadInt();
		}
	}

	//npc
	public class SNpcEnter
	{
		public SNpcEnter()
		{
			objectID		= 0;
			npcID		= 0;
		}

		public int		objectID = 0;				//objectID
		public int		npcID = 0;				//npcID
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//pos

		public static void Write(Packet os, SNpcEnter v)
		{
			os.WriteInt(v.objectID);
			os.WriteInt(v.npcID);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
		}

		public static void Read(Packet ins, out SNpcEnter v)
		{
			v = new SNpcEnter();
			v.objectID = ins.ReadInt();
			v.npcID = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
		}
	}

	//friend Ally
	public class SFriendAllyEnter
	{
		public SFriendAllyEnter()
		{
			objectID		= 0;
			charID		= 0;
			style		= 0;
		}

		public int		objectID = 0;				//objectID
		public int		charID = 0;				//charID
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//pos
		public ESex		sex;				//sex
		public int		style = 0;				//style
		public vectorSItemuuid		equipinfo;				//
		public vectorAttrChange		attrVec;				//
		public vectorInt		skillVec;				//

		public static void Write(Packet os, SFriendAllyEnter v)
		{
			os.WriteInt(v.objectID);
			os.WriteInt(v.charID);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			ESex.Write(os, v.sex);
			os.WriteInt(v.style);
			vectorSItemuuid.Write(os, v.equipinfo);
			vectorAttrChange.Write(os, v.attrVec);
			vectorInt.Write(os, v.skillVec);
		}

		public static void Read(Packet ins, out SFriendAllyEnter v)
		{
			v = new SFriendAllyEnter();
			v.objectID = ins.ReadInt();
			v.charID = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			ESex.Read(ins, out v.sex);
			v.style = ins.ReadInt();
			vectorSItemuuid.Read(ins, out v.equipinfo);
			vectorAttrChange.Read(ins, out v.attrVec);
			vectorInt.Read(ins, out v.skillVec);
		}
	}

	//BreakableActor
	public class SBreakableActorEnter
	{
		public SBreakableActorEnter()
		{
			objectID		= 0;
			ActorID		= 0;
		}

		public int		objectID = 0;				//objectID
		public int		ActorID = 0;				//ActorID
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//pos
		public UnityEngine.Vector3		scale = new UnityEngine.Vector3();				//scale
		public UnityEngine.Vector3		rotation = new UnityEngine.Vector3();				//rotate

		public static void Write(Packet os, SBreakableActorEnter v)
		{
			os.WriteInt(v.objectID);
			os.WriteInt(v.ActorID);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			os.WriteFloat(v.scale.x);	os.WriteFloat(v.scale.y);	os.WriteFloat(v.scale.z);
			os.WriteFloat(v.rotation.x);	os.WriteFloat(v.rotation.y);	os.WriteFloat(v.rotation.z);
		}

		public static void Read(Packet ins, out SBreakableActorEnter v)
		{
			v = new SBreakableActorEnter();
			v.objectID = ins.ReadInt();
			v.ActorID = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			v.scale.x = ins.ReadFloat();	v.scale.y = ins.ReadFloat();	v.scale.z = ins.ReadFloat(); 
			v.rotation.x = ins.ReadFloat();	v.rotation.y = ins.ReadFloat();	v.rotation.z = ins.ReadFloat(); 
		}
	}

	//npc
	public class SMonsterEnter
	{
		public SMonsterEnter()
		{
			objectID		= 0;
			npcID		= 0;
			hp		= 0;
			moveSpeed		= 100;
			bRayCast		= true;
		}

		public int		objectID = 0;				//objectID
		public int		npcID = 0;				//npcID
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//pos
		public int		hp = 0;				//hp
		public int		moveSpeed = 0;				//moveSpeed
		public bool		bRayCast = false;				//true

		public static void Write(Packet os, SMonsterEnter v)
		{
			os.WriteInt(v.objectID);
			os.WriteInt(v.npcID);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			os.WriteInt(v.hp);
			os.WriteInt(v.moveSpeed);
			os.WriteBool(v.bRayCast);
		}

		public static void Read(Packet ins, out SMonsterEnter v)
		{
			v = new SMonsterEnter();
			v.objectID = ins.ReadInt();
			v.npcID = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			v.hp = ins.ReadInt();
			v.moveSpeed = ins.ReadInt();
			v.bRayCast = ins.ReadBool();
		}
	}

	//money
	public class SMoneyEnter
	{
		public SMoneyEnter()
		{
			objectID		= 0;
			money		= 0;
			hp		= 0;
		}

		public int		objectID = 0;				//objectID
		public int		money = 0;				//money
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//pos
		public int		hp = 0;				//hp
		public vectorServerMapMoney		Distribution;				//Karma

		public static void Write(Packet os, SMoneyEnter v)
		{
			os.WriteInt(v.objectID);
			os.WriteInt(v.money);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			os.WriteInt(v.hp);
			vectorServerMapMoney.Write(os, v.Distribution);
		}

		public static void Read(Packet ins, out SMoneyEnter v)
		{
			v = new SMoneyEnter();
			v.objectID = ins.ReadInt();
			v.money = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			v.hp = ins.ReadInt();
			vectorServerMapMoney.Read(ins, out v.Distribution);
		}
	}

	//
	public class SCharacterPrivateInfo
	{
		public SCharacterPrivateInfo()
		{
			objectID		= 0;
		}

		public int		objectID = 0;				//objectID
		public int		sungold = 0;				//
		public int		hp = 0;				//

		public static void Write(Packet os, SCharacterPrivateInfo v)
		{
			os.WriteInt(v.objectID);
			os.WriteInt(v.sungold);
			os.WriteInt(v.hp);
		}

		public static void Read(Packet ins, out SCharacterPrivateInfo v)
		{
			v = new SCharacterPrivateInfo();
			v.objectID = ins.ReadInt();
			v.sungold = ins.ReadInt();
			v.hp = ins.ReadInt();
		}
	}

	//
	public class SCharacterStartInfo
	{
		public SCharacterStartInfo()
		{
		}

		public int		objectID = 0;				//ObjectID
		public UnityEngine.Vector3		pos = new UnityEngine.Vector3();				//
		public vectorAttrChange		attrVec;				//

		public static void Write(Packet os, SCharacterStartInfo v)
		{
			os.WriteInt(v.objectID);
			os.WriteFloat(v.pos.x);	os.WriteFloat(v.pos.y);	os.WriteFloat(v.pos.z);
			vectorAttrChange.Write(os, v.attrVec);
		}

		public static void Read(Packet ins, out SCharacterStartInfo v)
		{
			v = new SCharacterStartInfo();
			v.objectID = ins.ReadInt();
			v.pos.x = ins.ReadFloat();	v.pos.y = ins.ReadFloat();	v.pos.z = ins.ReadFloat(); 
			vectorAttrChange.Read(ins, out v.attrVec);
		}
	}

	//
	public class EReviveType
	{
		public const int eReviveType_Money	= 0;		//
		public const int eReviveType_NoMoney	= 1;		//
		public const int eReviveType_Npc	= 2;		//npc
		public const int eReviveType_Item	= 3;		//item
		public const int eReviveType_Crystal	= 4;		//Crystal
		public EReviveType()
		{
			_value = 0;
		}

		public EReviveType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EReviveType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EReviveType v)
		{
			v = new EReviveType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eReviveType_Money" ;
			case 1:
				return   "eReviveType_NoMoney" ;
			case 2:
				return   "eReviveType_Npc" ;
			case 3:
				return   "eReviveType_Item" ;
			case 4:
				return   "eReviveType_Crystal" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	public class ProtocolBattle_METHOD
	{
	#region ID definitions
		public const int uMethodID_ActiveTriggerReq	= 0x15b12682;
		public const int uMethodID_AllyNpcEnter	= 0x5cdcbee1;
		public const int uMethodID_AllyRegenerate	= 0x33aaa61e;
		public const int uMethodID_AllyUpdateMoveRequest	= 0x51da0fa7;
		public const int uMethodID_BeginUseSkill	= 0x1987c5a1;
		public const int uMethodID_BreakSing	= 0x21d334b8;
		public const int uMethodID_BreakableActorEnter	= 0x3ee28776;
		public const int uMethodID_BulletHit	= 0x62a70a23;
		public const int uMethodID_CharacterPrivateInfoUpdate	= 0x2de31e13;
		public const int uMethodID_CharacterStartInfo	= 0x4f8580ad;
		public const int uMethodID_CharacterUpdate	= 0x43050760;
		public const int uMethodID_CreateAllyNpcRequest	= 0x56785124;
		public const int uMethodID_EnemyRewardReq	= 0x27f66af5;
		public const int uMethodID_EnterScene	= 0x17e15f02;
		public const int uMethodID_EnterSceneOk	= 0x52ca05ea;
		public const int uMethodID_FriendAllyEnter	= 0x7ce44418;
		public const int uMethodID_GetFriendList	= 0x738db628;
		public const int uMethodID_GetFriendListResult	= 0x150a7029;
		public const int uMethodID_ItemEnter	= 0x72e321bf;
		public const int uMethodID_MapLoadOK	= 0x31b7ac64;
		public const int uMethodID_MoveUnit	= 0x528e2717;
		public const int uMethodID_ObjectEnterTest	= 0x1a749d91;
		public const int uMethodID_ObjectLeave	= 0x15bd062a;
		public const int uMethodID_PickupItemFailed	= 0x60274b82;
		public const int uMethodID_PickupItemReq	= 0x44e05119;
		public const int uMethodID_PickupItemSuccAck	= 0x1cf304d2;
		public const int uMethodID_PickupMoneyReq	= 0x65513c7c;
		public const int uMethodID_PickupMoneyResult	= 0x503c611f;
		public const int uMethodID_PlayerChangeWeapon	= 0x5851e5d3;
		public const int uMethodID_PlayerChangeWeaponOk	= 0xa077643;
		public const int uMethodID_PlayerFireReq	= 0x3d5da371;
		public const int uMethodID_PlayerRegenerate	= 0x71fc5c6b;
		public const int uMethodID_PlayerReviveNumNTF	= 0x169774ca;
		public const int uMethodID_PlayerUseCoolWeaponReq	= 0x4cb913e5;
		public const int uMethodID_ReviveReq	= 0x4235c33b;
		public const int uMethodID_ReviveResult	= 0x307f69c4;
		public const int uMethodID_RushHit	= 0x3ecf5335;
		public const int uMethodID_SelectFriendAlly	= 0x44e1eaf8;
		public const int uMethodID_SelectFriendAllyResult	= 0x7a052479;
		public const int uMethodID_SerialKillOver	= 0x1977050;
		public const int uMethodID_SetKnockBackSpeed	= 0x7b9f97cc;
		public const int uMethodID_SetMoveType	= 0x19b3c9af;
		public const int uMethodID_SetMoveTypeFail	= 0x31230f51;
		public const int uMethodID_SetMoveTypeResult	= 0x7901ba98;
		public const int uMethodID_SetObjectPosition	= 0x287c23c8;
		public const int uMethodID_SetObjectVecPosition	= 0x665715f6;
		public const int uMethodID_SetSkillShortcut	= 0x14bbe8bf;
		public const int uMethodID_SkillObjectActive	= 0x30c00e78;
		public const int uMethodID_SkillObjectEnter	= 0x5c94540e;
		public const int uMethodID_SpawnnerKilled	= 0x2ec62427;
		public const int uMethodID_SpeechResult	= 0x66f3225;
		public const int uMethodID_StopBeginUseSkill	= 0x27b5cf97;
		public const int uMethodID_SyncCurTime	= 0x2cc63fdc;
		public const int uMethodID_TelePortMoveResult	= 0x510a4277;
		public const int uMethodID_TrapHit	= 0x7ac343b4;
		public const int uMethodID_TriggerAll	= 0x1d00931f;
		public const int uMethodID_TriggerAnimationResult	= 0x49a12493;
		public const int uMethodID_UpdateAnimation	= 0x1ef9479d;
		public const int uMethodID_UpdateAnimationNotify	= 0x2d3baad6;
		public const int uMethodID_UpdateMoveFail	= 0x16e5dc8a;
		public const int uMethodID_UpdateMoveRequest	= 0x3f03a05b;
		public const int uMethodID_UpdateMoveResult	= 0x890dc99;
		public const int uMethodID_UpdateSerialKillNum	= 0x47208f05;
		public const int uMethodID_UpdateStatusEffect	= 0x3df0eca;
		public const int uMethodID_UseAllyNormalAttack	= 0x1f2b374c;
		public const int uMethodID_UseAllySkill	= 0xb899ec0;
		public const int uMethodID_UseFightSkill	= 0x3198ed6e;
		public const int uMethodID_UseFightSkillFailed	= 0xbebe2d3;
		public const int uMethodID_UseFightSkillResult	= 0x1dafac7f;
		public const int uMethodID_UseNormalAttack	= 0x2a9c698;
		public const int uMethodID_UseNormalAttackFailed	= 0x7de4656d;
		public const int uMethodID_UseNormalAttackResult	= 0xfa82f19;
		public const int uMethodID_moneyEnter	= 0x6a74b232;
		public const int uMethodID_monsterEnter	= 0x1f480d0c;
		public const int uMethodID_npcEnter	= 0x123144fd;
	#endregion
	}

	public class ProtocolBattle_SendRequest
	{

		//
		public static Packet MapLoadOK()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_MapLoadOK);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mapName	map name
		public static Packet EnterScene(string mapName)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_EnterScene);
			stream.WriteString(mapName);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet MoveUnit()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_MoveUnit);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : skillID	skillID
		// Param : targetObjectID	
		// Param : location	
		// Param : curTime	current time
		public static Packet UseFightSkill(uint skillID, uint targetObjectID, UnityEngine.Vector3 location, uint curTime)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_UseFightSkill);
			stream.WriteUint(skillID);
			stream.WriteUint(targetObjectID);
			stream.WriteFloat(location.x);	stream.WriteFloat(location.y);	stream.WriteFloat(location.z);
			stream.WriteUint(curTime);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : weaponType	weaponType
		// Param : targetObjectID	
		// Param : curTime	current time
		public static Packet UseNormalAttack(EWeaponType weaponType, uint targetObjectID, uint curTime)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_UseNormalAttack);
			EWeaponType.Write(stream, weaponType);
			stream.WriteUint(targetObjectID);
			stream.WriteUint(curTime);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//summon ally
		// Param : weaponType	weaponType
		// Param : targetObjectID	
		// Param : curTime	current time
		public static Packet UseAllyNormalAttack(EWeaponType weaponType, uint targetObjectID, uint curTime)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_UseAllyNormalAttack);
			EWeaponType.Write(stream, weaponType);
			stream.WriteUint(targetObjectID);
			stream.WriteUint(curTime);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//Ally
		// Param : sourceID	sourceID
		// Param : skillID	skillID
		// Param : targetObjectID	
		// Param : location	
		// Param : curTime	current time
		public static Packet UseAllySkill(uint sourceID, uint skillID, uint targetObjectID, UnityEngine.Vector3 location, uint curTime)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_UseAllySkill);
			stream.WriteUint(sourceID);
			stream.WriteUint(skillID);
			stream.WriteUint(targetObjectID);
			stream.WriteFloat(location.x);	stream.WriteFloat(location.y);	stream.WriteFloat(location.z);
			stream.WriteUint(curTime);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : skillID	skillID
		public static Packet BreakSing(uint skillID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_BreakSing);
			stream.WriteUint(skillID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : skillID	skillID
		// Param : groupID	group id
		// Param : idx	skill index
		public static Packet SetSkillShortcut(int skillID, int groupID, int idx)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_SetSkillShortcut);
			stream.WriteInt(skillID);
			stream.WriteInt(groupID);
			stream.WriteInt(idx);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet TriggerAll()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_TriggerAll);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : pos	
		// Param : target	
		// Param : rot	
		// Param : continueTime	
		public static Packet UpdateMoveRequest(UnityEngine.Vector3 pos, UnityEngine.Vector3 target, float rot, uint continueTime)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_UpdateMoveRequest);
			stream.WriteFloat(pos.x);	stream.WriteFloat(pos.y);	stream.WriteFloat(pos.z);
			stream.WriteFloat(target.x);	stream.WriteFloat(target.y);	stream.WriteFloat(target.z);
			stream.WriteFloat(rot);
			stream.WriteUint(continueTime);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//Ally
		// Param : objectID	ObjectID
		// Param : pos	
		// Param : target	
		// Param : rot	
		// Param : continueTime	
		public static Packet AllyUpdateMoveRequest(int objectID, UnityEngine.Vector3 pos, UnityEngine.Vector3 target, float rot, uint continueTime)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_AllyUpdateMoveRequest);
			stream.WriteInt(objectID);
			stream.WriteFloat(pos.x);	stream.WriteFloat(pos.y);	stream.WriteFloat(pos.z);
			stream.WriteFloat(target.x);	stream.WriteFloat(target.y);	stream.WriteFloat(target.z);
			stream.WriteFloat(rot);
			stream.WriteUint(continueTime);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : pos	
		// Param : Allytype	AllyNpcType
		public static Packet CreateAllyNpcRequest(UnityEngine.Vector3 pos, EAllyNpcType Allytype)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_CreateAllyNpcRequest);
			stream.WriteFloat(pos.x);	stream.WriteFloat(pos.y);	stream.WriteFloat(pos.z);
			EAllyNpcType.Write(stream, Allytype);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : moveType	
		// Param : direction	
		// Param : pos	
		public static Packet SetMoveType(EObjectMoveType moveType, float direction, UnityEngine.Vector3 pos)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_SetMoveType);
			EObjectMoveType.Write(stream, moveType);
			stream.WriteFloat(direction);
			stream.WriteFloat(pos.x);	stream.WriteFloat(pos.y);	stream.WriteFloat(pos.z);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : animationID	
		public static Packet UpdateAnimation(short animationID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_UpdateAnimation);
			stream.WriteShort(animationID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : slotID	
		public static Packet PlayerChangeWeapon(sbyte slotID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_PlayerChangeWeapon);
			stream.WriteInt8(slotID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : direction	
		public static Packet PlayerFireReq(float direction)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_PlayerFireReq);
			stream.WriteFloat(direction);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : objectID	objectID
		public static Packet PlayerUseCoolWeaponReq(int objectID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_PlayerUseCoolWeaponReq);
			stream.WriteInt(objectID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : objectID	objectID
		public static Packet PickupItemReq(int objectID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_PickupItemReq);
			stream.WriteInt(objectID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : objectID	objectID
		public static Packet PickupMoneyReq(int objectID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_PickupMoneyReq);
			stream.WriteInt(objectID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : triggerID	triggerID
		public static Packet ActiveTriggerReq(int triggerID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_ActiveTriggerReq);
			stream.WriteInt(triggerID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//Enemy
		// Param : objectID	objectID
		// Param : RewardType	RewardType
		public static Packet EnemyRewardReq(int objectID, EMonsterRewardType RewardType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_EnemyRewardReq);
			stream.WriteInt(objectID);
			EMonsterRewardType.Write(stream, RewardType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : reviveType	
		public static Packet ReviveReq(EReviveType reviveType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_ReviveReq);
			EReviveType.Write(stream, reviveType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet GetFriendList()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_GetFriendList);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//select friend ally
		// Param : friendCharID	friend char id
		public static Packet SelectFriendAlly(int friendCharID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolBattle_METHOD.uMethodID_SelectFriendAlly);
			stream.WriteInt(friendCharID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}
	};

	public interface ProtocolBattle_ICallbackReceiver
	{
	#region Requests

		//
		// Param : curTime	current time
		void On_SyncCurTime(uint curTime);

		//
		// Param : mapName	map name
		void On_EnterSceneOk(string mapName);

		//
		// Param : objectID	objectID
		// Param : pos	
		// Param : rot	
		// Param : continueTime	
		void On_UpdateMoveResult(int objectID, UnityEngine.Vector3 pos, float rot, uint continueTime);

		//Teleport
		// Param : objectID	objectID
		// Param : pos	
		// Param : rot	
		// Param : continueTime	
		// Param : fadeinTime	fadeintime
		// Param : fadeoutTime	fadeouttime
		// Param : cameraFollow	cameraFollow
		void On_TelePortMoveResult(int objectID, UnityEngine.Vector3 pos, float rot, uint continueTime, float fadeinTime, float fadeoutTime, bool cameraFollow);

		//TriggerAnimation
		// Param : objectID	objectID
		// Param : AnimName	AnimationName
		// Param : IsLoop	IsLoopAnim
		// Param : AnimDelayTime	AnimDelayTime
		// Param : Collision	Collision
		// Param : Display	display
		void On_TriggerAnimationResult(int objectID, string AnimName, bool IsLoop, float AnimDelayTime, bool Collision, bool Display);

		//
		// Param : objectID	objectID
		// Param : pos	
		void On_SetObjectPosition(int objectID, UnityEngine.Vector3 pos);

		//
		// Param : time	time
		// Param : objectID	objectID
		// Param : vecpos	
		void On_SetObjectVecPosition(float time, int objectID, vectorServerPosition vecpos);

		//
		// Param : errType	
		// Param : direction	
		// Param : pos	
		void On_UpdateMoveFail(EServerErrorType errType, float direction, UnityEngine.Vector3 pos);

		//
		// Param : objectID	objectID
		// Param : moveType	
		// Param : direction	
		// Param : pos	
		void On_SetMoveTypeResult(int objectID, EObjectMoveType moveType, float direction, UnityEngine.Vector3 pos);

		//
		// Param : errType	
		// Param : moveType	
		// Param : direction	
		// Param : pos	
		void On_SetMoveTypeFail(EServerErrorType errType, EObjectMoveType moveType, float direction, UnityEngine.Vector3 pos);

		//
		// Param : objectID	objectID
		// Param : TargetID	TargetID
		// Param : animationID	
		void On_UpdateAnimationNotify(int objectID, int TargetID, short animationID);

		//
		// Param : objectID	objectID
		// Param : speed	speed
		// Param : behavior	behavior
		void On_SetKnockBackSpeed(int objectID, UnityEngine.Vector3 speed, int behavior);

		//SpeechResult
		// Param : npcID	npcID
		// Param : loop	loop
		// Param : Random	random
		// Param : time	time
		// Param : indexVec	indexVec
		// Param : inside	inside
		// Param : minpoint	minpoint
		// Param : maxpoint	maxpoint
		void On_SpeechResult(int npcID, bool loop, bool Random, float time, vectorInt indexVec, bool inside, SServerPosition minpoint, SServerPosition maxpoint);

		//
		// Param : objectID	objectID
		// Param : skillID	skillID
		// Param : reason	
		void On_UseFightSkillFailed(int objectID, uint skillID, EServerErrorType reason);

		//
		// Param : isCritical	
		// Param : useSkillResult	
		void On_UseNormalAttackResult(bool isCritical, SUseSkillResult useSkillResult);

		//
		// Param : targetObjectID	
		// Param : reason	
		void On_UseNormalAttackFailed(uint targetObjectID, EServerErrorType reason);

		//
		// Param : useSkillResult	
		void On_BeginUseSkill(SUseSkillResult useSkillResult);

		//
		// Param : skillID	skillID
		// Param : souceObjectID	
		void On_StopBeginUseSkill(uint skillID, uint souceObjectID);

		//
		// Param : useSkillResult	
		void On_UseFightSkillResult(SUseSkillResult useSkillResult);

		//
		// Param : statusEffectVec	status
		void On_UpdateStatusEffect(vectorStatusEffects statusEffectVec);

		//bullet
		// Param : objectID	bullet
		// Param : bulletEffect	bullet
		void On_BulletHit(int objectID, SSkillEffect bulletEffect);

		//trap
		// Param : objectID	trap
		// Param : trapEffect	trap
		void On_TrapHit(int objectID, SSkillEffect trapEffect);

		//rush
		// Param : objectID	rush
		// Param : hitEffect	rush
		void On_RushHit(int objectID, SSkillEffect hitEffect);

		//seral kill num
		// Param : serialNum	seral kill num
		void On_UpdateSerialKillNum(int serialNum);

		//SpawnnerKilled
		// Param : SpawnerID	SpawnerID
		void On_SpawnnerKilled(int SpawnerID);

		//SerialKillOver
		// Param : serialNum	serialNum
		// Param : serialExp	serialExp
		void On_SerialKillOver(int serialNum, int serialExp);

		//object
		// Param : objectID	objectID
		void On_ObjectEnterTest(int objectID);

		//item
		// Param : mapitemInfo	itemInfo
		void On_ItemEnter(SItemEnter mapitemInfo);

		//money
		// Param : moneyInfo	moneyInfo
		void On_moneyEnter(SMoneyEnter moneyInfo);

		//skill object
		// Param : skillObjectInfo	skill object info
		void On_SkillObjectEnter(SSkillObjectEnter skillObjectInfo);

		//npc
		// Param : npcInfo	npcInfo
		void On_npcEnter(SNpcEnter npcInfo);

		//BreakableActor
		// Param : BreakableActorInfo	BreakableActorInfo
		void On_BreakableActorEnter(SBreakableActorEnter BreakableActorInfo);

		//FriendAlly
		// Param : FriendAllyInfo	Friend Ally
		void On_FriendAllyEnter(SFriendAllyEnter FriendAllyInfo);

		//monster
		// Param : monsterInfo	npcInfo
		void On_monsterEnter(SMonsterEnter monsterInfo);

		//AllyNpc
		// Param : objectID	Ally
		void On_AllyNpcEnter(int objectID);

		//skill object active
		// Param : objectID	object id
		void On_SkillObjectActive(int objectID);

		//
		// Param : characterUpdateInfo	
		void On_CharacterUpdate(SCharacterUpdateInfo characterUpdateInfo);

		//object
		// Param : objectIDVec	
		void On_ObjectLeave(vectorInt objectIDVec);

		//
		// Param : characterUpdateInfo	
		void On_CharacterPrivateInfoUpdate(SCharacterPrivateInfo characterUpdateInfo);

		//
		// Param : charStartInfo	
		void On_CharacterStartInfo(SCharacterStartInfo charStartInfo);

		//
		// Param : slotID	
		void On_PlayerChangeWeaponOk(sbyte slotID);

		//
		// Param : CurHealth	
		// Param : CurEnergy	
		void On_PlayerRegenerate(int CurHealth, int CurEnergy);

		//
		// Param : objectID	objectID
		// Param : CurHealth	
		// Param : CurEnergy	
		void On_AllyRegenerate(int objectID, int CurHealth, int CurEnergy);

		//
		// Param : crystalReviveNum	
		// Param : karmaReviveNum	
		void On_PlayerReviveNumNTF(int crystalReviveNum, int karmaReviveNum);

		//
		// Param : objectID	objectID
		// Param : error	error type
		void On_PickupItemFailed(int objectID, EServerErrorType error);

		//
		// Param : objectID	objectID
		// Param : result	
		void On_PickupItemSuccAck(int objectID, EServerErrorType result);

		//
		// Param : objectID	objectID
		// Param : result	result
		void On_PickupMoneyResult(int objectID, EServerErrorType result);

		//
		// Param : reviveType	
		// Param : result	
		// Param : playerAttrVec	
		void On_ReviveResult(EReviveType reviveType, EServerErrorType result, vectorAttrChange playerAttrVec);

		//
		// Param : friendVec	friend char vecter
		void On_GetFriendListResult(vectorFriendCharInfo friendVec);

		//select friend ally result
		// Param : charID	friend char ID
		// Param : result	result
		void On_SelectFriendAllyResult(int charID, EServerErrorType result);
	#endregion
	}

	public sealed class ProtocolBattle_ReceiveCallback
	{
	#region Parse Code.

		static void __parse__On_SyncCurTime(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			uint	curTime;
			curTime = ins.ReadUint();
			receiver.On_SyncCurTime(curTime);
		}

		static void __parse__On_EnterSceneOk(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			string mapName;
			mapName = ins.ReadString();
			receiver.On_EnterSceneOk(mapName);
		}

		static void __parse__On_UpdateMoveResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			UnityEngine.Vector3		pos = new UnityEngine.Vector3();
			pos.x = ins.ReadFloat();	pos.y = ins.ReadFloat();	pos.z = ins.ReadFloat(); 
			float	rot;
			rot = ins.ReadFloat();
			uint	continueTime;
			continueTime = ins.ReadUint();
			receiver.On_UpdateMoveResult(objectID, pos, rot, continueTime);
		}

		static void __parse__On_TelePortMoveResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			UnityEngine.Vector3		pos = new UnityEngine.Vector3();
			pos.x = ins.ReadFloat();	pos.y = ins.ReadFloat();	pos.z = ins.ReadFloat(); 
			float	rot;
			rot = ins.ReadFloat();
			uint	continueTime;
			continueTime = ins.ReadUint();
			float	fadeinTime;
			fadeinTime = ins.ReadFloat();
			float	fadeoutTime;
			fadeoutTime = ins.ReadFloat();
			bool	cameraFollow;
			cameraFollow = ins.ReadBool();
			receiver.On_TelePortMoveResult(objectID, pos, rot, continueTime, fadeinTime, fadeoutTime, cameraFollow);
		}

		static void __parse__On_TriggerAnimationResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			string AnimName;
			AnimName = ins.ReadString();
			bool	IsLoop;
			IsLoop = ins.ReadBool();
			float	AnimDelayTime;
			AnimDelayTime = ins.ReadFloat();
			bool	Collision;
			Collision = ins.ReadBool();
			bool	Display;
			Display = ins.ReadBool();
			receiver.On_TriggerAnimationResult(objectID, AnimName, IsLoop, AnimDelayTime, Collision, Display);
		}

		static void __parse__On_SetObjectPosition(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			UnityEngine.Vector3		pos = new UnityEngine.Vector3();
			pos.x = ins.ReadFloat();	pos.y = ins.ReadFloat();	pos.z = ins.ReadFloat(); 
			receiver.On_SetObjectPosition(objectID, pos);
		}

		static void __parse__On_SetObjectVecPosition(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			float	time;
			time = ins.ReadFloat();
			int	objectID;
			objectID = ins.ReadInt();
			vectorServerPosition	vecpos;
			vectorServerPosition.Read(ins, out vecpos);
			receiver.On_SetObjectVecPosition(time, objectID, vecpos);
		}

		static void __parse__On_UpdateMoveFail(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			EServerErrorType	errType;
			EServerErrorType.Read(ins, out errType);
			float	direction;
			direction = ins.ReadFloat();
			UnityEngine.Vector3		pos = new UnityEngine.Vector3();
			pos.x = ins.ReadFloat();	pos.y = ins.ReadFloat();	pos.z = ins.ReadFloat(); 
			receiver.On_UpdateMoveFail(errType, direction, pos);
		}

		static void __parse__On_SetMoveTypeResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			EObjectMoveType	moveType;
			EObjectMoveType.Read(ins, out moveType);
			float	direction;
			direction = ins.ReadFloat();
			UnityEngine.Vector3		pos = new UnityEngine.Vector3();
			pos.x = ins.ReadFloat();	pos.y = ins.ReadFloat();	pos.z = ins.ReadFloat(); 
			receiver.On_SetMoveTypeResult(objectID, moveType, direction, pos);
		}

		static void __parse__On_SetMoveTypeFail(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			EServerErrorType	errType;
			EServerErrorType.Read(ins, out errType);
			EObjectMoveType	moveType;
			EObjectMoveType.Read(ins, out moveType);
			float	direction;
			direction = ins.ReadFloat();
			UnityEngine.Vector3		pos = new UnityEngine.Vector3();
			pos.x = ins.ReadFloat();	pos.y = ins.ReadFloat();	pos.z = ins.ReadFloat(); 
			receiver.On_SetMoveTypeFail(errType, moveType, direction, pos);
		}

		static void __parse__On_UpdateAnimationNotify(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			int	TargetID;
			TargetID = ins.ReadInt();
			short	animationID;
			animationID = ins.ReadShort();
			receiver.On_UpdateAnimationNotify(objectID, TargetID, animationID);
		}

		static void __parse__On_SetKnockBackSpeed(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			UnityEngine.Vector3		speed = new UnityEngine.Vector3();
			speed.x = ins.ReadFloat();	speed.y = ins.ReadFloat();	speed.z = ins.ReadFloat(); 
			int	behavior;
			behavior = ins.ReadInt();
			receiver.On_SetKnockBackSpeed(objectID, speed, behavior);
		}

		static void __parse__On_SpeechResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	npcID;
			npcID = ins.ReadInt();
			bool	loop;
			loop = ins.ReadBool();
			bool	Random;
			Random = ins.ReadBool();
			float	time;
			time = ins.ReadFloat();
			vectorInt	indexVec;
			vectorInt.Read(ins, out indexVec);
			bool	inside;
			inside = ins.ReadBool();
			SServerPosition	minpoint;
			SServerPosition.Read(ins, out minpoint);
			SServerPosition	maxpoint;
			SServerPosition.Read(ins, out maxpoint);
			receiver.On_SpeechResult(npcID, loop, Random, time, indexVec, inside, minpoint, maxpoint);
		}

		static void __parse__On_UseFightSkillFailed(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			uint	skillID;
			skillID = ins.ReadUint();
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_UseFightSkillFailed(objectID, skillID, reason);
		}

		static void __parse__On_UseNormalAttackResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			bool	isCritical;
			isCritical = ins.ReadBool();
			SUseSkillResult	useSkillResult;
			SUseSkillResult.Read(ins, out useSkillResult);
			receiver.On_UseNormalAttackResult(isCritical, useSkillResult);
		}

		static void __parse__On_UseNormalAttackFailed(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			uint	targetObjectID;
			targetObjectID = ins.ReadUint();
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_UseNormalAttackFailed(targetObjectID, reason);
		}

		static void __parse__On_BeginUseSkill(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SUseSkillResult	useSkillResult;
			SUseSkillResult.Read(ins, out useSkillResult);
			receiver.On_BeginUseSkill(useSkillResult);
		}

		static void __parse__On_StopBeginUseSkill(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			uint	skillID;
			skillID = ins.ReadUint();
			uint	souceObjectID;
			souceObjectID = ins.ReadUint();
			receiver.On_StopBeginUseSkill(skillID, souceObjectID);
		}

		static void __parse__On_UseFightSkillResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SUseSkillResult	useSkillResult;
			SUseSkillResult.Read(ins, out useSkillResult);
			receiver.On_UseFightSkillResult(useSkillResult);
		}

		static void __parse__On_UpdateStatusEffect(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			vectorStatusEffects	statusEffectVec;
			vectorStatusEffects.Read(ins, out statusEffectVec);
			receiver.On_UpdateStatusEffect(statusEffectVec);
		}

		static void __parse__On_BulletHit(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			SSkillEffect	bulletEffect;
			SSkillEffect.Read(ins, out bulletEffect);
			receiver.On_BulletHit(objectID, bulletEffect);
		}

		static void __parse__On_TrapHit(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			SSkillEffect	trapEffect;
			SSkillEffect.Read(ins, out trapEffect);
			receiver.On_TrapHit(objectID, trapEffect);
		}

		static void __parse__On_RushHit(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			SSkillEffect	hitEffect;
			SSkillEffect.Read(ins, out hitEffect);
			receiver.On_RushHit(objectID, hitEffect);
		}

		static void __parse__On_UpdateSerialKillNum(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	serialNum;
			serialNum = ins.ReadInt();
			receiver.On_UpdateSerialKillNum(serialNum);
		}

		static void __parse__On_SpawnnerKilled(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	SpawnerID;
			SpawnerID = ins.ReadInt();
			receiver.On_SpawnnerKilled(SpawnerID);
		}

		static void __parse__On_SerialKillOver(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	serialNum;
			serialNum = ins.ReadInt();
			int	serialExp;
			serialExp = ins.ReadInt();
			receiver.On_SerialKillOver(serialNum, serialExp);
		}

		static void __parse__On_ObjectEnterTest(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			receiver.On_ObjectEnterTest(objectID);
		}

		static void __parse__On_ItemEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SItemEnter	mapitemInfo;
			SItemEnter.Read(ins, out mapitemInfo);
			receiver.On_ItemEnter(mapitemInfo);
		}

		static void __parse__On_moneyEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SMoneyEnter	moneyInfo;
			SMoneyEnter.Read(ins, out moneyInfo);
			receiver.On_moneyEnter(moneyInfo);
		}

		static void __parse__On_SkillObjectEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SSkillObjectEnter	skillObjectInfo;
			SSkillObjectEnter.Read(ins, out skillObjectInfo);
			receiver.On_SkillObjectEnter(skillObjectInfo);
		}

		static void __parse__On_npcEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SNpcEnter	npcInfo;
			SNpcEnter.Read(ins, out npcInfo);
			receiver.On_npcEnter(npcInfo);
		}

		static void __parse__On_BreakableActorEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SBreakableActorEnter	BreakableActorInfo;
			SBreakableActorEnter.Read(ins, out BreakableActorInfo);
			receiver.On_BreakableActorEnter(BreakableActorInfo);
		}

		static void __parse__On_FriendAllyEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SFriendAllyEnter	FriendAllyInfo;
			SFriendAllyEnter.Read(ins, out FriendAllyInfo);
			receiver.On_FriendAllyEnter(FriendAllyInfo);
		}

		static void __parse__On_monsterEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SMonsterEnter	monsterInfo;
			SMonsterEnter.Read(ins, out monsterInfo);
			receiver.On_monsterEnter(monsterInfo);
		}

		static void __parse__On_AllyNpcEnter(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			receiver.On_AllyNpcEnter(objectID);
		}

		static void __parse__On_SkillObjectActive(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			receiver.On_SkillObjectActive(objectID);
		}

		static void __parse__On_CharacterUpdate(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SCharacterUpdateInfo	characterUpdateInfo;
			SCharacterUpdateInfo.Read(ins, out characterUpdateInfo);
			receiver.On_CharacterUpdate(characterUpdateInfo);
		}

		static void __parse__On_ObjectLeave(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			vectorInt	objectIDVec;
			vectorInt.Read(ins, out objectIDVec);
			receiver.On_ObjectLeave(objectIDVec);
		}

		static void __parse__On_CharacterPrivateInfoUpdate(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SCharacterPrivateInfo	characterUpdateInfo;
			SCharacterPrivateInfo.Read(ins, out characterUpdateInfo);
			receiver.On_CharacterPrivateInfoUpdate(characterUpdateInfo);
		}

		static void __parse__On_CharacterStartInfo(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			SCharacterStartInfo	charStartInfo;
			SCharacterStartInfo.Read(ins, out charStartInfo);
			receiver.On_CharacterStartInfo(charStartInfo);
		}

		static void __parse__On_PlayerChangeWeaponOk(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			sbyte	slotID;
			slotID = ins.ReadInt8();
			receiver.On_PlayerChangeWeaponOk(slotID);
		}

		static void __parse__On_PlayerRegenerate(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	CurHealth;
			CurHealth = ins.ReadInt();
			int	CurEnergy;
			CurEnergy = ins.ReadInt();
			receiver.On_PlayerRegenerate(CurHealth, CurEnergy);
		}

		static void __parse__On_AllyRegenerate(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			int	CurHealth;
			CurHealth = ins.ReadInt();
			int	CurEnergy;
			CurEnergy = ins.ReadInt();
			receiver.On_AllyRegenerate(objectID, CurHealth, CurEnergy);
		}

		static void __parse__On_PlayerReviveNumNTF(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	crystalReviveNum;
			crystalReviveNum = ins.ReadInt();
			int	karmaReviveNum;
			karmaReviveNum = ins.ReadInt();
			receiver.On_PlayerReviveNumNTF(crystalReviveNum, karmaReviveNum);
		}

		static void __parse__On_PickupItemFailed(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			EServerErrorType	error;
			EServerErrorType.Read(ins, out error);
			receiver.On_PickupItemFailed(objectID, error);
		}

		static void __parse__On_PickupItemSuccAck(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_PickupItemSuccAck(objectID, result);
		}

		static void __parse__On_PickupMoneyResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	objectID;
			objectID = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_PickupMoneyResult(objectID, result);
		}

		static void __parse__On_ReviveResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			EReviveType	reviveType;
			EReviveType.Read(ins, out reviveType);
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			vectorAttrChange	playerAttrVec;
			vectorAttrChange.Read(ins, out playerAttrVec);
			receiver.On_ReviveResult(reviveType, result, playerAttrVec);
		}

		static void __parse__On_GetFriendListResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			vectorFriendCharInfo	friendVec;
			vectorFriendCharInfo.Read(ins, out friendVec);
			receiver.On_GetFriendListResult(friendVec);
		}

		static void __parse__On_SelectFriendAllyResult(Packet ins, ProtocolBattle_ICallbackReceiver receiver)
		{
			int	charID;
			charID = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_SelectFriendAllyResult(charID, result);
		}

		public static bool Parse(ProtocolBattle_ICallbackReceiver receiver, Packet pak)
		{
			int methodID = 0;
			methodID = pak.ReadInt();

			switch(methodID)
			{
			case ProtocolBattle_METHOD.uMethodID_SyncCurTime:
				__parse__On_SyncCurTime(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_EnterSceneOk:
				__parse__On_EnterSceneOk(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UpdateMoveResult:
				__parse__On_UpdateMoveResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_TelePortMoveResult:
				__parse__On_TelePortMoveResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_TriggerAnimationResult:
				__parse__On_TriggerAnimationResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SetObjectPosition:
				__parse__On_SetObjectPosition(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SetObjectVecPosition:
				__parse__On_SetObjectVecPosition(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UpdateMoveFail:
				__parse__On_UpdateMoveFail(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SetMoveTypeResult:
				__parse__On_SetMoveTypeResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SetMoveTypeFail:
				__parse__On_SetMoveTypeFail(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UpdateAnimationNotify:
				__parse__On_UpdateAnimationNotify(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SetKnockBackSpeed:
				__parse__On_SetKnockBackSpeed(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SpeechResult:
				__parse__On_SpeechResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UseFightSkillFailed:
				__parse__On_UseFightSkillFailed(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UseNormalAttackResult:
				__parse__On_UseNormalAttackResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UseNormalAttackFailed:
				__parse__On_UseNormalAttackFailed(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_BeginUseSkill:
				__parse__On_BeginUseSkill(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_StopBeginUseSkill:
				__parse__On_StopBeginUseSkill(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UseFightSkillResult:
				__parse__On_UseFightSkillResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UpdateStatusEffect:
				__parse__On_UpdateStatusEffect(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_BulletHit:
				__parse__On_BulletHit(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_TrapHit:
				__parse__On_TrapHit(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_RushHit:
				__parse__On_RushHit(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_UpdateSerialKillNum:
				__parse__On_UpdateSerialKillNum(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SpawnnerKilled:
				__parse__On_SpawnnerKilled(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SerialKillOver:
				__parse__On_SerialKillOver(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_ObjectEnterTest:
				__parse__On_ObjectEnterTest(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_ItemEnter:
				__parse__On_ItemEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_moneyEnter:
				__parse__On_moneyEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SkillObjectEnter:
				__parse__On_SkillObjectEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_npcEnter:
				__parse__On_npcEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_BreakableActorEnter:
				__parse__On_BreakableActorEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_FriendAllyEnter:
				__parse__On_FriendAllyEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_monsterEnter:
				__parse__On_monsterEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_AllyNpcEnter:
				__parse__On_AllyNpcEnter(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SkillObjectActive:
				__parse__On_SkillObjectActive(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_CharacterUpdate:
				__parse__On_CharacterUpdate(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_ObjectLeave:
				__parse__On_ObjectLeave(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_CharacterPrivateInfoUpdate:
				__parse__On_CharacterPrivateInfoUpdate(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_CharacterStartInfo:
				__parse__On_CharacterStartInfo(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_PlayerChangeWeaponOk:
				__parse__On_PlayerChangeWeaponOk(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_PlayerRegenerate:
				__parse__On_PlayerRegenerate(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_AllyRegenerate:
				__parse__On_AllyRegenerate(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_PlayerReviveNumNTF:
				__parse__On_PlayerReviveNumNTF(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_PickupItemFailed:
				__parse__On_PickupItemFailed(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_PickupItemSuccAck:
				__parse__On_PickupItemSuccAck(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_PickupMoneyResult:
				__parse__On_PickupMoneyResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_ReviveResult:
				__parse__On_ReviveResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_GetFriendListResult:
				__parse__On_GetFriendListResult(pak, receiver);
				return true;
			case ProtocolBattle_METHOD.uMethodID_SelectFriendAllyResult:
				__parse__On_SelectFriendAllyResult(pak, receiver);
				return true;
			}

			return false;
		}
	#endregion
	}

