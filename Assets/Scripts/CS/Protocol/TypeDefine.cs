/*=============================================================================
*	Copyright (C) 2006-2011, Zhang Kun. All Rights Reserved.
*	Generated by: ProtocolGen 1.3
=============================================================================*/
//
using System;
//
using System.Threading;
//
using System.Collections.Generic;

	//
	public class EServerType
	{
		public const int eUnknownServerType	= 0;		//
		public const int eCenterServer	= 1;		//
		public const int eGameServer	= 2;		//
		public const int eQuestServer	= 3;		//
		public const int eAuctionServer	= 4;		//AuctionServer
		public const int eGmServer	= 5;		//gm
		public const int eServerManager	= 6;		//server manager
		public const int eMonitorManager	= 7;		//monitor manager
		public EServerType()
		{
			_value = 0;
		}

		public EServerType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EServerType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EServerType v)
		{
			v = new EServerType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eUnknownServerType" ;
			case 1:
				return   "eCenterServer" ;
			case 2:
				return   "eGameServer" ;
			case 3:
				return   "eQuestServer" ;
			case 4:
				return   "eAuctionServer" ;
			case 5:
				return   "eGmServer" ;
			case 6:
				return   "eServerManager" ;
			case 7:
				return   "eMonitorManager" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EServerRegionType
	{
		public const int eRegionType_US	= 0;		//
		public const int eRegionType_Europe	= 1;		//
		public const int eRegionType_Asia	= 2;		//
		public EServerRegionType()
		{
			_value = 0;
		}

		public EServerRegionType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EServerRegionType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EServerRegionType v)
		{
			v = new EServerRegionType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eRegionType_US" ;
			case 1:
				return   "eRegionType_Europe" ;
			case 2:
				return   "eRegionType_Asia" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EUserType
	{
		public const int eUserType_Kongregate	= 0;		//Kongregate
		public const int eUserType_Facebook	= 1;		//facebook
		public const int eUserType_SpicyHorse	= 2;		//spicyhorse
		public const int eUserType_Aeria	= 3;		//Aeria
		public const int eUserType_Armor	= 4;		//Armor
		public const int eUserType_Steam	= 5;		//Steam
		public EUserType()
		{
			_value = 0;
		}

		public EUserType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EUserType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EUserType v)
		{
			v = new EUserType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eUserType_Kongregate" ;
			case 1:
				return   "eUserType_Facebook" ;
			case 2:
				return   "eUserType_SpicyHorse" ;
			case 3:
				return   "eUserType_Aeria" ;
			case 4:
				return   "eUserType_Armor" ;
			case 5:
				return   "eUserType_Steam" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EClientType
	{
		public const int eClientType_WebPlayer	= 0;		//WebPlayer
		public const int eClientType_Android	= 1;		//Android
		public const int eClientType_IOS_Phone	= 2;		//IOS_Phone
		public const int eClientType_IOS_Pad	= 3;		//IOS_Pad
		public const int eClientType_Standalone_OSX	= 4;		//Standalone_OSX
		public const int eClientType_Standalone_Win	= 5;		//Standalone_Win
		public const int eClientType_Standalone_Llinux	= 6;		//Standalone_Linux
		public EClientType()
		{
			_value = 0;
		}

		public EClientType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EClientType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EClientType v)
		{
			v = new EClientType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eClientType_WebPlayer" ;
			case 1:
				return   "eClientType_Android" ;
			case 2:
				return   "eClientType_IOS_Phone" ;
			case 3:
				return   "eClientType_IOS_Pad" ;
			case 4:
				return   "eClientType_Standalone_OSX" ;
			case 5:
				return   "eClientType_Standalone_Win" ;
			case 6:
				return   "eClientType_Standalone_Llinux" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EAttributeType
	{
		public const int ATTR_CurHP	= 0;		//
		public const int ATTR_CurMP	= 1;		//
		public const int ATTR_MaxHP	= 2;		//
		public const int ATTR_MaxMP	= 3;		//
		public const int ATTR_Power	= 4;		//
		public const int ATTR_Defense	= 5;		//
		public const int ATTR_Skill	= 6;		//
		public const int ATTR_PhyAtk	= 7;		//
		public const int ATTR_DamageReduction	= 8;		//
		public const int ATTR_Critical	= 9;		//
		public const int ATTR_HPRecover	= 10;		//
		public const int ATTR_MPRecover	= 11;		//
		public const int ATTR_MoveSpeed	= 12;		//
		public const int ATTR_AttackSpeed	= 13;		//
		public const int ATTR_CriticalDamage	= 14;		//
		public const int ATTR_Max	= 15;		//
		public EAttributeType()
		{
			_value = 0;
		}

		public EAttributeType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EAttributeType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EAttributeType v)
		{
			v = new EAttributeType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "ATTR_CurHP" ;
			case 1:
				return   "ATTR_CurMP" ;
			case 2:
				return   "ATTR_MaxHP" ;
			case 3:
				return   "ATTR_MaxMP" ;
			case 4:
				return   "ATTR_Power" ;
			case 5:
				return   "ATTR_Defense" ;
			case 6:
				return   "ATTR_Skill" ;
			case 7:
				return   "ATTR_PhyAtk" ;
			case 8:
				return   "ATTR_DamageReduction" ;
			case 9:
				return   "ATTR_Critical" ;
			case 10:
				return   "ATTR_HPRecover" ;
			case 11:
				return   "ATTR_MPRecover" ;
			case 12:
				return   "ATTR_MoveSpeed" ;
			case 13:
				return   "ATTR_AttackSpeed" ;
			case 14:
				return   "ATTR_CriticalDamage" ;
			case 15:
				return   "ATTR_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class SCharEventData
	{
		public SCharEventData()
		{
		}

		public vectorInt		eventIDVec;				//

		public static void Write(Packet os, SCharEventData v)
		{
			vectorInt.Write(os, v.eventIDVec);
		}

		public static void Read(Packet ins, out SCharEventData v)
		{
			v = new SCharEventData();
			vectorInt.Read(ins, out v.eventIDVec);
		}
	}

	//
	public class SAccountEventData
	{
		public SAccountEventData()
		{
		}

		public vectorInt		eventIDVec;				//

		public static void Write(Packet os, SAccountEventData v)
		{
			vectorInt.Write(os, v.eventIDVec);
		}

		public static void Read(Packet ins, out SAccountEventData v)
		{
			v = new SAccountEventData();
			vectorInt.Read(ins, out v.eventIDVec);
		}
	}

	//event data
	public class mapEvent : Dictionary<int, string>
	{
		public static void Write(Packet os, mapEvent v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, string> m in v)
			{
				os.WriteInt(m.Key);
				os.WriteString(m.Value);
			}
		}
		public static void Read(Packet ins, out mapEvent v)
		{
			v = new mapEvent();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				string tempValue;
				tempValue = ins.ReadString();

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class SAttributeChange
	{
		public SAttributeChange()
		{
			value		= 0;
		}

		public EAttributeType		attributeType;				//
		public int		value = 0;				//

		public static void Write(Packet os, SAttributeChange v)
		{
			EAttributeType.Write(os, v.attributeType);
			os.WriteInt(v.value);
		}

		public static void Read(Packet ins, out SAttributeChange v)
		{
			v = new SAttributeChange();
			EAttributeType.Read(ins, out v.attributeType);
			v.value = ins.ReadInt();
		}
	}

	//
	public class vectorAttrChange : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorAttrChange v)
		{
			os.WriteInt(v.Count);
			foreach (SAttributeChange m in v)
			{
				SAttributeChange.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorAttrChange v)
		{
			v = new vectorAttrChange();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SAttributeChange m;
				SAttributeChange.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SServerStatus
	{
		public SServerStatus()
		{
			LinkCount		= 0;
			Overload		= 0;
			BWInside		= 0;
			BWOutside		= 0;
		}

		public int		LinkCount = 0;				//
		public int		Overload = 0;				//
		public int		BWInside = 0;				//
		public int		BWOutside = 0;				//

		public static void Write(Packet os, SServerStatus v)
		{
			os.WriteInt(v.LinkCount);
			os.WriteInt(v.Overload);
			os.WriteInt(v.BWInside);
			os.WriteInt(v.BWOutside);
		}

		public static void Read(Packet ins, out SServerStatus v)
		{
			v = new SServerStatus();
			v.LinkCount = ins.ReadInt();
			v.Overload = ins.ReadInt();
			v.BWInside = ins.ReadInt();
			v.BWOutside = ins.ReadInt();
		}
	}

	//
	public class mapServerStatus : Dictionary<string, SServerStatus>
	{
		public static void Write(Packet os, mapServerStatus v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<string, SServerStatus> m in v)
			{
				os.WriteString(m.Key);
				SServerStatus.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapServerStatus v)
		{
			v = new mapServerStatus();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				string tempKey;
				tempKey = ins.ReadString();

				SServerStatus tempValue;
				SServerStatus.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class SServerListenInfo
	{
		public SServerListenInfo()
		{
			IP		= "IP";
			Port		= 0;
		}

		public string		IP = "";				//IP
		public ushort		Port = 0;				//

		public static void Write(Packet os, SServerListenInfo v)
		{
			os.WriteString(v.IP);
			os.WriteUshort(v.Port);
		}

		public static void Read(Packet ins, out SServerListenInfo v)
		{
			v = new SServerListenInfo();
			v.IP = ins.ReadString();
			v.Port = ins.ReadUshort();
		}
	}

	//
	public class mapServerListenInfos : Dictionary<string, SServerListenInfo>
	{
		public static void Write(Packet os, mapServerListenInfos v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<string, SServerListenInfo> m in v)
			{
				os.WriteString(m.Key);
				SServerListenInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapServerListenInfos v)
		{
			v = new mapServerListenInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				string tempKey;
				tempKey = ins.ReadString();

				SServerListenInfo tempValue;
				SServerListenInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class SServerInfo
	{
		public SServerInfo()
		{
			instanceName		= "instanceName";
		}

		public EServerType		eType;				//
		public EServerRegionType		eRegionType;				//
		public string		instanceName = "";				//
		public mapServerListenInfos		listenInfos;				//
		public SServerStatus		status;				//

		public static void Write(Packet os, SServerInfo v)
		{
			EServerType.Write(os, v.eType);
			EServerRegionType.Write(os, v.eRegionType);
			os.WriteString(v.instanceName);
			mapServerListenInfos.Write(os, v.listenInfos);
			SServerStatus.Write(os, v.status);
		}

		public static void Read(Packet ins, out SServerInfo v)
		{
			v = new SServerInfo();
			EServerType.Read(ins, out v.eType);
			EServerRegionType.Read(ins, out v.eRegionType);
			v.instanceName = ins.ReadString();
			mapServerListenInfos.Read(ins, out v.listenInfos);
			SServerStatus.Read(ins, out v.status);
		}
	}

	//
	public class vectorServerInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorServerInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SServerInfo m in v)
			{
				SServerInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorServerInfos v)
		{
			v = new vectorServerInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SServerInfo m;
				SServerInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//buy item info
	public class SSimpBuyitemInfo
	{
		public SSimpBuyitemInfo()
		{
		}

		public int		itemID = 0;				//item id
		public uint		count = 0;				//buy count
		public sbyte		currencyType = 0;				//currency Type (ticket :1 ,token:2 )

		public static void Write(Packet os, SSimpBuyitemInfo v)
		{
			os.WriteInt(v.itemID);
			os.WriteUint(v.count);
			os.WriteInt8(v.currencyType);
		}

		public static void Read(Packet ins, out SSimpBuyitemInfo v)
		{
			v = new SSimpBuyitemInfo();
			v.itemID = ins.ReadInt();
			v.count = ins.ReadUint();
			v.currencyType = ins.ReadInt8();
		}
	}

	//
	public class vectorSimpBuyitemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSimpBuyitemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SSimpBuyitemInfo m in v)
			{
				SSimpBuyitemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSimpBuyitemInfos v)
		{
			v = new vectorSimpBuyitemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SSimpBuyitemInfo m;
				SSimpBuyitemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//buy item info
	public class SBuyitemInfo
	{
		public SBuyitemInfo()
		{
			UUID		= 0;
			ID		= 0;
			perfrab		= 0;
			level		= 1;
			enchant		= 0;
			element		= 0;
			gem		= 0;
			count		= 1;
		}

		public int		UUID = 0;				//uuid
		public int		ID = 0;				//
		public int		perfrab = 0;				//
		public uint		level = 0;				//
		public int		enchant = 0;				//Enchant
		public int		element = 0;				//Element
		public int		gem = 0;				//Gem
		public uint		count = 0;				//
		public sbyte		currencyType = 0;				//currency Type (karma :1 ,fk:2 )

		public static void Write(Packet os, SBuyitemInfo v)
		{
			os.WriteInt(v.UUID);
			os.WriteInt(v.ID);
			os.WriteInt(v.perfrab);
			os.WriteUint(v.level);
			os.WriteInt(v.enchant);
			os.WriteInt(v.element);
			os.WriteInt(v.gem);
			os.WriteUint(v.count);
			os.WriteInt8(v.currencyType);
		}

		public static void Read(Packet ins, out SBuyitemInfo v)
		{
			v = new SBuyitemInfo();
			v.UUID = ins.ReadInt();
			v.ID = ins.ReadInt();
			v.perfrab = ins.ReadInt();
			v.level = ins.ReadUint();
			v.enchant = ins.ReadInt();
			v.element = ins.ReadInt();
			v.gem = ins.ReadInt();
			v.count = ins.ReadUint();
			v.currencyType = ins.ReadInt8();
		}
	}

	//
	public class vectorBuyitemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorBuyitemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SBuyitemInfo m in v)
			{
				SBuyitemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorBuyitemInfos v)
		{
			v = new vectorBuyitemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SBuyitemInfo m;
				SBuyitemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SFriendHireReward
	{
		public SFriendHireReward()
		{
			charID		= 0;
			charName		= "0";
			exp		= 0;
			sk		= 0;
			style		= 1;
			sex		= 0;
		}

		public int		charID = 0;				//friend char ID
		public string		charName = "";				//friend name
		public int		exp = 0;				//exp
		public int		sk = 0;				//sk
		public int		style = 0;				//style
		public int		sex = 0;				//sex

		public static void Write(Packet os, SFriendHireReward v)
		{
			os.WriteInt(v.charID);
			os.WriteString(v.charName);
			os.WriteInt(v.exp);
			os.WriteInt(v.sk);
			os.WriteInt(v.style);
			os.WriteInt(v.sex);
		}

		public static void Read(Packet ins, out SFriendHireReward v)
		{
			v = new SFriendHireReward();
			v.charID = ins.ReadInt();
			v.charName = ins.ReadString();
			v.exp = ins.ReadInt();
			v.sk = ins.ReadInt();
			v.style = ins.ReadInt();
			v.sex = ins.ReadInt();
		}
	}

	//
	public class vectorFriendHireReward : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorFriendHireReward v)
		{
			os.WriteInt(v.Count);
			foreach (SFriendHireReward m in v)
			{
				SFriendHireReward.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorFriendHireReward v)
		{
			v = new vectorFriendHireReward();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SFriendHireReward m;
				SFriendHireReward.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class mapFriendHireReward : Dictionary<int, SFriendHireReward>
	{
		public static void Write(Packet os, mapFriendHireReward v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, SFriendHireReward> m in v)
			{
				os.WriteInt(m.Key);
				SFriendHireReward.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapFriendHireReward v)
		{
			v = new mapFriendHireReward();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				SFriendHireReward tempValue;
				SFriendHireReward.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class SItemAttributeInfo
	{
		public SItemAttributeInfo()
		{
			attrID		= 0;
			attrVal		= 0;
		}

		public byte		attrID = 0;				//
		public ushort		attrVal = 0;				//

		public static void Write(Packet os, SItemAttributeInfo v)
		{
			os.WriteByte(v.attrID);
			os.WriteUshort(v.attrVal);
		}

		public static void Read(Packet ins, out SItemAttributeInfo v)
		{
			v = new SItemAttributeInfo();
			v.attrID = ins.ReadByte();
			v.attrVal = ins.ReadUshort();
		}
	}

	//
	public class vectorSItemAttributeInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSItemAttributeInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SItemAttributeInfo m in v)
			{
				SItemAttributeInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSItemAttributeInfos v)
		{
			v = new vectorSItemAttributeInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SItemAttributeInfo m;
				SItemAttributeInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//SItemShowInfo
	public class SItemShowInfo
	{
		public SItemShowInfo()
		{
			ID		= 0;
			flag		= 0;
			level		= 1;
		}

		public int		ID = 0;				//
		public ushort		flag = 0;				//
		public byte		level = 0;				//
		public vectorSItemAttributeInfos		property;				//
		public vectorSItemAttributeInfos		specialproperty;				//

		public static void Write(Packet os, SItemShowInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteUshort(v.flag);
			os.WriteByte(v.level);
			vectorSItemAttributeInfos.Write(os, v.property);
			vectorSItemAttributeInfos.Write(os, v.specialproperty);
		}

		public static void Read(Packet ins, out SItemShowInfo v)
		{
			v = new SItemShowInfo();
			v.ID = ins.ReadInt();
			v.flag = ins.ReadUshort();
			v.level = ins.ReadByte();
			vectorSItemAttributeInfos.Read(ins, out v.property);
			vectorSItemAttributeInfos.Read(ins, out v.specialproperty);
		}
	}

	//craft type
	public class ECraftType
	{
		public const int eCraftType_Invalid	= 0;		//invalid
		public const int eCraftType_WeaponElement	= 1;		//weapon element
		public const int eCraftType_WeaponEnchant	= 2;		//weapon element
		public const int eCraftType_ArmorElement	= 3;		//weapon element
		public const int eCraftType_ArmorEnchant	= 4;		//weapon element
		public const int eCraftType_AccessoryElement	= 5;		//weapon element
		public const int eCraftType_AccessoryEnchant	= 6;		//weapon element
		public const int eCraftType_Gem	= 7;		//gem
		public const int eCraftType_Level	= 8;		//level
		public const int eCraftType_Max	= 9;		//max
		public ECraftType()
		{
			_value = 0;
		}

		public ECraftType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ECraftType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ECraftType v)
		{
			v = new ECraftType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eCraftType_Invalid" ;
			case 1:
				return   "eCraftType_WeaponElement" ;
			case 2:
				return   "eCraftType_WeaponEnchant" ;
			case 3:
				return   "eCraftType_ArmorElement" ;
			case 4:
				return   "eCraftType_ArmorEnchant" ;
			case 5:
				return   "eCraftType_AccessoryElement" ;
			case 6:
				return   "eCraftType_AccessoryEnchant" ;
			case 7:
				return   "eCraftType_Gem" ;
			case 8:
				return   "eCraftType_Level" ;
			case 9:
				return   "eCraftType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//Crafting Material info
	public class SItemSlot
	{
		public SItemSlot()
		{
		}

		public uint		slot = 0;				//slot id
		public uint		count = 0;				//count

		public static void Write(Packet os, SItemSlot v)
		{
			os.WriteUint(v.slot);
			os.WriteUint(v.count);
		}

		public static void Read(Packet ins, out SItemSlot v)
		{
			v = new SItemSlot();
			v.slot = ins.ReadUint();
			v.count = ins.ReadUint();
		}
	}

	//item slot list
	public class vectorItemSlot : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorItemSlot v)
		{
			os.WriteInt(v.Count);
			foreach (SItemSlot m in v)
			{
				SItemSlot.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorItemSlot v)
		{
			v = new vectorItemSlot();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SItemSlot m;
				SItemSlot.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//craft material map
	public class mapCraftMaterial : Dictionary<int, vectorItemSlot>
	{
		public static void Write(Packet os, mapCraftMaterial v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, vectorItemSlot> m in v)
			{
				os.WriteInt(m.Key);
				vectorItemSlot.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapCraftMaterial v)
		{
			v = new mapCraftMaterial();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				vectorItemSlot tempValue;
				vectorItemSlot.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class ESex
	{
		public const int eSex_Male	= 0;		//
		public const int eSex_Female	= 1;		//
		public const int eSex_Max	= 2;		//max
		public ESex()
		{
			_value = 0;
		}

		public ESex(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ESex v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ESex v)
		{
			v = new ESex();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eSex_Male" ;
			case 1:
				return   "eSex_Female" ;
			case 2:
				return   "eSex_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//ELeaderboardType
	public class ELeaderboardType
	{
		public const int eLeaderboardType_MissionNum	= 0;		//mission num
		public ELeaderboardType()
		{
			_value = 0;
		}

		public ELeaderboardType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ELeaderboardType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ELeaderboardType v)
		{
			v = new ELeaderboardType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eLeaderboardType_MissionNum" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class SLeaderboardInfo
	{
		public SLeaderboardInfo()
		{
			ID		= 0;
			no		= 0;
			level		= 1;
			value		= 1;
		}

		public int		ID = 0;				//
		public string		nickname = "";				//
		public int		no = 0;				//no
		public int		level = 0;				//level
		public int		value = 0;				//value

		public static void Write(Packet os, SLeaderboardInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.nickname);
			os.WriteInt(v.no);
			os.WriteInt(v.level);
			os.WriteInt(v.value);
		}

		public static void Read(Packet ins, out SLeaderboardInfo v)
		{
			v = new SLeaderboardInfo();
			v.ID = ins.ReadInt();
			v.nickname = ins.ReadString();
			v.no = ins.ReadInt();
			v.level = ins.ReadInt();
			v.value = ins.ReadInt();
		}
	}

	//
	public class vectorLeaderboardInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorLeaderboardInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SLeaderboardInfo m in v)
			{
				SLeaderboardInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorLeaderboardInfos v)
		{
			v = new vectorLeaderboardInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SLeaderboardInfo m;
				SLeaderboardInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//SLeaderboardTable
	public class SLeaderboardTable
	{
		public SLeaderboardTable()
		{
			lastupdatetime		= 0;
		}

		public long		lastupdatetime = 0;				//
		public vectorLeaderboardInfos		leaderboardInfos;				//leaderboardInfos

		public static void Write(Packet os, SLeaderboardTable v)
		{
			os.WriteLong(v.lastupdatetime);
			vectorLeaderboardInfos.Write(os, v.leaderboardInfos);
		}

		public static void Read(Packet ins, out SLeaderboardTable v)
		{
			v = new SLeaderboardTable();
			v.lastupdatetime = ins.ReadLong();
			vectorLeaderboardInfos.Read(ins, out v.leaderboardInfos);
		}
	}

	//well data
	public class SWellData
	{
		public SWellData()
		{
			speedLevel		= 1;
			timeLevel		= 1;
			lidLevel		= 1;
			beginTime		= 0;
		}

		public int		speedLevel = 0;				//speed level
		public int		timeLevel = 0;				//time level
		public int		lidLevel = 0;				//lid level
		public long		beginTime = 0;				//begin time

		public static void Write(Packet os, SWellData v)
		{
			os.WriteInt(v.speedLevel);
			os.WriteInt(v.timeLevel);
			os.WriteInt(v.lidLevel);
			os.WriteLong(v.beginTime);
		}

		public static void Read(Packet ins, out SWellData v)
		{
			v = new SWellData();
			v.speedLevel = ins.ReadInt();
			v.timeLevel = ins.ReadInt();
			v.lidLevel = ins.ReadInt();
			v.beginTime = ins.ReadLong();
		}
	}

	//well type
	public class EWellType
	{
		public const int eWellType_Invalid	= 0;		//invalid
		public const int eWellType_Speed	= 1;		//speed
		public const int eWellType_Time	= 2;		//time
		public const int eWellType_Lid	= 3;		//lid
		public const int eWellType_Max	= 4;		//max
		public EWellType()
		{
			_value = 0;
		}

		public EWellType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EWellType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EWellType v)
		{
			v = new EWellType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eWellType_Invalid" ;
			case 1:
				return   "eWellType_Speed" ;
			case 2:
				return   "eWellType_Time" ;
			case 3:
				return   "eWellType_Lid" ;
			case 4:
				return   "eWellType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//cooldown type
	public class EDecreaseCooldownType
	{
		public const int eDecreaseCooldownType_Invalid	= -1;		//
		public const int eDecreaseCooldownType_All	= 0;		//All
		public const int eDecreaseCooldownType_30	= 1;		//30
		public const int eDecreaseCooldownType_60	= 2;		//60
		public const int eDecreaseCooldownType_Max	= 3;		//max
		public EDecreaseCooldownType()
		{
			_value = -1;
		}

		public EDecreaseCooldownType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EDecreaseCooldownType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EDecreaseCooldownType v)
		{
			v = new EDecreaseCooldownType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case -1:
				return   "eDecreaseCooldownType_Invalid" ;
			case 0:
				return   "eDecreaseCooldownType_All" ;
			case 1:
				return   "eDecreaseCooldownType_30" ;
			case 2:
				return   "eDecreaseCooldownType_60" ;
			case 3:
				return   "eDecreaseCooldownType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//cooldown type
	public class ECooldownType
	{
		public const int eCooldownType_Invalid	= -1;		//
		public const int eCooldownType_Skill	= 0;		//skill
		public const int eCooldownType_Mastery	= 1;		//mastery
		public const int eCooldownType_Max	= 2;		//max
		public ECooldownType()
		{
			_value = -1;
		}

		public ECooldownType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ECooldownType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ECooldownType v)
		{
			v = new ECooldownType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case -1:
				return   "eCooldownType_Invalid" ;
			case 0:
				return   "eCooldownType_Skill" ;
			case 1:
				return   "eCooldownType_Mastery" ;
			case 2:
				return   "eCooldownType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//SCooldownInfo
	public class SCooldownInfo
	{
		public SCooldownInfo()
		{
			id		= 0;
		}

		public ECooldownType		cooldownType;				//cooldown type
		public int		id = 0;				//id
		public long		targetTime = 0;				//time

		public static void Write(Packet os, SCooldownInfo v)
		{
			ECooldownType.Write(os, v.cooldownType);
			os.WriteInt(v.id);
			os.WriteLong(v.targetTime);
		}

		public static void Read(Packet ins, out SCooldownInfo v)
		{
			v = new SCooldownInfo();
			ECooldownType.Read(ins, out v.cooldownType);
			v.id = ins.ReadInt();
			v.targetTime = ins.ReadLong();
		}
	}

	//cooldownInfo
	public class mapCooldownInfo : Dictionary<int, SCooldownInfo>
	{
		public static void Write(Packet os, mapCooldownInfo v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, SCooldownInfo> m in v)
			{
				os.WriteInt(m.Key);
				SCooldownInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapCooldownInfo v)
		{
			v = new mapCooldownInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				SCooldownInfo tempValue;
				SCooldownInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class mapTypeCooldown : Dictionary<int, mapCooldownInfo>
	{
		public static void Write(Packet os, mapTypeCooldown v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, mapCooldownInfo> m in v)
			{
				os.WriteInt(m.Key);
				mapCooldownInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapTypeCooldown v)
		{
			v = new mapTypeCooldown();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				mapCooldownInfo tempValue;
				mapCooldownInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class EGmServerErrorType
	{
		public const int eGmSuccess	= 0;		//
		public const int eGmUnknownError	= 1;		//
		public const int eGmWrongAccountOrPwd	= 2;		//
		public const int eGmUserAlreadyOnline	= 3;		//
		public const int eGmUserIsOffline	= 4;		//
		public const int eGmAccountFreezed	= 5;		//
		public EGmServerErrorType()
		{
			_value = 0;
		}

		public EGmServerErrorType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EGmServerErrorType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EGmServerErrorType v)
		{
			v = new EGmServerErrorType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eGmSuccess" ;
			case 1:
				return   "eGmUnknownError" ;
			case 2:
				return   "eGmWrongAccountOrPwd" ;
			case 3:
				return   "eGmUserAlreadyOnline" ;
			case 4:
				return   "eGmUserIsOffline" ;
			case 5:
				return   "eGmAccountFreezed" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EServerErrorType
	{
		public const int eSuccess	= 0;		//
		public const int eUnknownError	= 1;		//
		public const int eWrongAccountOrPwd	= 2;		//
		public const int eUserAlreadyOnline	= 3;		//
		public const int eAccountFreezed	= 4;		//
		public const int eLoginProgress	= 5;		//
		public const int eInvalidTicket	= 6;		//
		public const int eSystemError	= 7;		//
		public const int eWebLoginTimeOut	= 8;		//Web
		public const int eGS_NoError	= 9;		//
		public const int eGS_InvalidPlayer	= 10;		//
		public const int eGS_NoCharacter	= 11;		//
		public const int eGS_AlreadyInSameGame	= 12;		//
		public const int eGS_NoSuchGameServer	= 13;		//
		public const int eGS_GameServerFull	= 14;		//
		public const int eGS_NotInGameServer	= 15;		//
		public const int eGS_AlreadyInSameChannel	= 16;		//
		public const int eGS_AlreadyInChannel	= 17;		//
		public const int eGS_NoSuchChannel	= 18;		//
		public const int eGS_ChannelFull	= 19;		//
		public const int eGS_AlreadyInSameRoom	= 20;		//
		public const int eGS_NoSuchRoom	= 21;		//
		public const int eGS_RoomFull	= 22;		//
		public const int eGS_RoomStarted	= 23;		//
		public const int eGS_RoomNameError	= 24;		//
		public const int eGS_SeatPlayerExist	= 25;		//
		public const int eGS_SeatIdxInvalid	= 26;		//
		public const int eGS_NotRoomMaster	= 27;		//
		public const int eGS_UserStateError	= 28;		//
		public const int eGS_UserNotInChannel	= 29;		//
		public const int eGS_UserNotInRoom	= 30;		//
		public const int eGS_UserOffLine	= 31;		//
		public const int eGS_P2P_NoMasterServer	= 32;		//MasterServer
		public const int eGS_P2P_NoHost	= 33;		//MasterServer
		public const int eGS_P2P_HostFull	= 34;		//Host
		public const int eGS_P2P_TimeOut	= 35;		//
		public const int eGS_ChatTypeError	= 36;		//
		public const int eGS_ChatInTime	= 37;		//
		public const int eGS_ChatNoItem	= 38;		//
		public const int eGS_ChatShutup	= 39;		//
		public const int eGS_ChatCmdError	= 40;		//cmd error
		public const int eGS_NotSystemManager	= 41;		//not system manager
		public const int eGS_SkillSing	= 42;		//
		public const int eGS_SkillBeginSing	= 43;		//
		public const int eGS_SkillColding	= 44;		//
		public const int eGS_SkillExist	= 45;		//
		public const int eGS_SkillIDInvalid	= 46;		//
		public const int eGS_SkillParamError	= 47;		//
		public const int eGS_StatusIDInvalid	= 48;		//Status ID
		public const int eGS_EffectIDInvalid	= 49;		//Effect ID
		public const int eGS_MpInadequate	= 50;		//
		public const int eGS_LessMoney_karma	= 51;		//karma
		public const int eGS_LessMoney_fk	= 52;		//fk
		public const int eGS_LessReviveItem	= 53;		//
		public const int eGS_LessLevel	= 54;		//
		public const int eGS_LessDiscipline	= 55;		//
		public const int eGS_SkillNotExist	= 56;		//
		public const int eGS_PlayerDead	= 57;		//
		public const int eGS_PlayerAlive	= 58;		//
		public const int eCreateCharacter_InvalidPlayer	= 59;		//
		public const int eCreateCharacter_AlreadyNickName	= 60;		//
		public const int eCreateCharacter_ParamError	= 61;		//
		public const int eCreateCharacter_CharacterFull	= 62;		//
		public const int eCreateCharacter_InGame	= 63;		//
		public const int eSelectCharacter_InvalidPlayer	= 64;		//
		public const int eSelectCharacter_NoCharacter	= 65;		//
		public const int eSelectCharacter_InGame	= 66;		//
		public const int eDelCharacter_InvalidPlayer	= 67;		//
		public const int eDelCharacter_NoCharacter	= 68;		//
		public const int eDelCharacter_StateErorr	= 69;		//
		public const int eFriendError_NoExist	= 70;		//
		public const int eFriendError_AddSelf	= 71;		//
		public const int eFriendError_Offline	= 72;		//
		public const int eFriendError_NotCanAddFriend	= 73;		//
		public const int eFriendError_AlreadyFriend	= 74;		//
		public const int eFriendError_FullFriend	= 75;		//
		public const int eFriendError_InBlackList	= 76;		//
		public const int eFriendError_AlreadyBlack	= 77;		//
		public const int eFriendError_InFriendList	= 78;		//
		public const int eFriendError_FullBlack	= 79;		//
		public const int eAlreadyHaveAlly	= 80;		//
		public const int eAccountFriendError_NoExist	= 81;		//
		public const int eAccountFriendError_AddSelf	= 82;		//
		public const int eAccountFriendError_Offline	= 83;		//
		public const int eAccountFriendError_RefuseAddFriend	= 84;		//
		public const int eAccountFriendError_AlreadyFriend	= 85;		//
		public const int eAccountFriendError_FullFriend	= 86;		//
		public const int eItemError_NoExist	= 87;		//
		public const int eItemError_BuyCantFindItem	= 88;		//
		public const int eItemError_BuyCountBeyondLimit	= 89;		//
		public const int eItemError_BuyNotEnoughMoneny	= 90;		//
		public const int eItemError_CantSellItem	= 91;		//
		public const int eItemError_rareItemSellOut	= 92;		//
		public const int eItemError_CantCarryMoreofThis	= 93;		//
		public const int eItemError_BagFull	= 94;		//
		public const int eItemError_Mismatching	= 95;		//
		public const int eItemError_CantSplitItem	= 96;		//
		public const int eItemError_SplitMoreThanCount	= 97;		//
		public const int eItemError_CantBeSwapped	= 98;		//
		public const int eItemError_CantBeEquiped	= 99;		//
		public const int eItemError_EquipmentSlotAvailable	= 100;		//
		public const int eItemError_CampLimit	= 101;		//
		public const int eItemError_InBattle	= 102;		//
		public const int eItemError_AlreadyAdded	= 103;		//
		public const int eItemError_AlreadyEquiped	= 104;		//
		public const int eItemError_CantBeUnEquiped	= 105;		//
		public const int eItemError_SellOut	= 106;		//
		public const int eItemError_TimeOut	= 107;		//
		public const int eItemError_PlayerLvlNotEnough	= 108;		//
		public const int eDayRewardError_AlreadyGet	= 109;		//
		public const int eMissionError_MissionHaveAccept	= 110;		//
		public const int eMission_Dont_Have_ReqLevel	= 111;		//
		public const int eMission_OverTime	= 112;		//
		public const int eMission_fail_exitScene	= 113;		//
		public const int eMission_fail_protect	= 114;		//
		public const int eMission_Not_exist	= 115;		//
		public const int eMission_PredecessorsNotCompleteOrNoteExist	= 116;		//
		public const int eMission_not_reset	= 117;		//
		public const int eMission_not_enough_badge	= 118;		//badge
		public const int eMission_have_buy_area	= 119;		//
		public const int eMission_In_cool_down	= 120;		//mission cool down
		public const int ePetError_Full	= 121;		//
		public const int ePetError_repeatPet	= 122;		//
		public const int eLeftTalentPoint_lack	= 123;		//
		public const int eItemCraftError_NoExist	= 124;		//No Exist
		public const int eItemCraftError_ParamError	= 125;		//param error
		public const int eItemCraftError_MaxLevel	= 126;		//Max Level
		public const int eItemCraftError_AttribMaxLevel	= 127;		//Max Attrib Level
		public const int eItemCraftError_NotEnoughMoneny	= 128;		//NotEnoughMoneny
		public const int eItemCraftError_GemError	= 129;		//Gem Error
		public const int eItemCraftError_CraftFailure	= 130;		//CraftFailure
		public const int eGift_NotExist	= 131;		//
		public const int eGift_HaveBeenUsed	= 132;		//
		public const int eMasteryError_fullLvl	= 133;		//mastery full level
		public const int eMasteryError_CoolDown	= 134;		//masteryCoolDownl
		public const int eGm_Account_has_block	= 135;		//gm has block
		public const int eWell_InvalidLevel	= 136;		//invalid level
		public const int eWell_InvalidWellType	= 137;		//invalid well type
		public const int eMailError_MailSendFull	= 138;		//
		public const int eMailError_MailRecvFull	= 139;		//
		public const int eMailError_MailPlayerNotExist	= 140;		//
		public const int eMailError_MailLessMoney	= 141;		//
		public const int eMailError_MailInBlackList	= 142;		//
		public const int eMailError_MailParamError	= 143;		//mail Param error
		public const int eMailError_MailStateError	= 144;		//mail state error
		public const int eMailError_MailItemSlotError	= 145;		//mail item slot error
		public const int eMailError_MailTooLong	= 146;		//mail title or content too long
		public const int eMailError_MailCannotToSelf	= 147;		//
		public const int eMailError_MailNotExist	= 148;		//MailNotExist
		public EServerErrorType()
		{
			_value = 0;
		}

		public EServerErrorType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EServerErrorType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EServerErrorType v)
		{
			v = new EServerErrorType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eSuccess" ;
			case 1:
				return   "eUnknownError" ;
			case 2:
				return   "eWrongAccountOrPwd" ;
			case 3:
				return   "eUserAlreadyOnline" ;
			case 4:
				return   "eAccountFreezed" ;
			case 5:
				return   "eLoginProgress" ;
			case 6:
				return   "eInvalidTicket" ;
			case 7:
				return   "eSystemError" ;
			case 8:
				return   "eWebLoginTimeOut" ;
			case 9:
				return   "eGS_NoError" ;
			case 10:
				return   "eGS_InvalidPlayer" ;
			case 11:
				return   "eGS_NoCharacter" ;
			case 12:
				return   "eGS_AlreadyInSameGame" ;
			case 13:
				return   "eGS_NoSuchGameServer" ;
			case 14:
				return   "eGS_GameServerFull" ;
			case 15:
				return   "eGS_NotInGameServer" ;
			case 16:
				return   "eGS_AlreadyInSameChannel" ;
			case 17:
				return   "eGS_AlreadyInChannel" ;
			case 18:
				return   "eGS_NoSuchChannel" ;
			case 19:
				return   "eGS_ChannelFull" ;
			case 20:
				return   "eGS_AlreadyInSameRoom" ;
			case 21:
				return   "eGS_NoSuchRoom" ;
			case 22:
				return   "eGS_RoomFull" ;
			case 23:
				return   "eGS_RoomStarted" ;
			case 24:
				return   "eGS_RoomNameError" ;
			case 25:
				return   "eGS_SeatPlayerExist" ;
			case 26:
				return   "eGS_SeatIdxInvalid" ;
			case 27:
				return   "eGS_NotRoomMaster" ;
			case 28:
				return   "eGS_UserStateError" ;
			case 29:
				return   "eGS_UserNotInChannel" ;
			case 30:
				return   "eGS_UserNotInRoom" ;
			case 31:
				return   "eGS_UserOffLine" ;
			case 32:
				return   "eGS_P2P_NoMasterServer" ;
			case 33:
				return   "eGS_P2P_NoHost" ;
			case 34:
				return   "eGS_P2P_HostFull" ;
			case 35:
				return   "eGS_P2P_TimeOut" ;
			case 36:
				return   "eGS_ChatTypeError" ;
			case 37:
				return   "eGS_ChatInTime" ;
			case 38:
				return   "eGS_ChatNoItem" ;
			case 39:
				return   "eGS_ChatShutup" ;
			case 40:
				return   "eGS_ChatCmdError" ;
			case 41:
				return   "eGS_NotSystemManager" ;
			case 42:
				return   "eGS_SkillSing" ;
			case 43:
				return   "eGS_SkillBeginSing" ;
			case 44:
				return   "eGS_SkillColding" ;
			case 45:
				return   "eGS_SkillExist" ;
			case 46:
				return   "eGS_SkillIDInvalid" ;
			case 47:
				return   "eGS_SkillParamError" ;
			case 48:
				return   "eGS_StatusIDInvalid" ;
			case 49:
				return   "eGS_EffectIDInvalid" ;
			case 50:
				return   "eGS_MpInadequate" ;
			case 51:
				return   "eGS_LessMoney_karma" ;
			case 52:
				return   "eGS_LessMoney_fk" ;
			case 53:
				return   "eGS_LessReviveItem" ;
			case 54:
				return   "eGS_LessLevel" ;
			case 55:
				return   "eGS_LessDiscipline" ;
			case 56:
				return   "eGS_SkillNotExist" ;
			case 57:
				return   "eGS_PlayerDead" ;
			case 58:
				return   "eGS_PlayerAlive" ;
			case 59:
				return   "eCreateCharacter_InvalidPlayer" ;
			case 60:
				return   "eCreateCharacter_AlreadyNickName" ;
			case 61:
				return   "eCreateCharacter_ParamError" ;
			case 62:
				return   "eCreateCharacter_CharacterFull" ;
			case 63:
				return   "eCreateCharacter_InGame" ;
			case 64:
				return   "eSelectCharacter_InvalidPlayer" ;
			case 65:
				return   "eSelectCharacter_NoCharacter" ;
			case 66:
				return   "eSelectCharacter_InGame" ;
			case 67:
				return   "eDelCharacter_InvalidPlayer" ;
			case 68:
				return   "eDelCharacter_NoCharacter" ;
			case 69:
				return   "eDelCharacter_StateErorr" ;
			case 70:
				return   "eFriendError_NoExist" ;
			case 71:
				return   "eFriendError_AddSelf" ;
			case 72:
				return   "eFriendError_Offline" ;
			case 73:
				return   "eFriendError_NotCanAddFriend" ;
			case 74:
				return   "eFriendError_AlreadyFriend" ;
			case 75:
				return   "eFriendError_FullFriend" ;
			case 76:
				return   "eFriendError_InBlackList" ;
			case 77:
				return   "eFriendError_AlreadyBlack" ;
			case 78:
				return   "eFriendError_InFriendList" ;
			case 79:
				return   "eFriendError_FullBlack" ;
			case 80:
				return   "eAlreadyHaveAlly" ;
			case 81:
				return   "eAccountFriendError_NoExist" ;
			case 82:
				return   "eAccountFriendError_AddSelf" ;
			case 83:
				return   "eAccountFriendError_Offline" ;
			case 84:
				return   "eAccountFriendError_RefuseAddFriend" ;
			case 85:
				return   "eAccountFriendError_AlreadyFriend" ;
			case 86:
				return   "eAccountFriendError_FullFriend" ;
			case 87:
				return   "eItemError_NoExist" ;
			case 88:
				return   "eItemError_BuyCantFindItem" ;
			case 89:
				return   "eItemError_BuyCountBeyondLimit" ;
			case 90:
				return   "eItemError_BuyNotEnoughMoneny" ;
			case 91:
				return   "eItemError_CantSellItem" ;
			case 92:
				return   "eItemError_rareItemSellOut" ;
			case 93:
				return   "eItemError_CantCarryMoreofThis" ;
			case 94:
				return   "eItemError_BagFull" ;
			case 95:
				return   "eItemError_Mismatching" ;
			case 96:
				return   "eItemError_CantSplitItem" ;
			case 97:
				return   "eItemError_SplitMoreThanCount" ;
			case 98:
				return   "eItemError_CantBeSwapped" ;
			case 99:
				return   "eItemError_CantBeEquiped" ;
			case 100:
				return   "eItemError_EquipmentSlotAvailable" ;
			case 101:
				return   "eItemError_CampLimit" ;
			case 102:
				return   "eItemError_InBattle" ;
			case 103:
				return   "eItemError_AlreadyAdded" ;
			case 104:
				return   "eItemError_AlreadyEquiped" ;
			case 105:
				return   "eItemError_CantBeUnEquiped" ;
			case 106:
				return   "eItemError_SellOut" ;
			case 107:
				return   "eItemError_TimeOut" ;
			case 108:
				return   "eItemError_PlayerLvlNotEnough" ;
			case 109:
				return   "eDayRewardError_AlreadyGet" ;
			case 110:
				return   "eMissionError_MissionHaveAccept" ;
			case 111:
				return   "eMission_Dont_Have_ReqLevel" ;
			case 112:
				return   "eMission_OverTime" ;
			case 113:
				return   "eMission_fail_exitScene" ;
			case 114:
				return   "eMission_fail_protect" ;
			case 115:
				return   "eMission_Not_exist" ;
			case 116:
				return   "eMission_PredecessorsNotCompleteOrNoteExist" ;
			case 117:
				return   "eMission_not_reset" ;
			case 118:
				return   "eMission_not_enough_badge" ;
			case 119:
				return   "eMission_have_buy_area" ;
			case 120:
				return   "eMission_In_cool_down" ;
			case 121:
				return   "ePetError_Full" ;
			case 122:
				return   "ePetError_repeatPet" ;
			case 123:
				return   "eLeftTalentPoint_lack" ;
			case 124:
				return   "eItemCraftError_NoExist" ;
			case 125:
				return   "eItemCraftError_ParamError" ;
			case 126:
				return   "eItemCraftError_MaxLevel" ;
			case 127:
				return   "eItemCraftError_AttribMaxLevel" ;
			case 128:
				return   "eItemCraftError_NotEnoughMoneny" ;
			case 129:
				return   "eItemCraftError_GemError" ;
			case 130:
				return   "eItemCraftError_CraftFailure" ;
			case 131:
				return   "eGift_NotExist" ;
			case 132:
				return   "eGift_HaveBeenUsed" ;
			case 133:
				return   "eMasteryError_fullLvl" ;
			case 134:
				return   "eMasteryError_CoolDown" ;
			case 135:
				return   "eGm_Account_has_block" ;
			case 136:
				return   "eWell_InvalidLevel" ;
			case 137:
				return   "eWell_InvalidWellType" ;
			case 138:
				return   "eMailError_MailSendFull" ;
			case 139:
				return   "eMailError_MailRecvFull" ;
			case 140:
				return   "eMailError_MailPlayerNotExist" ;
			case 141:
				return   "eMailError_MailLessMoney" ;
			case 142:
				return   "eMailError_MailInBlackList" ;
			case 143:
				return   "eMailError_MailParamError" ;
			case 144:
				return   "eMailError_MailStateError" ;
			case 145:
				return   "eMailError_MailItemSlotError" ;
			case 146:
				return   "eMailError_MailTooLong" ;
			case 147:
				return   "eMailError_MailCannotToSelf" ;
			case 148:
				return   "eMailError_MailNotExist" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EEquipmentPart
	{
		public const int EEquipNull	= 0;		//Null
		public const int EEquipHead	= 1;		//Head
		public const int EEquipNeck	= 2;		//Neck
		public const int EEquipChest	= 3;		//chest
		public const int EEquipCloak	= 4;		//Cloak
		public const int EEquipRing	= 5;		//Ring
		public const int EEquipLeg	= 6;		//legs
		public const int EEquipWeapon	= 7;		//Weapon
		public const int EEquipEnd	= 8;		//End
		public EEquipmentPart()
		{
			_value = 0;
		}

		public EEquipmentPart(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EEquipmentPart v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EEquipmentPart v)
		{
			v = new EEquipmentPart();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "EEquipNull" ;
			case 1:
				return   "EEquipHead" ;
			case 2:
				return   "EEquipNeck" ;
			case 3:
				return   "EEquipChest" ;
			case 4:
				return   "EEquipCloak" ;
			case 5:
				return   "EEquipRing" ;
			case 6:
				return   "EEquipLeg" ;
			case 7:
				return   "EEquipWeapon" ;
			case 8:
				return   "EEquipEnd" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EWeaponType
	{
		public const int mainWeapon	= 0;		//
		public const int viceWeapon	= 1;		//
		public EWeaponType()
		{
			_value = 0;
		}

		public EWeaponType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EWeaponType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EWeaponType v)
		{
			v = new EWeaponType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "mainWeapon" ;
			case 1:
				return   "viceWeapon" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EItemSecondType
	{
		public const int eSecondType_lightArmor	= 1;		//
		public const int eSecondType_mediumArmor	= 2;		//
		public const int eSecondType_heavyArmor	= 3;		//
		public EItemSecondType()
		{
			_value = 0;
		}

		public EItemSecondType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EItemSecondType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EItemSecondType v)
		{
			v = new EItemSecondType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 1:
				return   "eSecondType_lightArmor" ;
			case 2:
				return   "eSecondType_mediumArmor" ;
			case 3:
				return   "eSecondType_heavyArmor" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EPetCatolog
	{
		public const int eDog	= 0;		//
		public const int eCat	= 1;		//
		public const int eBird	= 2;		//
		public const int eFish	= 3;		//
		public const int eMonkey	= 4;		//
		public const int eTurtle	= 5;		//turtle
		public const int eOni	= 6;		//Oni
		public const int eCount	= 7;		//
		public EPetCatolog()
		{
			_value = 0;
		}

		public EPetCatolog(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EPetCatolog v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EPetCatolog v)
		{
			v = new EPetCatolog();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eDog" ;
			case 1:
				return   "eCat" ;
			case 2:
				return   "eBird" ;
			case 3:
				return   "eFish" ;
			case 4:
				return   "eMonkey" ;
			case 5:
				return   "eTurtle" ;
			case 6:
				return   "eOni" ;
			case 7:
				return   "eCount" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class ETalent
	{
		public const int eTalentBegin	= 0;		//begin
		public const int eProwess	= 1;		//prow
		public const int eFortitude	= 2;		//fortitude
		public const int eCunning	= 4;		//cunning
		public const int eTalentEnd	= 5;		//end
		public ETalent()
		{
			_value = 0;
		}

		public ETalent(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ETalent v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ETalent v)
		{
			v = new ETalent();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eTalentBegin" ;
			case 1:
				return   "eProwess" ;
			case 2:
				return   "eFortitude" ;
			case 4:
				return   "eCunning" ;
			case 5:
				return   "eTalentEnd" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class buypetTime
	{
		public const int Prop_begin_money	= 0;		//begin
		public const int Prop_kshalfH_money	= 1;		//half hour
		public const int Prop_fkhalfH_RealMoney	= 2;		//half hour
		public const int Prop_ksOneH_money	= 3;		//1 h
		public const int Prop_fkOneH_RealMoney	= 4;		//1 h
		public const int Prop_ks2h_money	= 5;		//2 h
		public const int Prop_fk2h_RealMoney	= 6;		//2 h
		public const int Prop_ks1D_money	= 7;		//1D
		public const int Prop_fk1D_RealMoney	= 8;		//1D
		public const int Prop_ks2D_money	= 9;		//2 day
		public const int Prop_fk2D_RealMoney	= 10;		//2 day
		public const int Prop_ks7D_money	= 11;		//7 day
		public const int Prop_fk7D_RealMoney	= 12;		//7 day
		public const int Prop_ks30D_money	= 13;		//30 day
		public const int Prop_fk30D_RealMoney	= 14;		//30 day
		public const int Prop_end_money	= 15;		//end
		public buypetTime()
		{
			_value = 0;
		}

		public buypetTime(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, buypetTime v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out buypetTime v)
		{
			v = new buypetTime();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "Prop_begin_money" ;
			case 1:
				return   "Prop_kshalfH_money" ;
			case 2:
				return   "Prop_fkhalfH_RealMoney" ;
			case 3:
				return   "Prop_ksOneH_money" ;
			case 4:
				return   "Prop_fkOneH_RealMoney" ;
			case 5:
				return   "Prop_ks2h_money" ;
			case 6:
				return   "Prop_fk2h_RealMoney" ;
			case 7:
				return   "Prop_ks1D_money" ;
			case 8:
				return   "Prop_fk1D_RealMoney" ;
			case 9:
				return   "Prop_ks2D_money" ;
			case 10:
				return   "Prop_fk2D_RealMoney" ;
			case 11:
				return   "Prop_ks7D_money" ;
			case 12:
				return   "Prop_fk7D_RealMoney" ;
			case 13:
				return   "Prop_ks30D_money" ;
			case 14:
				return   "Prop_fk30D_RealMoney" ;
			case 15:
				return   "Prop_end_money" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EDropType
	{
		public const int EnemyDrop	= 0;		//
		public const int ContainerDrop	= 1;		//
		public const int shopBusiness	= 2;		//
		public EDropType()
		{
			_value = 0;
		}

		public EDropType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EDropType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EDropType v)
		{
			v = new EDropType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "EnemyDrop" ;
			case 1:
				return   "ContainerDrop" ;
			case 2:
				return   "shopBusiness" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EMoneyType
	{
		public const int eMoneyType_Invalid	= 0;		//
		public const int eMoneyType_SK	= 1;		//karma
		public const int eMoneyType_FK	= 2;		//FK
		public const int eMoneyType_Max	= 3;		//
		public EMoneyType()
		{
			_value = 0;
		}

		public EMoneyType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EMoneyType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EMoneyType v)
		{
			v = new EMoneyType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eMoneyType_Invalid" ;
			case 1:
				return   "eMoneyType_SK" ;
			case 2:
				return   "eMoneyType_FK" ;
			case 3:
				return   "eMoneyType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//GEM
	public class EGemEffectType
	{
		public const int eEffectBegin	= 0;		//
		public const int eEffectTalent	= 1;		//
		public const int eEffectMoney	= 2;		//
		public const int eEffectExp	= 3;		//
		public const int eEffectEnd	= 4;		//
		public EGemEffectType()
		{
			_value = 0;
		}

		public EGemEffectType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EGemEffectType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EGemEffectType v)
		{
			v = new EGemEffectType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eEffectBegin" ;
			case 1:
				return   "eEffectTalent" ;
			case 2:
				return   "eEffectMoney" ;
			case 3:
				return   "eEffectExp" ;
			case 4:
				return   "eEffectEnd" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EMasteryType
	{
		public const int eDefault	= 0;		//default
		public const int e1HWeaponType	= 1;		//
		public const int eDualWeaponType	= 2;		//Dual
		public const int e2HWeaponType	= 4;		//
		public const int eLightArmorType	= 8;		//
		public const int eMediumArmorType	= 16;		//
		public const int eHeavyArmorType	= 32;		//
		public EMasteryType()
		{
			_value = 0;
		}

		public EMasteryType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EMasteryType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EMasteryType v)
		{
			v = new EMasteryType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eDefault" ;
			case 1:
				return   "e1HWeaponType" ;
			case 2:
				return   "eDualWeaponType" ;
			case 4:
				return   "e2HWeaponType" ;
			case 8:
				return   "eLightArmorType" ;
			case 16:
				return   "eMediumArmorType" ;
			case 32:
				return   "eHeavyArmorType" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//mastery level info
	public class SMasteryLevelInfo
	{
		public SMasteryLevelInfo()
		{
		}

		public EMasteryType		masteryType;				//type
		public int		level = 0;				//level

		public static void Write(Packet os, SMasteryLevelInfo v)
		{
			EMasteryType.Write(os, v.masteryType);
			os.WriteInt(v.level);
		}

		public static void Read(Packet ins, out SMasteryLevelInfo v)
		{
			v = new SMasteryLevelInfo();
			EMasteryType.Read(ins, out v.masteryType);
			v.level = ins.ReadInt();
		}
	}

	//
	public class vectorMasteryLevelInfo : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorMasteryLevelInfo v)
		{
			os.WriteInt(v.Count);
			foreach (SMasteryLevelInfo m in v)
			{
				SMasteryLevelInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorMasteryLevelInfo v)
		{
			v = new vectorMasteryLevelInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SMasteryLevelInfo m;
				SMasteryLevelInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SAccountInfo
	{
		public SAccountInfo()
		{
			account		= "account";
			password		= "123456";
			nickName		= "nickName";
			id		= 0;
			gender		= 0;
			type		= 0;
			points		= 0;
			status		= 0;
			lastCharID		= 0;
			FK		= 0;
			SK		= 0;
			level		= 0;
			curCharSlotNum		= 1;
			reviveNum		= 0;
			isGetRevivalCard		= 0;
		}

		public string		account = "";				//
		public string		password = "";				//password
		public string		nickName = "";				//
		public int		id = 0;				//
		public int		gender = 0;				//0:
		public int		type = 0;				//0
		public EUserType		userType;				//user type
		public int		points = 0;				//
		public string		createTime = "";				//
		public int		status = 0;				//0:
		public NatureTime		statusChangeTime;				//
		public NatureTime		totalOnlineTime;				//
		public NatureTime		todayOnlineTime;				//
		public string		lastLoginIP = "";				//
		public NatureTime		lastLoginTime;				//
		public string		currentIP = "";				//
		public int		lastCharID = 0;				//
		public int		friendVersion = 0;				//
		public int		FK = 0;				//
		public int		SK = 0;				//karma
		public int		level = 0;				//Level (Rank)
		public int		curCharSlotNum = 0;				//current char slot num
		public int		reviveNum = 0;				//left revive number
		public mapEvent		eventData;				//event data
		public SWellData		wellData;				//well data
		public int		isGetRevivalCard = 0;				//is get revival card

		public static void Write(Packet os, SAccountInfo v)
		{
			os.WriteString(v.account);
			os.WriteString(v.password);
			os.WriteString(v.nickName);
			os.WriteInt(v.id);
			os.WriteInt(v.gender);
			os.WriteInt(v.type);
			EUserType.Write(os, v.userType);
			os.WriteInt(v.points);
			os.WriteString(v.createTime);
			os.WriteInt(v.status);
			os.WriteNatureTime(v.statusChangeTime);
			os.WriteNatureTime(v.totalOnlineTime);
			os.WriteNatureTime(v.todayOnlineTime);
			os.WriteString(v.lastLoginIP);
			os.WriteNatureTime(v.lastLoginTime);
			os.WriteString(v.currentIP);
			os.WriteInt(v.lastCharID);
			os.WriteInt(v.friendVersion);
			os.WriteInt(v.FK);
			os.WriteInt(v.SK);
			os.WriteInt(v.level);
			os.WriteInt(v.curCharSlotNum);
			os.WriteInt(v.reviveNum);
			mapEvent.Write(os, v.eventData);
			SWellData.Write(os, v.wellData);
			os.WriteInt(v.isGetRevivalCard);
		}

		public static void Read(Packet ins, out SAccountInfo v)
		{
			v = new SAccountInfo();
			v.account = ins.ReadString();
			v.password = ins.ReadString();
			v.nickName = ins.ReadString();
			v.id = ins.ReadInt();
			v.gender = ins.ReadInt();
			v.type = ins.ReadInt();
			EUserType.Read(ins, out v.userType);
			v.points = ins.ReadInt();
			v.createTime = ins.ReadString();
			v.status = ins.ReadInt();
			v.statusChangeTime = ins.ReadNatureTime();
			v.totalOnlineTime = ins.ReadNatureTime();
			v.todayOnlineTime = ins.ReadNatureTime();
			v.lastLoginIP = ins.ReadString();
			v.lastLoginTime = ins.ReadNatureTime();
			v.currentIP = ins.ReadString();
			v.lastCharID = ins.ReadInt();
			v.friendVersion = ins.ReadInt();
			v.FK = ins.ReadInt();
			v.SK = ins.ReadInt();
			v.level = ins.ReadInt();
			v.curCharSlotNum = ins.ReadInt();
			v.reviveNum = ins.ReadInt();
			mapEvent.Read(ins, out v.eventData);
			SWellData.Read(ins, out v.wellData);
			v.isGetRevivalCard = ins.ReadInt();
		}
	}

	//
	public class SAccountInfo_gm
	{
		public SAccountInfo_gm()
		{
			account		= "account";
			password		= "123456";
			nickName		= "nickName";
			id		= 0;
			gender		= 0;
			type		= 0;
			points		= 0;
			status		= 0;
			lastCharID		= 0;
		}

		public string		account = "";				//
		public string		password = "";				//password
		public string		nickName = "";				//
		public int		id = 0;				//
		public int		gender = 0;				//0:
		public int		type = 0;				//0
		public int		points = 0;				//
		public string		createTime = "";				//
		public int		status = 0;				//0:
		public string		lastLoginIP = "";				//
		public string		currentIP = "";				//
		public int		lastCharID = 0;				//
		public int		friendVersion = 0;				//
		public int		FK = 0;				//
		public int		level = 0;				//Level (Rank)

		public static void Write(Packet os, SAccountInfo_gm v)
		{
			os.WriteString(v.account);
			os.WriteString(v.password);
			os.WriteString(v.nickName);
			os.WriteInt(v.id);
			os.WriteInt(v.gender);
			os.WriteInt(v.type);
			os.WriteInt(v.points);
			os.WriteString(v.createTime);
			os.WriteInt(v.status);
			os.WriteString(v.lastLoginIP);
			os.WriteString(v.currentIP);
			os.WriteInt(v.lastCharID);
			os.WriteInt(v.friendVersion);
			os.WriteInt(v.FK);
			os.WriteInt(v.level);
		}

		public static void Read(Packet ins, out SAccountInfo_gm v)
		{
			v = new SAccountInfo_gm();
			v.account = ins.ReadString();
			v.password = ins.ReadString();
			v.nickName = ins.ReadString();
			v.id = ins.ReadInt();
			v.gender = ins.ReadInt();
			v.type = ins.ReadInt();
			v.points = ins.ReadInt();
			v.createTime = ins.ReadString();
			v.status = ins.ReadInt();
			v.lastLoginIP = ins.ReadString();
			v.currentIP = ins.ReadString();
			v.lastCharID = ins.ReadInt();
			v.friendVersion = ins.ReadInt();
			v.FK = ins.ReadInt();
			v.level = ins.ReadInt();
		}
	}

	//
	public class SMoneyInfo
	{
		public SMoneyInfo()
		{
			Karma		= 0;
			FK		= 0;
		}

		public int		Karma = 0;				//karma
		public int		FK = 0;				//FK

		public static void Write(Packet os, SMoneyInfo v)
		{
			os.WriteInt(v.Karma);
			os.WriteInt(v.FK);
		}

		public static void Read(Packet ins, out SMoneyInfo v)
		{
			v = new SMoneyInfo();
			v.Karma = ins.ReadInt();
			v.FK = ins.ReadInt();
		}
	}

	//Object
	public class SServerPosition
	{
		public SServerPosition()
		{
			fx		= 0;
			fz		= 0;
		}

		public float		fx = 0;				//x
		public float		fz = 0;				//z

		public static void Write(Packet os, SServerPosition v)
		{
			os.WriteFloat(v.fx);
			os.WriteFloat(v.fz);
		}

		public static void Read(Packet ins, out SServerPosition v)
		{
			v = new SServerPosition();
			v.fx = ins.ReadFloat();
			v.fz = ins.ReadFloat();
		}
	}

	//
	public class vectorServerPosition : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorServerPosition v)
		{
			os.WriteInt(v.Count);
			foreach (SServerPosition m in v)
			{
				SServerPosition.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorServerPosition v)
		{
			v = new vectorServerPosition();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SServerPosition m;
				SServerPosition.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//mapMoney
	public class SServerMapMoney
	{
		public SServerMapMoney()
		{
			ID		= 0;
			Value		= 0;
		}

		public int		ID = 0;				//id
		public int		Value = 0;				//value

		public static void Write(Packet os, SServerMapMoney v)
		{
			os.WriteInt(v.ID);
			os.WriteInt(v.Value);
		}

		public static void Read(Packet ins, out SServerMapMoney v)
		{
			v = new SServerMapMoney();
			v.ID = ins.ReadInt();
			v.Value = ins.ReadInt();
		}
	}

	//mapMoney
	public class vectorServerMapMoney : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorServerMapMoney v)
		{
			os.WriteInt(v.Count);
			foreach (SServerMapMoney m in v)
			{
				SServerMapMoney.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorServerMapMoney v)
		{
			v = new vectorServerMapMoney();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SServerMapMoney m;
				SServerMapMoney.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SAccountCreationData
	{
		public SAccountCreationData()
		{
			account		= "account";
			nickName		= "nickName";
		}

		public string		account = "";				//
		public string		nickName = "";				//

		public static void Write(Packet os, SAccountCreationData v)
		{
			os.WriteString(v.account);
			os.WriteString(v.nickName);
		}

		public static void Read(Packet ins, out SAccountCreationData v)
		{
			v = new SAccountCreationData();
			v.account = ins.ReadString();
			v.nickName = ins.ReadString();
		}
	}

	//
	public class SCharacterCreationData
	{
		public SCharacterCreationData()
		{
		}

		public string		nickname = "";				//
		public int		style = 0;				//
		public mapIntInt		avatarTraits;				//
		public ESex		sex;				//Sex

		public static void Write(Packet os, SCharacterCreationData v)
		{
			os.WriteString(v.nickname);
			os.WriteInt(v.style);
			mapIntInt.Write(os, v.avatarTraits);
			ESex.Write(os, v.sex);
		}

		public static void Read(Packet ins, out SCharacterCreationData v)
		{
			v = new SCharacterCreationData();
			v.nickname = ins.ReadString();
			v.style = ins.ReadInt();
			mapIntInt.Read(ins, out v.avatarTraits);
			ESex.Read(ins, out v.sex);
		}
	}

	//
	public class SCharacterInfoBasic
	{
		public SCharacterInfoBasic()
		{
			ID		= 0;
			style		= 0;
			level		= 1;
			exp		= 0;
			Badges		= 0;
			BadgeTime		= 0;
			Armor		= 0;
			Harm		= 0;
			Critical		= 0;
			firstlogin		= true;
		}

		public int		ID = 0;				//
		public string		nickname = "";				//
		public int		style = 0;				//
		public int		level = 0;				//
		public ulong		exp = 0;				//
		public ESex		sex;				//
		public int		Badges = 0;				//
		public uint		BadgeTime = 0;				//
		public int		Armor = 0;				//
		public int		Harm = 0;				//
		public int		Critical = 0;				//
		public NatureTime		creationTime;				//
		public bool		firstlogin = false;				//
		public mapEvent		eventData;				//event data
		public mapTypeCooldown		cooldownData;				//cooldown data

		public static void Write(Packet os, SCharacterInfoBasic v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.nickname);
			os.WriteInt(v.style);
			os.WriteInt(v.level);
			os.WriteUint64(v.exp);
			ESex.Write(os, v.sex);
			os.WriteInt(v.Badges);
			os.WriteUint(v.BadgeTime);
			os.WriteInt(v.Armor);
			os.WriteInt(v.Harm);
			os.WriteInt(v.Critical);
			os.WriteNatureTime(v.creationTime);
			os.WriteBool(v.firstlogin);
			mapEvent.Write(os, v.eventData);
			mapTypeCooldown.Write(os, v.cooldownData);
		}

		public static void Read(Packet ins, out SCharacterInfoBasic v)
		{
			v = new SCharacterInfoBasic();
			v.ID = ins.ReadInt();
			v.nickname = ins.ReadString();
			v.style = ins.ReadInt();
			v.level = ins.ReadInt();
			v.exp = ins.ReadUint64();
			ESex.Read(ins, out v.sex);
			v.Badges = ins.ReadInt();
			v.BadgeTime = ins.ReadUint();
			v.Armor = ins.ReadInt();
			v.Harm = ins.ReadInt();
			v.Critical = ins.ReadInt();
			v.creationTime = ins.ReadNatureTime();
			v.firstlogin = ins.ReadBool();
			mapEvent.Read(ins, out v.eventData);
			mapTypeCooldown.Read(ins, out v.cooldownData);
		}
	}

	//
	public class SFriendInfo
	{
		public SFriendInfo()
		{
			characterID		= 0;
			level		= 1;
			onlineflag		= false;
			guildID		= 0;
		}

		public int		characterID = 0;				//
		public string		nickname = "";				//
		public int		level = 0;				//
		public bool		onlineflag = false;				//
		public int		guildID = 0;				//
		public string		guildName = "";				//
		public string		serverName = "";				//

		public static void Write(Packet os, SFriendInfo v)
		{
			os.WriteInt(v.characterID);
			os.WriteString(v.nickname);
			os.WriteInt(v.level);
			os.WriteBool(v.onlineflag);
			os.WriteInt(v.guildID);
			os.WriteString(v.guildName);
			os.WriteString(v.serverName);
		}

		public static void Read(Packet ins, out SFriendInfo v)
		{
			v = new SFriendInfo();
			v.characterID = ins.ReadInt();
			v.nickname = ins.ReadString();
			v.level = ins.ReadInt();
			v.onlineflag = ins.ReadBool();
			v.guildID = ins.ReadInt();
			v.guildName = ins.ReadString();
			v.serverName = ins.ReadString();
		}
	}

	//
	public class mapFriendInfos : Dictionary<int, SFriendInfo>
	{
		public static void Write(Packet os, mapFriendInfos v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, SFriendInfo> m in v)
			{
				os.WriteInt(m.Key);
				SFriendInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapFriendInfos v)
		{
			v = new mapFriendInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				SFriendInfo tempValue;
				SFriendInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class vectorFriendInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorFriendInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SFriendInfo m in v)
			{
				SFriendInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorFriendInfos v)
		{
			v = new vectorFriendInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SFriendInfo m;
				SFriendInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SRelationInfo
	{
		public SRelationInfo()
		{
			canaddfriend		= true;
		}

		public bool		canaddfriend = false;				//
		public mapFriendInfos		friendlist;				//
		public mapFriendInfos		blacklist;				//

		public static void Write(Packet os, SRelationInfo v)
		{
			os.WriteBool(v.canaddfriend);
			mapFriendInfos.Write(os, v.friendlist);
			mapFriendInfos.Write(os, v.blacklist);
		}

		public static void Read(Packet ins, out SRelationInfo v)
		{
			v = new SRelationInfo();
			v.canaddfriend = ins.ReadBool();
			mapFriendInfos.Read(ins, out v.friendlist);
			mapFriendInfos.Read(ins, out v.blacklist);
		}
	}

	//
	public class SAccountFriendInfo
	{
		public SAccountFriendInfo()
		{
			accountID		= 0;
			onlineflag		= false;
		}

		public int		accountID = 0;				//
		public string		name = "";				//
		public bool		gender = false;				//
		public int		level = 0;				//
		public bool		onlineflag = false;				//

		public static void Write(Packet os, SAccountFriendInfo v)
		{
			os.WriteInt(v.accountID);
			os.WriteString(v.name);
			os.WriteBool(v.gender);
			os.WriteInt(v.level);
			os.WriteBool(v.onlineflag);
		}

		public static void Read(Packet ins, out SAccountFriendInfo v)
		{
			v = new SAccountFriendInfo();
			v.accountID = ins.ReadInt();
			v.name = ins.ReadString();
			v.gender = ins.ReadBool();
			v.level = ins.ReadInt();
			v.onlineflag = ins.ReadBool();
		}
	}

	//
	public class mapAccountFriendInfos : Dictionary<int, SAccountFriendInfo>
	{
		public static void Write(Packet os, mapAccountFriendInfos v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, SAccountFriendInfo> m in v)
			{
				os.WriteInt(m.Key);
				SAccountFriendInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapAccountFriendInfos v)
		{
			v = new mapAccountFriendInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				SAccountFriendInfo tempValue;
				SAccountFriendInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class SItemPrototype
	{
		public SItemPrototype()
		{
			ID		= 0;
			isRealMoney		= 0;
		}

		public int		ID = 0;				//
		public string		Name = "";				//
		public string		PicID = "";				//
		public string		Des = "";				//
		public int		SellPrice = 0;				//
		public bool		Bind = false;				//
		public bool		CanTransaction = false;				//
		public uint		Accumulation = 0;				//
		public int		LevelRequirement = 0;				//
		public int		Type = 0;				//
		public int		EquipPoint = 0;				//
		public uint		MaxCount = 0;				//
		public int		SecondType = 0;				//2
		public int		isRealMoney = 0;				//

		public static void Write(Packet os, SItemPrototype v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.Name);
			os.WriteString(v.PicID);
			os.WriteString(v.Des);
			os.WriteInt(v.SellPrice);
			os.WriteBool(v.Bind);
			os.WriteBool(v.CanTransaction);
			os.WriteUint(v.Accumulation);
			os.WriteInt(v.LevelRequirement);
			os.WriteInt(v.Type);
			os.WriteInt(v.EquipPoint);
			os.WriteUint(v.MaxCount);
			os.WriteInt(v.SecondType);
			os.WriteInt(v.isRealMoney);
		}

		public static void Read(Packet ins, out SItemPrototype v)
		{
			v = new SItemPrototype();
			v.ID = ins.ReadInt();
			v.Name = ins.ReadString();
			v.PicID = ins.ReadString();
			v.Des = ins.ReadString();
			v.SellPrice = ins.ReadInt();
			v.Bind = ins.ReadBool();
			v.CanTransaction = ins.ReadBool();
			v.Accumulation = ins.ReadUint();
			v.LevelRequirement = ins.ReadInt();
			v.Type = ins.ReadInt();
			v.EquipPoint = ins.ReadInt();
			v.MaxCount = ins.ReadUint();
			v.SecondType = ins.ReadInt();
			v.isRealMoney = ins.ReadInt();
		}
	}

	//
	public class SConsumeItemInfo
	{
		public SConsumeItemInfo()
		{
			ID		= 0;
		}

		public int		ID = 0;				//
		public string		Name = "";				//
		public int		ItemCategory = 0;				//
		public string		ItemFunction = "";				//
		public int		StatusEffectType = 0;				//
		public int		StatusBuffID = 0;				//
		public int		StatusEffectBonus = 0;				//

		public static void Write(Packet os, SConsumeItemInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.Name);
			os.WriteInt(v.ItemCategory);
			os.WriteString(v.ItemFunction);
			os.WriteInt(v.StatusEffectType);
			os.WriteInt(v.StatusBuffID);
			os.WriteInt(v.StatusEffectBonus);
		}

		public static void Read(Packet ins, out SConsumeItemInfo v)
		{
			v = new SConsumeItemInfo();
			v.ID = ins.ReadInt();
			v.Name = ins.ReadString();
			v.ItemCategory = ins.ReadInt();
			v.ItemFunction = ins.ReadString();
			v.StatusEffectType = ins.ReadInt();
			v.StatusBuffID = ins.ReadInt();
			v.StatusEffectBonus = ins.ReadInt();
		}
	}

	//
	public class SShopItemPrototype
	{
		public SShopItemPrototype()
		{
			ID		= 0;
		}

		public int		ID = 0;				//
		public string		Name = "";				//
		public string		SaleDes = "";				//
		public int		CurrencyType = 0;				//
		public uint		Coin = 0;				//
		public uint		Gold = 0;				//
		public uint		LevelLimit = 0;				//

		public static void Write(Packet os, SShopItemPrototype v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.Name);
			os.WriteString(v.SaleDes);
			os.WriteInt(v.CurrencyType);
			os.WriteUint(v.Coin);
			os.WriteUint(v.Gold);
			os.WriteUint(v.LevelLimit);
		}

		public static void Read(Packet ins, out SShopItemPrototype v)
		{
			v = new SShopItemPrototype();
			v.ID = ins.ReadInt();
			v.Name = ins.ReadString();
			v.SaleDes = ins.ReadString();
			v.CurrencyType = ins.ReadInt();
			v.Coin = ins.ReadUint();
			v.Gold = ins.ReadUint();
			v.LevelLimit = ins.ReadUint();
		}
	}

	//
	public class ItemGuid
	{
		public ItemGuid()
		{
			worldID		= 0;
			gameID		= 0;
			serialID		= 0;
		}

		public ushort		worldID = 0;				//
		public ushort		gameID = 0;				//
		public int		serialID = 0;				//

		public static void Write(Packet os, ItemGuid v)
		{
			os.WriteUshort(v.worldID);
			os.WriteUshort(v.gameID);
			os.WriteInt(v.serialID);
		}

		public static void Read(Packet ins, out ItemGuid v)
		{
			v = new ItemGuid();
			v.worldID = ins.ReadUshort();
			v.gameID = ins.ReadUshort();
			v.serialID = ins.ReadInt();
		}
	}

	//
	public class SItemInfo
	{
		public SItemInfo()
		{
			ID		= 0;
			perfrab		= 0;
			level		= 1;
			enchant		= 0;
			element		= 0;
			gem		= 0;
			count		= 1;
		}

		public int		ID = 0;				//
		public int		perfrab = 0;				//
		public uint		level = 0;				//
		public ItemGuid		guid;				//
		public int		enchant = 0;				//Enchant
		public int		element = 0;				//Element
		public int		gem = 0;				//Gem
		public uint		slot = 0;				//
		public uint		count = 0;				//
		public string		property = "";				//

		public static void Write(Packet os, SItemInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteInt(v.perfrab);
			os.WriteUint(v.level);
			ItemGuid.Write(os, v.guid);
			os.WriteInt(v.enchant);
			os.WriteInt(v.element);
			os.WriteInt(v.gem);
			os.WriteUint(v.slot);
			os.WriteUint(v.count);
			os.WriteString(v.property);
		}

		public static void Read(Packet ins, out SItemInfo v)
		{
			v = new SItemInfo();
			v.ID = ins.ReadInt();
			v.perfrab = ins.ReadInt();
			v.level = ins.ReadUint();
			ItemGuid.Read(ins, out v.guid);
			v.enchant = ins.ReadInt();
			v.element = ins.ReadInt();
			v.gem = ins.ReadInt();
			v.slot = ins.ReadUint();
			v.count = ins.ReadUint();
			v.property = ins.ReadString();
		}
	}

	//
	public class vectorItemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorItemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SItemInfo m in v)
			{
				SItemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorItemInfos v)
		{
			v = new vectorItemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SItemInfo m;
				SItemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SShopItemInfo
	{
		public SShopItemInfo()
		{
			UUID		= 0;
			ID		= 0;
			perfrab		= 0;
			level		= 1;
			enchant		= 0;
			element		= 0;
			gem		= 0;
			moneyType		= 1;
			price		= 10;
			isVisible		= true;
			isRare		= 0;
			leftBuyCount		= -1;
			leftBuyTime		= -1;
			isDiscount		= 0;
		}

		public int		UUID = 0;				//UUID
		public int		ID = 0;				//
		public int		perfrab = 0;				//
		public uint		level = 0;				//
		public ItemGuid		guid;				//
		public int		enchant = 0;				//Enchant
		public int		element = 0;				//Element
		public int		gem = 0;				//Gem
		public int		moneyType = 0;				//1:
		public int		price = 0;				//
		public bool		isVisible = false;				//
		public int		isRare = 0;				//
		public int		leftBuyCount = 0;				//
		public int		leftBuyTime = 0;				//
		public int		isDiscount = 0;				//

		public static void Write(Packet os, SShopItemInfo v)
		{
			os.WriteInt(v.UUID);
			os.WriteInt(v.ID);
			os.WriteInt(v.perfrab);
			os.WriteUint(v.level);
			ItemGuid.Write(os, v.guid);
			os.WriteInt(v.enchant);
			os.WriteInt(v.element);
			os.WriteInt(v.gem);
			os.WriteInt(v.moneyType);
			os.WriteInt(v.price);
			os.WriteBool(v.isVisible);
			os.WriteInt(v.isRare);
			os.WriteInt(v.leftBuyCount);
			os.WriteInt(v.leftBuyTime);
			os.WriteInt(v.isDiscount);
		}

		public static void Read(Packet ins, out SShopItemInfo v)
		{
			v = new SShopItemInfo();
			v.UUID = ins.ReadInt();
			v.ID = ins.ReadInt();
			v.perfrab = ins.ReadInt();
			v.level = ins.ReadUint();
			ItemGuid.Read(ins, out v.guid);
			v.enchant = ins.ReadInt();
			v.element = ins.ReadInt();
			v.gem = ins.ReadInt();
			v.moneyType = ins.ReadInt();
			v.price = ins.ReadInt();
			v.isVisible = ins.ReadBool();
			v.isRare = ins.ReadInt();
			v.leftBuyCount = ins.ReadInt();
			v.leftBuyTime = ins.ReadInt();
			v.isDiscount = ins.ReadInt();
		}
	}

	//
	public class vectorShopItemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorShopItemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SShopItemInfo m in v)
			{
				SShopItemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorShopItemInfos v)
		{
			v = new vectorShopItemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SShopItemInfo m;
				SShopItemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class mapRareShopItemInfo : Dictionary<int, SShopItemInfo>
	{
		public static void Write(Packet os, mapRareShopItemInfo v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, SShopItemInfo> m in v)
			{
				os.WriteInt(m.Key);
				SShopItemInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapRareShopItemInfo v)
		{
			v = new mapRareShopItemInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				SShopItemInfo tempValue;
				SShopItemInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class SShopConsumeItemInfo
	{
		public SShopConsumeItemInfo()
		{
			ID		= 0;
			Prefab		= 1;
			level		= 1;
			moneyType		= 1;
			price		= 10;
			leftBuyCount		= 0;
			leftBuyTime		= -1;
			isDiscount		= 0;
		}

		public int		ID = 0;				//
		public int		Prefab = 0;				//Prefab
		public string		Name = "";				//
		public uint		level = 0;				//
		public int		moneyType = 0;				//1:
		public int		price = 0;				//
		public int		leftBuyCount = 0;				//
		public int		leftBuyTime = 0;				//
		public int		isDiscount = 0;				//

		public static void Write(Packet os, SShopConsumeItemInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteInt(v.Prefab);
			os.WriteString(v.Name);
			os.WriteUint(v.level);
			os.WriteInt(v.moneyType);
			os.WriteInt(v.price);
			os.WriteInt(v.leftBuyCount);
			os.WriteInt(v.leftBuyTime);
			os.WriteInt(v.isDiscount);
		}

		public static void Read(Packet ins, out SShopConsumeItemInfo v)
		{
			v = new SShopConsumeItemInfo();
			v.ID = ins.ReadInt();
			v.Prefab = ins.ReadInt();
			v.Name = ins.ReadString();
			v.level = ins.ReadUint();
			v.moneyType = ins.ReadInt();
			v.price = ins.ReadInt();
			v.leftBuyCount = ins.ReadInt();
			v.leftBuyTime = ins.ReadInt();
			v.isDiscount = ins.ReadInt();
		}
	}

	//
	public class vectorShopConsumeItemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorShopConsumeItemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SShopConsumeItemInfo m in v)
			{
				SShopConsumeItemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorShopConsumeItemInfos v)
		{
			v = new vectorShopConsumeItemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SShopConsumeItemInfo m;
				SShopConsumeItemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SSimpleShopConsumeItemInfo
	{
		public SSimpleShopConsumeItemInfo()
		{
			ID		= 0;
			Prefab		= 1;
			leftBuyCount		= 0;
		}

		public int		ID = 0;				//
		public int		Prefab = 0;				//Prefab
		public int		leftBuyCount = 0;				//

		public static void Write(Packet os, SSimpleShopConsumeItemInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteInt(v.Prefab);
			os.WriteInt(v.leftBuyCount);
		}

		public static void Read(Packet ins, out SSimpleShopConsumeItemInfo v)
		{
			v = new SSimpleShopConsumeItemInfo();
			v.ID = ins.ReadInt();
			v.Prefab = ins.ReadInt();
			v.leftBuyCount = ins.ReadInt();
		}
	}

	//
	public class vectorSimpleShopConsumeItemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSimpleShopConsumeItemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SSimpleShopConsumeItemInfo m in v)
			{
				SSimpleShopConsumeItemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSimpleShopConsumeItemInfos v)
		{
			v = new vectorSimpleShopConsumeItemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SSimpleShopConsumeItemInfo m;
				SSimpleShopConsumeItemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SBagInfo
	{
		public SBagInfo()
		{
			bagID		= 0;
			locked		= false;
		}

		public byte		bagID = 0;				//
		public uint		capacity = 0;				//
		public bool		locked = false;				//
		public vectorItemInfos		iteminfos;				//

		public static void Write(Packet os, SBagInfo v)
		{
			os.WriteByte(v.bagID);
			os.WriteUint(v.capacity);
			os.WriteBool(v.locked);
			vectorItemInfos.Write(os, v.iteminfos);
		}

		public static void Read(Packet ins, out SBagInfo v)
		{
			v = new SBagInfo();
			v.bagID = ins.ReadByte();
			v.capacity = ins.ReadUint();
			v.locked = ins.ReadBool();
			vectorItemInfos.Read(ins, out v.iteminfos);
		}
	}

	//
	public class vectorBagInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorBagInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SBagInfo m in v)
			{
				SBagInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorBagInfos v)
		{
			v = new vectorBagInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SBagInfo m;
				SBagInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SBagGroup
	{
		public SBagGroup()
		{
		}

		public SBagInfo		equipbag;				//
		public SBagInfo		basebag;				//
		public SBagInfo		bankbag;				//
		public SBagInfo		stashbag;				//

		public static void Write(Packet os, SBagGroup v)
		{
			SBagInfo.Write(os, v.equipbag);
			SBagInfo.Write(os, v.basebag);
			SBagInfo.Write(os, v.bankbag);
			SBagInfo.Write(os, v.stashbag);
		}

		public static void Read(Packet ins, out SBagGroup v)
		{
			v = new SBagGroup();
			SBagInfo.Read(ins, out v.equipbag);
			SBagInfo.Read(ins, out v.basebag);
			SBagInfo.Read(ins, out v.bankbag);
			SBagInfo.Read(ins, out v.stashbag);
		}
	}

	//
	public class SSkillShortcut
	{
		public SSkillShortcut()
		{
			groupIdx		= 0;
			idx		= 0;
			skillID		= 0;
		}

		public int		groupIdx = 0;				//group index
		public int		idx = 0;				//index
		public int		skillID = 0;				//skillID

		public static void Write(Packet os, SSkillShortcut v)
		{
			os.WriteInt(v.groupIdx);
			os.WriteInt(v.idx);
			os.WriteInt(v.skillID);
		}

		public static void Read(Packet ins, out SSkillShortcut v)
		{
			v = new SSkillShortcut();
			v.groupIdx = ins.ReadInt();
			v.idx = ins.ReadInt();
			v.skillID = ins.ReadInt();
		}
	}

	//
	public class vectorSkillShortcut : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSkillShortcut v)
		{
			os.WriteInt(v.Count);
			foreach (SSkillShortcut m in v)
			{
				SSkillShortcut.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSkillShortcut v)
		{
			v = new vectorSkillShortcut();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SSkillShortcut m;
				SSkillShortcut.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SSkillInfo
	{
		public SSkillInfo()
		{
			skillID		= 0;
			level		= 0;
			skillExp		= 0;
			coldTime		= 0;
		}

		public int		skillID = 0;				//skill ID
		public int		level = 0;				//level
		public int		skillExp = 0;				//
		public int		coldTime = 0;				//

		public static void Write(Packet os, SSkillInfo v)
		{
			os.WriteInt(v.skillID);
			os.WriteInt(v.level);
			os.WriteInt(v.skillExp);
			os.WriteInt(v.coldTime);
		}

		public static void Read(Packet ins, out SSkillInfo v)
		{
			v = new SSkillInfo();
			v.skillID = ins.ReadInt();
			v.level = ins.ReadInt();
			v.skillExp = ins.ReadInt();
			v.coldTime = ins.ReadInt();
		}
	}

	//
	public class vectorSkillInfo : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSkillInfo v)
		{
			os.WriteInt(v.Count);
			foreach (SSkillInfo m in v)
			{
				SSkillInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSkillInfo v)
		{
			v = new vectorSkillInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SSkillInfo m;
				SSkillInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SPlayerSkillInfo
	{
		public SPlayerSkillInfo()
		{
			shortcutGroupIdx		= 0;
		}

		public int		shortcutGroupIdx = 0;				//
		public vectorSkillShortcut		skillShortcutVec;				//
		public vectorSkillInfo		skillInfoVec;				//

		public static void Write(Packet os, SPlayerSkillInfo v)
		{
			os.WriteInt(v.shortcutGroupIdx);
			vectorSkillShortcut.Write(os, v.skillShortcutVec);
			vectorSkillInfo.Write(os, v.skillInfoVec);
		}

		public static void Read(Packet ins, out SPlayerSkillInfo v)
		{
			v = new SPlayerSkillInfo();
			v.shortcutGroupIdx = ins.ReadInt();
			vectorSkillShortcut.Read(ins, out v.skillShortcutVec);
			vectorSkillInfo.Read(ins, out v.skillInfoVec);
		}
	}

	//buff
	public class SBuffDBInfo
	{
		public SBuffDBInfo()
		{
			statusID		= 0;
		}

		public int		statusID = 0;				//status ID
		public uint		leftTime = 0;				//left time
		public ulong		saveTime = 0;				//

		public static void Write(Packet os, SBuffDBInfo v)
		{
			os.WriteInt(v.statusID);
			os.WriteUint(v.leftTime);
			os.WriteUint64(v.saveTime);
		}

		public static void Read(Packet ins, out SBuffDBInfo v)
		{
			v = new SBuffDBInfo();
			v.statusID = ins.ReadInt();
			v.leftTime = ins.ReadUint();
			v.saveTime = ins.ReadUint64();
		}
	}

	//buff
	public class vectorBuffDBInfo : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorBuffDBInfo v)
		{
			os.WriteInt(v.Count);
			foreach (SBuffDBInfo m in v)
			{
				SBuffDBInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorBuffDBInfo v)
		{
			v = new vectorBuffDBInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SBuffDBInfo m;
				SBuffDBInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SCompletedMissionInfo
	{
		public SCompletedMissionInfo()
		{
		}

		public vectorInt		CompletedMissionVec;				//

		public static void Write(Packet os, SCompletedMissionInfo v)
		{
			vectorInt.Write(os, v.CompletedMissionVec);
		}

		public static void Read(Packet ins, out SCompletedMissionInfo v)
		{
			v = new SCompletedMissionInfo();
			vectorInt.Read(ins, out v.CompletedMissionVec);
		}
	}

	//relate
	public class SAcceptMissionRelate
	{
		public SAcceptMissionRelate()
		{
			missionID		= 0;
			IsHaveCompleted		= 0;
			IsHaveTriggered		= false;
			star		= 0;
			lastPassTime		= 0;
			canAcceptMaxLvl		= 2;
		}

		public int		missionID = 0;				//missionID
		public int		IsHaveCompleted = 0;				//
		public bool		IsHaveTriggered = false;				//
		public int		star = 0;				//star
		public int		lastPassTime = 0;				//
		public int		canAcceptMaxLvl = 0;				//

		public static void Write(Packet os, SAcceptMissionRelate v)
		{
			os.WriteInt(v.missionID);
			os.WriteInt(v.IsHaveCompleted);
			os.WriteBool(v.IsHaveTriggered);
			os.WriteInt(v.star);
			os.WriteInt(v.lastPassTime);
			os.WriteInt(v.canAcceptMaxLvl);
		}

		public static void Read(Packet ins, out SAcceptMissionRelate v)
		{
			v = new SAcceptMissionRelate();
			v.missionID = ins.ReadInt();
			v.IsHaveCompleted = ins.ReadInt();
			v.IsHaveTriggered = ins.ReadBool();
			v.star = ins.ReadInt();
			v.lastPassTime = ins.ReadInt();
			v.canAcceptMaxLvl = ins.ReadInt();
		}
	}

	//relate
	public class SAcceptMissionRelate2
	{
		public SAcceptMissionRelate2()
		{
			missionID		= 0;
			coolDownTime		= 0;
			IsHaveCompleted		= 0;
			IsHaveTriggered		= false;
			star		= 0;
			lastPassTime		= 0;
			canAcceptMaxLvl		= 1;
			lastPassLvl		= 1;
		}

		public int		missionID = 0;				//
		public int		coolDownTime = 0;				//
		public int		IsHaveCompleted = 0;				//
		public bool		IsHaveTriggered = false;				//
		public int		star = 0;				//mission
		public int		lastPassTime = 0;				//cool down
		public int		canAcceptMaxLvl = 0;				//
		public int		lastPassLvl = 0;				//

		public static void Write(Packet os, SAcceptMissionRelate2 v)
		{
			os.WriteInt(v.missionID);
			os.WriteInt(v.coolDownTime);
			os.WriteInt(v.IsHaveCompleted);
			os.WriteBool(v.IsHaveTriggered);
			os.WriteInt(v.star);
			os.WriteInt(v.lastPassTime);
			os.WriteInt(v.canAcceptMaxLvl);
			os.WriteInt(v.lastPassLvl);
		}

		public static void Read(Packet ins, out SAcceptMissionRelate2 v)
		{
			v = new SAcceptMissionRelate2();
			v.missionID = ins.ReadInt();
			v.coolDownTime = ins.ReadInt();
			v.IsHaveCompleted = ins.ReadInt();
			v.IsHaveTriggered = ins.ReadBool();
			v.star = ins.ReadInt();
			v.lastPassTime = ins.ReadInt();
			v.canAcceptMaxLvl = ins.ReadInt();
			v.lastPassLvl = ins.ReadInt();
		}
	}

	//accept mission relate
	public class vectorSAcceptMissionRelate : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSAcceptMissionRelate v)
		{
			os.WriteInt(v.Count);
			foreach (SAcceptMissionRelate2 m in v)
			{
				SAcceptMissionRelate2.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSAcceptMissionRelate v)
		{
			v = new vectorSAcceptMissionRelate();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SAcceptMissionRelate2 m;
				SAcceptMissionRelate2.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SCanAcceptedMissionInfo
	{
		public SCanAcceptedMissionInfo()
		{
		}

		public vectorSAcceptMissionRelate		CanAcceptedMissionVec;				//

		public static void Write(Packet os, SCanAcceptedMissionInfo v)
		{
			vectorSAcceptMissionRelate.Write(os, v.CanAcceptedMissionVec);
		}

		public static void Read(Packet ins, out SCanAcceptedMissionInfo v)
		{
			v = new SCanAcceptedMissionInfo();
			vectorSAcceptMissionRelate.Read(ins, out v.CanAcceptedMissionVec);
		}
	}

	//relate
	public class SMissionAreaRelate
	{
		public SMissionAreaRelate()
		{
			areaID		= 0;
			isBuy		= false;
		}

		public int		areaID = 0;				//areaID
		public bool		isBuy = false;				//

		public static void Write(Packet os, SMissionAreaRelate v)
		{
			os.WriteInt(v.areaID);
			os.WriteBool(v.isBuy);
		}

		public static void Read(Packet ins, out SMissionAreaRelate v)
		{
			v = new SMissionAreaRelate();
			v.areaID = ins.ReadInt();
			v.isBuy = ins.ReadBool();
		}
	}

	//mission area relate
	public class vectorSMissionAreaRelate : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSMissionAreaRelate v)
		{
			os.WriteInt(v.Count);
			foreach (SMissionAreaRelate m in v)
			{
				SMissionAreaRelate.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSMissionAreaRelate v)
		{
			v = new vectorSMissionAreaRelate();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SMissionAreaRelate m;
				SMissionAreaRelate.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//track
	public class STrack
	{
		public STrack()
		{
			trackType		= 0;
			objectID		= 0;
			isTrackComplete		= 0;
			nowCount		= 0;
		}

		public int		trackType = 0;				//track type
		public int		objectID = 0;				//object id
		public int		isTrackComplete = 0;				//track
		public int		nowCount = 0;				//now count

		public static void Write(Packet os, STrack v)
		{
			os.WriteInt(v.trackType);
			os.WriteInt(v.objectID);
			os.WriteInt(v.isTrackComplete);
			os.WriteInt(v.nowCount);
		}

		public static void Read(Packet ins, out STrack v)
		{
			v = new STrack();
			v.trackType = ins.ReadInt();
			v.objectID = ins.ReadInt();
			v.isTrackComplete = ins.ReadInt();
			v.nowCount = ins.ReadInt();
		}
	}

	//track
	public class vectorSTrack : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSTrack v)
		{
			os.WriteInt(v.Count);
			foreach (STrack m in v)
			{
				STrack.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSTrack v)
		{
			v = new vectorSTrack();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				STrack m;
				STrack.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//task
	public class STask
	{
		public STask()
		{
			taskID		= 0;
			isTaskComplete		= 0;
		}

		public int		taskID = 0;				//task id
		public int		isTaskComplete = 0;				//task
		public vectorSTrack		STrackVector;				//track

		public static void Write(Packet os, STask v)
		{
			os.WriteInt(v.taskID);
			os.WriteInt(v.isTaskComplete);
			vectorSTrack.Write(os, v.STrackVector);
		}

		public static void Read(Packet ins, out STask v)
		{
			v = new STask();
			v.taskID = ins.ReadInt();
			v.isTaskComplete = ins.ReadInt();
			vectorSTrack.Read(ins, out v.STrackVector);
		}
	}

	//task
	public class vectorSTask : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSTask v)
		{
			os.WriteInt(v.Count);
			foreach (STask m in v)
			{
				STask.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSTask v)
		{
			v = new vectorSTask();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				STask m;
				STask.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SBranch
	{
		public SBranch()
		{
			branchID		= 0;
			isBranchComplete		= 0;
		}

		public int		branchID = 0;				//branchID
		public int		isBranchComplete = 0;				//branch
		public vectorSTask		STaskVector;				//task

		public static void Write(Packet os, SBranch v)
		{
			os.WriteInt(v.branchID);
			os.WriteInt(v.isBranchComplete);
			vectorSTask.Write(os, v.STaskVector);
		}

		public static void Read(Packet ins, out SBranch v)
		{
			v = new SBranch();
			v.branchID = ins.ReadInt();
			v.isBranchComplete = ins.ReadInt();
			vectorSTask.Read(ins, out v.STaskVector);
		}
	}

	//branch
	public class vectorSBranch : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSBranch v)
		{
			os.WriteInt(v.Count);
			foreach (SBranch m in v)
			{
				SBranch.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSBranch v)
		{
			v = new vectorSBranch();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SBranch m;
				SBranch.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SMissionProcess
	{
		public SMissionProcess()
		{
			missionID		= 0;
			crystalReliveNum		= 0;
			karmaReliveNum		= 0;
			exp		= 0;
			karma		= 0;
		}

		public uint		missionID = 0;				//
		public vectorSBranch		SBranchVec;				//branchVec
		public int		crystalReliveNum = 0;				//crystal
		public int		karmaReliveNum = 0;				//karma
		public int		exp = 0;				//
		public int		karma = 0;				//
		public mapIntInt		materialMap;				//

		public static void Write(Packet os, SMissionProcess v)
		{
			os.WriteUint(v.missionID);
			vectorSBranch.Write(os, v.SBranchVec);
			os.WriteInt(v.crystalReliveNum);
			os.WriteInt(v.karmaReliveNum);
			os.WriteInt(v.exp);
			os.WriteInt(v.karma);
			mapIntInt.Write(os, v.materialMap);
		}

		public static void Read(Packet ins, out SMissionProcess v)
		{
			v = new SMissionProcess();
			v.missionID = ins.ReadUint();
			vectorSBranch.Read(ins, out v.SBranchVec);
			v.crystalReliveNum = ins.ReadInt();
			v.karmaReliveNum = ins.ReadInt();
			v.exp = ins.ReadInt();
			v.karma = ins.ReadInt();
			mapIntInt.Read(ins, out v.materialMap);
		}
	}

	//pet info
	public class SPetInfo
	{
		public SPetInfo()
		{
			petLevel		= 1;
			petExp		= 0;
			buypetBegTime		= 0;
			leftTime		= 60;
		}

		public int		petTypeID = 0;				//
		public int		petLevel = 0;				//
		public ulong		petExp = 0;				//
		public ulong		buypetBegTime = 0;				//
		public int		leftTime = 0;				//

		public static void Write(Packet os, SPetInfo v)
		{
			os.WriteInt(v.petTypeID);
			os.WriteInt(v.petLevel);
			os.WriteUint64(v.petExp);
			os.WriteUint64(v.buypetBegTime);
			os.WriteInt(v.leftTime);
		}

		public static void Read(Packet ins, out SPetInfo v)
		{
			v = new SPetInfo();
			v.petTypeID = ins.ReadInt();
			v.petLevel = ins.ReadInt();
			v.petExp = ins.ReadUint64();
			v.buypetBegTime = ins.ReadUint64();
			v.leftTime = ins.ReadInt();
		}
	}

	//
	public class vectorSPetInfo : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSPetInfo v)
		{
			os.WriteInt(v.Count);
			foreach (SPetInfo m in v)
			{
				SPetInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSPetInfo v)
		{
			v = new vectorSPetInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SPetInfo m;
				SPetInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SPetInfos
	{
		public SPetInfos()
		{
		}

		public vectorSPetInfo		PetInfoVec;				//

		public static void Write(Packet os, SPetInfos v)
		{
			vectorSPetInfo.Write(os, v.PetInfoVec);
		}

		public static void Read(Packet ins, out SPetInfos v)
		{
			v = new SPetInfos();
			vectorSPetInfo.Read(ins, out v.PetInfoVec);
		}
	}

	//item info
	public class itemuuid
	{
		public itemuuid()
		{
			slotPart		= 0;
			itemID		= 0;
			itemLevel		= 1;
			gemID		= 0;
			elementID		= 0;
			enchantID		= 0;
		}

		public int		slotPart = 0;				//
		public int		itemID = 0;				//
		public int		itemLevel = 0;				//
		public int		gemID = 0;				//gemID
		public int		elementID = 0;				//elementID
		public int		enchantID = 0;				//enchantID
		public int		prefabID = 0;				//prefabID

		public static void Write(Packet os, itemuuid v)
		{
			os.WriteInt(v.slotPart);
			os.WriteInt(v.itemID);
			os.WriteInt(v.itemLevel);
			os.WriteInt(v.gemID);
			os.WriteInt(v.elementID);
			os.WriteInt(v.enchantID);
			os.WriteInt(v.prefabID);
		}

		public static void Read(Packet ins, out itemuuid v)
		{
			v = new itemuuid();
			v.slotPart = ins.ReadInt();
			v.itemID = ins.ReadInt();
			v.itemLevel = ins.ReadInt();
			v.gemID = ins.ReadInt();
			v.elementID = ins.ReadInt();
			v.enchantID = ins.ReadInt();
			v.prefabID = ins.ReadInt();
		}
	}

	//
	public class vectorSItemuuid : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSItemuuid v)
		{
			os.WriteInt(v.Count);
			foreach (itemuuid m in v)
			{
				itemuuid.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSItemuuid v)
		{
			v = new vectorSItemuuid();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				itemuuid m;
				itemuuid.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SCharacterInfoLogin
	{
		public SCharacterInfoLogin()
		{
			ID		= 0;
			style		= 0;
			level		= 0;
			 Exp		= 0;
			status		= 0;
			isTutorial		= false;
		}

		public int		ID = 0;				//Character ID
		public string		nickname = "";				//nick name
		public int		badgeNum = 0;				//badge num
		public ESex		sex;				//sex
		public int		style = 0;				//style
		public int		level = 0;				//level
		public ulong		 Exp = 0;				//Exp
		public NatureTime		creationTime;				//
		public int		status = 0;				//
		public vectorSItemuuid		equipinfo;				//
		public bool		isTutorial = false;				//
		public vectorAttrChange		attrVec;				//vector attr

		public static void Write(Packet os, SCharacterInfoLogin v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.nickname);
			os.WriteInt(v.badgeNum);
			ESex.Write(os, v.sex);
			os.WriteInt(v.style);
			os.WriteInt(v.level);
			os.WriteUint64(v. Exp);
			os.WriteNatureTime(v.creationTime);
			os.WriteInt(v.status);
			vectorSItemuuid.Write(os, v.equipinfo);
			os.WriteBool(v.isTutorial);
			vectorAttrChange.Write(os, v.attrVec);
		}

		public static void Read(Packet ins, out SCharacterInfoLogin v)
		{
			v = new SCharacterInfoLogin();
			v.ID = ins.ReadInt();
			v.nickname = ins.ReadString();
			v.badgeNum = ins.ReadInt();
			ESex.Read(ins, out v.sex);
			v.style = ins.ReadInt();
			v.level = ins.ReadInt();
			v. Exp = ins.ReadUint64();
			v.creationTime = ins.ReadNatureTime();
			v.status = ins.ReadInt();
			vectorSItemuuid.Read(ins, out v.equipinfo);
			v.isTutorial = ins.ReadBool();
			vectorAttrChange.Read(ins, out v.attrVec);
		}
	}

	//
	public class vectorCharacterInfoLogins : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorCharacterInfoLogins v)
		{
			os.WriteInt(v.Count);
			foreach (SCharacterInfoLogin m in v)
			{
				SCharacterInfoLogin.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorCharacterInfoLogins v)
		{
			v = new vectorCharacterInfoLogins();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SCharacterInfoLogin m;
				SCharacterInfoLogin.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SFriendCharInfo
	{
		public SFriendCharInfo()
		{
			ID		= 0;
			style		= 0;
			level		= 0;
			 Exp		= 0;
		}

		public int		ID = 0;				//Character ID
		public string		nickname = "";				//nick name
		public ESex		sex;				//sex
		public int		style = 0;				//style
		public int		level = 0;				//level
		public ulong		 Exp = 0;				//Exp
		public vectorSItemuuid		equipinfo;				//
		public vectorInt		skillVec;				//skill

		public static void Write(Packet os, SFriendCharInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.nickname);
			ESex.Write(os, v.sex);
			os.WriteInt(v.style);
			os.WriteInt(v.level);
			os.WriteUint64(v. Exp);
			vectorSItemuuid.Write(os, v.equipinfo);
			vectorInt.Write(os, v.skillVec);
		}

		public static void Read(Packet ins, out SFriendCharInfo v)
		{
			v = new SFriendCharInfo();
			v.ID = ins.ReadInt();
			v.nickname = ins.ReadString();
			ESex.Read(ins, out v.sex);
			v.style = ins.ReadInt();
			v.level = ins.ReadInt();
			v. Exp = ins.ReadUint64();
			vectorSItemuuid.Read(ins, out v.equipinfo);
			vectorInt.Read(ins, out v.skillVec);
		}
	}

	//
	public class vectorFriendCharInfo : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorFriendCharInfo v)
		{
			os.WriteInt(v.Count);
			foreach (SFriendCharInfo m in v)
			{
				SFriendCharInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorFriendCharInfo v)
		{
			v = new vectorFriendCharInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SFriendCharInfo m;
				SFriendCharInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SDayReward
	{
		public SDayReward()
		{
			dayID		= 0;
			daytime		= 0;
		}

		public int		dayID = 0;				//
		public long		daytime = 0;				//daytime
		public EServerErrorType		returnCode;				//return code
		public vectorInt		dayRewardStatusVec;				//1:

		public static void Write(Packet os, SDayReward v)
		{
			os.WriteInt(v.dayID);
			os.WriteLong(v.daytime);
			EServerErrorType.Write(os, v.returnCode);
			vectorInt.Write(os, v.dayRewardStatusVec);
		}

		public static void Read(Packet ins, out SDayReward v)
		{
			v = new SDayReward();
			v.dayID = ins.ReadInt();
			v.daytime = ins.ReadLong();
			EServerErrorType.Read(ins, out v.returnCode);
			vectorInt.Read(ins, out v.dayRewardStatusVec);
		}
	}

	//
	public class SCharacterDataGroup
	{
		public SCharacterDataGroup()
		{
		}

		public SCharacterInfoBasic		characterData;				//
		public int		SK = 0;				//SK
		public int		FK = 0;				//FK
		public SRelationInfo		relationData;				//
		public SBagGroup		bagData;				// 
		public mapAccountFriendInfos		accountfriendData;				// 
		public SPlayerSkillInfo		playerSkillInfo;				//
		public vectorBuffDBInfo		playerStatusInfo;				//
		public SCompletedMissionInfo		playerCompletedMissionData;				//
		public SDayReward		reward;				//reward
		public vectorAttrChange		attrVec;				//vector attr

		public static void Write(Packet os, SCharacterDataGroup v)
		{
			SCharacterInfoBasic.Write(os, v.characterData);
			os.WriteInt(v.SK);
			os.WriteInt(v.FK);
			SRelationInfo.Write(os, v.relationData);
			SBagGroup.Write(os, v.bagData);
			mapAccountFriendInfos.Write(os, v.accountfriendData);
			SPlayerSkillInfo.Write(os, v.playerSkillInfo);
			vectorBuffDBInfo.Write(os, v.playerStatusInfo);
			SCompletedMissionInfo.Write(os, v.playerCompletedMissionData);
			SDayReward.Write(os, v.reward);
			vectorAttrChange.Write(os, v.attrVec);
		}

		public static void Read(Packet ins, out SCharacterDataGroup v)
		{
			v = new SCharacterDataGroup();
			SCharacterInfoBasic.Read(ins, out v.characterData);
			v.SK = ins.ReadInt();
			v.FK = ins.ReadInt();
			SRelationInfo.Read(ins, out v.relationData);
			SBagGroup.Read(ins, out v.bagData);
			mapAccountFriendInfos.Read(ins, out v.accountfriendData);
			SPlayerSkillInfo.Read(ins, out v.playerSkillInfo);
			vectorBuffDBInfo.Read(ins, out v.playerStatusInfo);
			SCompletedMissionInfo.Read(ins, out v.playerCompletedMissionData);
			SDayReward.Read(ins, out v.reward);
			vectorAttrChange.Read(ins, out v.attrVec);
		}
	}

	//character group vector
	public class vectorCharacterDataGroup : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorCharacterDataGroup v)
		{
			os.WriteInt(v.Count);
			foreach (SCharacterDataGroup m in v)
			{
				SCharacterDataGroup.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorCharacterDataGroup v)
		{
			v = new vectorCharacterDataGroup();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SCharacterDataGroup m;
				SCharacterDataGroup.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//npc
	public class ENpcFunctionType
	{
		public const int eNpcFunType_UnknownType	= 0;		//
		public const int eNpcFunType_Mail	= 1;		//mail
		public const int eNpcFunType_Aid	= 2;		//aid
		public const int eNpcFunType_Storage	= 3;		//storage
		public const int eNpcFunType_Item	= 4;		//Item
		public const int eNpcFunType_ItemRare	= 5;		//item rare
		public const int eNpcFunType_Mission	= 6;		//mission
		public const int eNpcFunType_Ability	= 7;		//ability
		public const int eNpcFunType_Spirit	= 8;		//spirit
		public const int eNpcFunType_Upgrade	= 9;		//upgrade
		public const int eNpcFunType_Max	= 10;		//Max
		public ENpcFunctionType()
		{
			_value = 0;
		}

		public ENpcFunctionType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ENpcFunctionType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ENpcFunctionType v)
		{
			v = new ENpcFunctionType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eNpcFunType_UnknownType" ;
			case 1:
				return   "eNpcFunType_Mail" ;
			case 2:
				return   "eNpcFunType_Aid" ;
			case 3:
				return   "eNpcFunType_Storage" ;
			case 4:
				return   "eNpcFunType_Item" ;
			case 5:
				return   "eNpcFunType_ItemRare" ;
			case 6:
				return   "eNpcFunType_Mission" ;
			case 7:
				return   "eNpcFunType_Ability" ;
			case 8:
				return   "eNpcFunType_Spirit" ;
			case 9:
				return   "eNpcFunType_Upgrade" ;
			case 10:
				return   "eNpcFunType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//npc
	public class vectorNpcFunction : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorNpcFunction v)
		{
			os.WriteInt(v.Count);
			foreach (ENpcFunctionType m in v)
			{
				ENpcFunctionType.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorNpcFunction v)
		{
			v = new vectorNpcFunction();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				ENpcFunctionType m;
				ENpcFunctionType.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SNPCBaseInfo
	{
		public SNPCBaseInfo()
		{
			ID		= 0;
		}

		public int		ID = 0;				//npc ID
		public vectorNpcFunction		function;				//

		public static void Write(Packet os, SNPCBaseInfo v)
		{
			os.WriteInt(v.ID);
			vectorNpcFunction.Write(os, v.function);
		}

		public static void Read(Packet ins, out SNPCBaseInfo v)
		{
			v = new SNPCBaseInfo();
			v.ID = ins.ReadInt();
			vectorNpcFunction.Read(ins, out v.function);
		}
	}

	//
	public class SChannelInfo
	{
		public SChannelInfo()
		{
			channelType		= 0;
			instanceName		= "instanceName";
			caption		= "caption";
			specification		= "specification";
			maxRoom		= 20;
			maxPlayer		= 300;
			playerMaxLevel		= 100;
			playerMinLevel		= 1;
			playerCount		= 0;
			robotCount		= 0;
			robotStartIndex		= 0;
			maxRobotInRoom		= 0;
		}

		public int		channelType = 0;				//
		public string		instanceName = "";				//
		public string		caption = "";				//
		public string		specification = "";				//
		public int		maxRoom = 0;				//
		public int		maxPlayer = 0;				//
		public int		playerMaxLevel = 0;				//
		public int		playerMinLevel = 0;				//
		public int		playerCount = 0;				//
		public int		robotCount = 0;				//
		public int		robotStartIndex = 0;				//
		public int		maxRobotInRoom = 0;				//

		public static void Write(Packet os, SChannelInfo v)
		{
			os.WriteInt(v.channelType);
			os.WriteString(v.instanceName);
			os.WriteString(v.caption);
			os.WriteString(v.specification);
			os.WriteInt(v.maxRoom);
			os.WriteInt(v.maxPlayer);
			os.WriteInt(v.playerMaxLevel);
			os.WriteInt(v.playerMinLevel);
			os.WriteInt(v.playerCount);
			os.WriteInt(v.robotCount);
			os.WriteInt(v.robotStartIndex);
			os.WriteInt(v.maxRobotInRoom);
		}

		public static void Read(Packet ins, out SChannelInfo v)
		{
			v = new SChannelInfo();
			v.channelType = ins.ReadInt();
			v.instanceName = ins.ReadString();
			v.caption = ins.ReadString();
			v.specification = ins.ReadString();
			v.maxRoom = ins.ReadInt();
			v.maxPlayer = ins.ReadInt();
			v.playerMaxLevel = ins.ReadInt();
			v.playerMinLevel = ins.ReadInt();
			v.playerCount = ins.ReadInt();
			v.robotCount = ins.ReadInt();
			v.robotStartIndex = ins.ReadInt();
			v.maxRobotInRoom = ins.ReadInt();
		}
	}

	//
	public class vectorChannelServerInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorChannelServerInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SChannelInfo m in v)
			{
				SChannelInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorChannelServerInfos v)
		{
			v = new vectorChannelServerInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SChannelInfo m;
				SChannelInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SChannelPlayerInfo
	{
		public SChannelPlayerInfo()
		{
			ID		= 0;
			camp		= 0;
		}

		public string		roleName = "";				//
		public int		ID = 0;				//
		public int		camp = 0;				//

		public static void Write(Packet os, SChannelPlayerInfo v)
		{
			os.WriteString(v.roleName);
			os.WriteInt(v.ID);
			os.WriteInt(v.camp);
		}

		public static void Read(Packet ins, out SChannelPlayerInfo v)
		{
			v = new SChannelPlayerInfo();
			v.roleName = ins.ReadString();
			v.ID = ins.ReadInt();
			v.camp = ins.ReadInt();
		}
	}

	//
	public class vectorChannelPlayerInfo : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorChannelPlayerInfo v)
		{
			os.WriteInt(v.Count);
			foreach (SChannelPlayerInfo m in v)
			{
				SChannelPlayerInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorChannelPlayerInfo v)
		{
			v = new vectorChannelPlayerInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SChannelPlayerInfo m;
				SChannelPlayerInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class ERoomState
	{
		public const int eRoomState_Idle	= 0;		//
		public const int eRoomState_Prepare	= 1;		//
		public const int eRoomState_InGame	= 2;		//
		public const int eRoomState_WaitContinue	= 3;		// 
		public ERoomState()
		{
			_value = 0;
		}

		public ERoomState(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ERoomState v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ERoomState v)
		{
			v = new ERoomState();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eRoomState_Idle" ;
			case 1:
				return   "eRoomState_Prepare" ;
			case 2:
				return   "eRoomState_InGame" ;
			case 3:
				return   "eRoomState_WaitContinue" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class SRoomChangeInfo
	{
		public SRoomChangeInfo()
		{
		}

		public int		roomIndex = 0;				//
		public ERoomState		roomState;				//
		public sbyte		curNum = 0;				//

		public static void Write(Packet os, SRoomChangeInfo v)
		{
			os.WriteInt(v.roomIndex);
			ERoomState.Write(os, v.roomState);
			os.WriteInt8(v.curNum);
		}

		public static void Read(Packet ins, out SRoomChangeInfo v)
		{
			v = new SRoomChangeInfo();
			v.roomIndex = ins.ReadInt();
			ERoomState.Read(ins, out v.roomState);
			v.curNum = ins.ReadInt8();
		}
	}

	//
	public class vectorRoomChangeInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorRoomChangeInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SRoomChangeInfo m in v)
			{
				SRoomChangeInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorRoomChangeInfos v)
		{
			v = new vectorRoomChangeInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SRoomChangeInfo m;
				SRoomChangeInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SRoomInfo
	{
		public SRoomInfo()
		{
		}

		public SRoomChangeInfo		roomChangeInfo;				//
		public string		mapName = "";				//
		public string		roomName = "";				//
		public sbyte		maxNum = 0;				//

		public static void Write(Packet os, SRoomInfo v)
		{
			SRoomChangeInfo.Write(os, v.roomChangeInfo);
			os.WriteString(v.mapName);
			os.WriteString(v.roomName);
			os.WriteInt8(v.maxNum);
		}

		public static void Read(Packet ins, out SRoomInfo v)
		{
			v = new SRoomInfo();
			SRoomChangeInfo.Read(ins, out v.roomChangeInfo);
			v.mapName = ins.ReadString();
			v.roomName = ins.ReadString();
			v.maxNum = ins.ReadInt8();
		}
	}

	//
	public class vectorRoomInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorRoomInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SRoomInfo m in v)
			{
				SRoomInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorRoomInfos v)
		{
			v = new vectorRoomInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SRoomInfo m;
				SRoomInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SRoomNonChangeInfo
	{
		public SRoomNonChangeInfo()
		{
			roomIndex		= 0;
			maxNum		= 0;
		}

		public int		roomIndex = 0;				//
		public string		mapName = "";				//
		public sbyte		maxNum = 0;				//

		public static void Write(Packet os, SRoomNonChangeInfo v)
		{
			os.WriteInt(v.roomIndex);
			os.WriteString(v.mapName);
			os.WriteInt8(v.maxNum);
		}

		public static void Read(Packet ins, out SRoomNonChangeInfo v)
		{
			v = new SRoomNonChangeInfo();
			v.roomIndex = ins.ReadInt();
			v.mapName = ins.ReadString();
			v.maxNum = ins.ReadInt8();
		}
	}

	//
	public class SRoomPlayerInfo
	{
		public SRoomPlayerInfo()
		{
			ID		= -1;
			camp		= 0;
			seat		= -1;
			isRoomMaster		= false;
			isDisconnect		= false;
		}

		public string		roleName = "";				//
		public int		ID = 0;				//
		public int		camp = 0;				//
		public int		seat = 0;				//
		public bool		isRoomMaster = false;				//
		public bool		isDisconnect = false;				//

		public static void Write(Packet os, SRoomPlayerInfo v)
		{
			os.WriteString(v.roleName);
			os.WriteInt(v.ID);
			os.WriteInt(v.camp);
			os.WriteInt(v.seat);
			os.WriteBool(v.isRoomMaster);
			os.WriteBool(v.isDisconnect);
		}

		public static void Read(Packet ins, out SRoomPlayerInfo v)
		{
			v = new SRoomPlayerInfo();
			v.roleName = ins.ReadString();
			v.ID = ins.ReadInt();
			v.camp = ins.ReadInt();
			v.seat = ins.ReadInt();
			v.isRoomMaster = ins.ReadBool();
			v.isDisconnect = ins.ReadBool();
		}
	}

	//
	public class vectorRoomPlayerInfo : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorRoomPlayerInfo v)
		{
			os.WriteInt(v.Count);
			foreach (SRoomPlayerInfo m in v)
			{
				SRoomPlayerInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorRoomPlayerInfo v)
		{
			v = new vectorRoomPlayerInfo();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SRoomPlayerInfo m;
				SRoomPlayerInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//equiped item info
	public class SEquipedItemInfo
	{
		public SEquipedItemInfo()
		{
			slot		= 0;
		}

		public int		itemID = 0;				//prototype ID
		public int		slot = 0;				//slot in bag

		public static void Write(Packet os, SEquipedItemInfo v)
		{
			os.WriteInt(v.itemID);
			os.WriteInt(v.slot);
		}

		public static void Read(Packet ins, out SEquipedItemInfo v)
		{
			v = new SEquipedItemInfo();
			v.itemID = ins.ReadInt();
			v.slot = ins.ReadInt();
		}
	}

	//
	public class vectorEquipedItemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorEquipedItemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SEquipedItemInfo m in v)
			{
				SEquipedItemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorEquipedItemInfos v)
		{
			v = new vectorEquipedItemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SEquipedItemInfo m;
				SEquipedItemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//player character info
	public class SRoomCharacterInfo
	{
		public SRoomCharacterInfo()
		{
			ID		= -1;
		}

		public int		ID = 0;				//character ID
		public vectorEquipedItemInfos		itemlist;				//item list

		public static void Write(Packet os, SRoomCharacterInfo v)
		{
			os.WriteInt(v.ID);
			vectorEquipedItemInfos.Write(os, v.itemlist);
		}

		public static void Read(Packet ins, out SRoomCharacterInfo v)
		{
			v = new SRoomCharacterInfo();
			v.ID = ins.ReadInt();
			vectorEquipedItemInfos.Read(ins, out v.itemlist);
		}
	}

	//
	public class UserJoinGameInfo
	{
		public UserJoinGameInfo()
		{
		}

		public int		ID = 0;				//
		public string		lobbyKey = "";				//lobbyKey
		public string		gatewayKey = "";				//gatewayKey

		public static void Write(Packet os, UserJoinGameInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteString(v.lobbyKey);
			os.WriteString(v.gatewayKey);
		}

		public static void Read(Packet ins, out UserJoinGameInfo v)
		{
			v = new UserJoinGameInfo();
			v.ID = ins.ReadInt();
			v.lobbyKey = ins.ReadString();
			v.gatewayKey = ins.ReadString();
		}
	}

	//
	public class GameServerInfo
	{
		public GameServerInfo()
		{
			instanceName		= "instanceName";
			caption		= "caption";
		}

		public string		instanceName = "";				//
		public string		caption = "";				//
		public int		playerCount = 0;				//

		public static void Write(Packet os, GameServerInfo v)
		{
			os.WriteString(v.instanceName);
			os.WriteString(v.caption);
			os.WriteInt(v.playerCount);
		}

		public static void Read(Packet ins, out GameServerInfo v)
		{
			v = new GameServerInfo();
			v.instanceName = ins.ReadString();
			v.caption = ins.ReadString();
			v.playerCount = ins.ReadInt();
		}
	}

	//
	public class mapGameServerInfos : Dictionary<string, GameServerInfo>
	{
		public static void Write(Packet os, mapGameServerInfos v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<string, GameServerInfo> m in v)
			{
				os.WriteString(m.Key);
				GameServerInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapGameServerInfos v)
		{
			v = new mapGameServerInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				string tempKey;
				tempKey = ins.ReadString();

				GameServerInfo tempValue;
				GameServerInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//gift
	public class SGift
	{
		public SGift()
		{
			karma		= 0;
			state		= 0;
		}

		public string		key = "";				//key
		public int		karma = 0;				//karma
		public vectorInt		ItemIDVec;				//item ID vector
		public int		state = 0;				//state

		public static void Write(Packet os, SGift v)
		{
			os.WriteString(v.key);
			os.WriteInt(v.karma);
			vectorInt.Write(os, v.ItemIDVec);
			os.WriteInt(v.state);
		}

		public static void Read(Packet ins, out SGift v)
		{
			v = new SGift();
			v.key = ins.ReadString();
			v.karma = ins.ReadInt();
			vectorInt.Read(ins, out v.ItemIDVec);
			v.state = ins.ReadInt();
		}
	}

	//gift
	public class SRedeemGift
	{
		public SRedeemGift()
		{
			karma		= 0;
			gold		= 0;
		}

		public string		title = "";				//title
		public string		content = "";				//content
		public string		sender = "";				//sender
		public string		redeemCode = "";				//redeemCode
		public string		giftXML = "";				//gift XML
		public int		karma = 0;				//karma
		public int		gold = 0;				//gold
		public vectorItemInfos		ItemVec;				//item vector
		public vectorInt		petIDVec;				//pet id vector

		public static void Write(Packet os, SRedeemGift v)
		{
			os.WriteString(v.title);
			os.WriteString(v.content);
			os.WriteString(v.sender);
			os.WriteString(v.redeemCode);
			os.WriteString(v.giftXML);
			os.WriteInt(v.karma);
			os.WriteInt(v.gold);
			vectorItemInfos.Write(os, v.ItemVec);
			vectorInt.Write(os, v.petIDVec);
		}

		public static void Read(Packet ins, out SRedeemGift v)
		{
			v = new SRedeemGift();
			v.title = ins.ReadString();
			v.content = ins.ReadString();
			v.sender = ins.ReadString();
			v.redeemCode = ins.ReadString();
			v.giftXML = ins.ReadString();
			v.karma = ins.ReadInt();
			v.gold = ins.ReadInt();
			vectorItemInfos.Read(ins, out v.ItemVec);
			vectorInt.Read(ins, out v.petIDVec);
		}
	}

	//redeem gift map
	public class mapRedeemGift : Dictionary<string, SRedeemGift>
	{
		public static void Write(Packet os, mapRedeemGift v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<string, SRedeemGift> m in v)
			{
				os.WriteString(m.Key);
				SRedeemGift.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapRedeemGift v)
		{
			v = new mapRedeemGift();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				string tempKey;
				tempKey = ins.ReadString();

				SRedeemGift tempValue;
				SRedeemGift.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//
	public class EChatType
	{
		public const int eChatType_Invalid	= 0;		//
		public const int eChatType_Private	= 1;		// 
		public const int eChatType_System	= 2;		// 
		public const int eChatType_Broadcast	= 3;		// 
		public const int eChatType_Game	= 4;		// game server
		public const int eChatType_GM	= 5;		//GM
		public const int eChatType_Max	= 6;		//
		public EChatType()
		{
			_value = 0;
		}

		public EChatType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EChatType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EChatType v)
		{
			v = new EChatType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eChatType_Invalid" ;
			case 1:
				return   "eChatType_Private" ;
			case 2:
				return   "eChatType_System" ;
			case 3:
				return   "eChatType_Broadcast" ;
			case 4:
				return   "eChatType_Game" ;
			case 5:
				return   "eChatType_GM" ;
			case 6:
				return   "eChatType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class ESpecialType
	{
		public const int eSpecialType_CannotMove	= 0;		//
		public const int eSpecialType_CannotUseSkill	= 1;		//
		public const int eSpecialType_CannotUseItem	= 2;		//
		public const int eSpecialType_CannotBeAttacked	= 3;		//
		public const int eSpecialType_Max	= 4;		//
		public ESpecialType()
		{
			_value = 0;
		}

		public ESpecialType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ESpecialType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ESpecialType v)
		{
			v = new ESpecialType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eSpecialType_CannotMove" ;
			case 1:
				return   "eSpecialType_CannotUseSkill" ;
			case 2:
				return   "eSpecialType_CannotUseItem" ;
			case 3:
				return   "eSpecialType_CannotBeAttacked" ;
			case 4:
				return   "eSpecialType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EStatusAttrType
	{
		public const int StatusAttr_Invalid	= -1;		//
		public const int StatusAttr_MonesterEye	= 0;		//
		public const int StatusAttr_DropMoney	= 1;		//
		public const int StatusAttr_SkillMp	= 2;		//
		public const int StatusAttr_SkillBonus	= 3;		//
		public const int StatusAttr_Exp	= 4;		//exp
		public const int StatusAttr_DropRate	= 5;		//
		public const int StatusAttr_Max	= 6;		//
		public EStatusAttrType()
		{
			_value = -1;
		}

		public EStatusAttrType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EStatusAttrType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EStatusAttrType v)
		{
			v = new EStatusAttrType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case -1:
				return   "StatusAttr_Invalid" ;
			case 0:
				return   "StatusAttr_MonesterEye" ;
			case 1:
				return   "StatusAttr_DropMoney" ;
			case 2:
				return   "StatusAttr_SkillMp" ;
			case 3:
				return   "StatusAttr_SkillBonus" ;
			case 4:
				return   "StatusAttr_Exp" ;
			case 5:
				return   "StatusAttr_DropRate" ;
			case 6:
				return   "StatusAttr_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EStatusElementType
	{
		public const int StatusElement_Invalid	= -1;		//
		public const int StatusElement_Flame	= 0;		//flame
		public const int StatusElement_Frost	= 1;		//frost
		public const int StatusElement_Explosion	= 2;		//explosion
		public const int StatusElement_Storm	= 3;		//storm
		public const int StatusElement_FlameResist	= 4;		//flame
		public const int StatusElement_FrostResist	= 5;		//frost
		public const int StatusElement_ExplosionResist	= 6;		//explosion
		public const int StatusElement_StormResist	= 7;		//storm
		public const int StatusElement_FlameWeakness	= 8;		//flame
		public const int StatusElement_FrostWeakness	= 9;		//frost
		public const int StatusElement_ExplosionWeakness	= 10;		//explosion
		public const int StatusElement_StormWeakness	= 11;		//storm
		public const int StatusElement_Max	= 12;		//
		public EStatusElementType()
		{
			_value = -1;
		}

		public EStatusElementType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EStatusElementType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EStatusElementType v)
		{
			v = new EStatusElementType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case -1:
				return   "StatusElement_Invalid" ;
			case 0:
				return   "StatusElement_Flame" ;
			case 1:
				return   "StatusElement_Frost" ;
			case 2:
				return   "StatusElement_Explosion" ;
			case 3:
				return   "StatusElement_Storm" ;
			case 4:
				return   "StatusElement_FlameResist" ;
			case 5:
				return   "StatusElement_FrostResist" ;
			case 6:
				return   "StatusElement_ExplosionResist" ;
			case 7:
				return   "StatusElement_StormResist" ;
			case 8:
				return   "StatusElement_FlameWeakness" ;
			case 9:
				return   "StatusElement_FrostWeakness" ;
			case 10:
				return   "StatusElement_ExplosionWeakness" ;
			case 11:
				return   "StatusElement_StormWeakness" ;
			case 12:
				return   "StatusElement_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class SElementValue
	{
		public SElementValue()
		{
		}

		public EStatusElementType		specialType;				//
		public float		value = 0;				//value

		public static void Write(Packet os, SElementValue v)
		{
			EStatusElementType.Write(os, v.specialType);
			os.WriteFloat(v.value);
		}

		public static void Read(Packet ins, out SElementValue v)
		{
			v = new SElementValue();
			EStatusElementType.Read(ins, out v.specialType);
			v.value = ins.ReadFloat();
		}
	}

	//
	public class vectorElementValue : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorElementValue v)
		{
			os.WriteInt(v.Count);
			foreach (SElementValue m in v)
			{
				SElementValue.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorElementValue v)
		{
			v = new vectorElementValue();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SElementValue m;
				SElementValue.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class ESkillType
	{
		public const int eSkillType_Fight	= 0;		//
		public const int eSkillType_Passive	= 1;		//
		public ESkillType()
		{
			_value = 0;
		}

		public ESkillType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ESkillType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ESkillType v)
		{
			v = new ESkillType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eSkillType_Fight" ;
			case 1:
				return   "eSkillType_Passive" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class ESkillProgramType
	{
		public const int eSkillProgramType_CommonAttack	= 0;		//
		public const int eSkillProgramType_Normal	= 1;		//
		public const int eSkillProgramType_Shot	= 2;		//
		public const int eSkillProgramType_Teleport	= 3;		//
		public const int eSkillProgramType_Max	= 4;		//
		public ESkillProgramType()
		{
			_value = 0;
		}

		public ESkillProgramType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ESkillProgramType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ESkillProgramType v)
		{
			v = new ESkillProgramType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eSkillProgramType_CommonAttack" ;
			case 1:
				return   "eSkillProgramType_Normal" ;
			case 2:
				return   "eSkillProgramType_Shot" ;
			case 3:
				return   "eSkillProgramType_Teleport" ;
			case 4:
				return   "eSkillProgramType_Max" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class ETargetType
	{
		public const int eTargetType_Enemy	= 0;		//
		public const int eDmgType_all	= 1;		//
		public const int eDmgType_self	= 2;		//
		public const int eDmgType_Team	= 3;		//
		public ETargetType()
		{
			_value = 0;
		}

		public ETargetType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ETargetType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ETargetType v)
		{
			v = new ETargetType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eTargetType_Enemy" ;
			case 1:
				return   "eDmgType_all" ;
			case 2:
				return   "eDmgType_self" ;
			case 3:
				return   "eDmgType_Team" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EDamageType
	{
		public const int eDmgType_Weapon	= 0;		//
		public const int eDmgType_Body	= 1;		//
		public const int eDmgType_Value	= 2;		//
		public const int eDmgType_Percent	= 3;		//
		public const int eDmgType_Recover	= 4;		//
		public EDamageType()
		{
			_value = 0;
		}

		public EDamageType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EDamageType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EDamageType v)
		{
			v = new EDamageType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eDmgType_Weapon" ;
			case 1:
				return   "eDmgType_Body" ;
			case 2:
				return   "eDmgType_Value" ;
			case 3:
				return   "eDmgType_Percent" ;
			case 4:
				return   "eDmgType_Recover" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EAreaType
	{
		public const int eAreaType_Single	= 0;		//
		public const int eAreaType_Round	= 1;		//
		public const int eAreaType_HalfRound	= 2;		//
		public const int eAreaType_Square	= 3;		//
		public const int eAreaType_RushSquare	= 4;		//
		public const int eAreaType_45	= 5;		//45
		public EAreaType()
		{
			_value = 0;
		}

		public EAreaType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EAreaType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EAreaType v)
		{
			v = new EAreaType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eAreaType_Single" ;
			case 1:
				return   "eAreaType_Round" ;
			case 2:
				return   "eAreaType_HalfRound" ;
			case 3:
				return   "eAreaType_Square" ;
			case 4:
				return   "eAreaType_RushSquare" ;
			case 5:
				return   "eAreaType_45" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EAttackPosType
	{
		public const int eAttackPos_Single	= 0;		//
		public const int eAttackPos_CurPos	= 1;		//
		public const int eAttackPos_MapPos	= 2;		//
		public const int eAttackPos_ObjectPos	= 3;		//
		public EAttackPosType()
		{
			_value = 0;
		}

		public EAttackPosType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EAttackPosType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EAttackPosType v)
		{
			v = new EAttackPosType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eAttackPos_Single" ;
			case 1:
				return   "eAttackPos_CurPos" ;
			case 2:
				return   "eAttackPos_MapPos" ;
			case 3:
				return   "eAttackPos_ObjectPos" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EStatusType
	{
		public const int eStatusType_Common	= 0;		//
		public const int eStatusType_BeAttacked	= 1;		//
		public const int eStatusType_Attack	= 2;		//
		public const int eStatusType_SaveDB	= 3;		//need save to DB
		public EStatusType()
		{
			_value = 0;
		}

		public EStatusType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EStatusType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EStatusType v)
		{
			v = new EStatusType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eStatusType_Common" ;
			case 1:
				return   "eStatusType_BeAttacked" ;
			case 2:
				return   "eStatusType_Attack" ;
			case 3:
				return   "eStatusType_SaveDB" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//buff
	public class EStatusReplaceType
	{
		public const int eStatusReplace_CanMany	= 0;		//
		public const int eStatusReplace_Control	= 1;		//
		public const int eStatusReplace_Absorb	= 2;		//
		public const int eStatusReplace_OnlyOne	= 3;		//
		public EStatusReplaceType()
		{
			_value = 0;
		}

		public EStatusReplaceType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EStatusReplaceType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EStatusReplaceType v)
		{
			v = new EStatusReplaceType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eStatusReplace_CanMany" ;
			case 1:
				return   "eStatusReplace_Control" ;
			case 2:
				return   "eStatusReplace_Absorb" ;
			case 3:
				return   "eStatusReplace_OnlyOne" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class EEffectType
	{
		public const int eEffectType_Invalid	= 0;		//invalid value
		public const int eEffectType_AttrOnce	= 1;		//
		public const int eEffectType_AttrContinue	= 2;		//
		public const int eEffectType_Absorb	= 3;		//
		public const int eEffectType_Damage	= 4;		//
		public const int eEffectType_CannotDo	= 5;		//
		public const int eEffectType_KnockBack	= 6;		//
		public const int eEffectType_Rush	= 7;		//Rush
		public const int eEffectType_Dizzy	= 8;		//
		public const int eEffectType_Flee	= 9;		//
		public const int eEffectType_SpecialAttr	= 10;		//
		public const int eEffectType_ElementAttr	= 11;		//element
		public const int eEffectType_AddStatus	= 12;		//
		public const int eEffectType_Thirsty	= 13;		//
		public const int eEffectType_TalentOnce	= 14;		//
		public const int eEffectType_TalentContinue	= 15;		//
		public const int eEffectType_TalentOnceBase	= 16;		//
		public const int eEffectType_TalentContinueBase	= 17;		//
		public const int eEffectType_AttrCondition	= 18;		//
		public const int eEffectType_Balance	= 19;		//balance
		public const int eEffectType_AddObject	= 20;		//add object
		public const int eEffectType_ElementChance	= 21;		//change element chance
		public EEffectType()
		{
			_value = 0;
		}

		public EEffectType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EEffectType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EEffectType v)
		{
			v = new EEffectType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eEffectType_Invalid" ;
			case 1:
				return   "eEffectType_AttrOnce" ;
			case 2:
				return   "eEffectType_AttrContinue" ;
			case 3:
				return   "eEffectType_Absorb" ;
			case 4:
				return   "eEffectType_Damage" ;
			case 5:
				return   "eEffectType_CannotDo" ;
			case 6:
				return   "eEffectType_KnockBack" ;
			case 7:
				return   "eEffectType_Rush" ;
			case 8:
				return   "eEffectType_Dizzy" ;
			case 9:
				return   "eEffectType_Flee" ;
			case 10:
				return   "eEffectType_SpecialAttr" ;
			case 11:
				return   "eEffectType_ElementAttr" ;
			case 12:
				return   "eEffectType_AddStatus" ;
			case 13:
				return   "eEffectType_Thirsty" ;
			case 14:
				return   "eEffectType_TalentOnce" ;
			case 15:
				return   "eEffectType_TalentContinue" ;
			case 16:
				return   "eEffectType_TalentOnceBase" ;
			case 17:
				return   "eEffectType_TalentContinueBase" ;
			case 18:
				return   "eEffectType_AttrCondition" ;
			case 19:
				return   "eEffectType_Balance" ;
			case 20:
				return   "eEffectType_AddObject" ;
			case 21:
				return   "eEffectType_ElementChance" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class ESkillObjectType
	{
		public const int eSkillObjectType_Bullet	= 0;		//
		public const int eSkillObjectType_Trap	= 1;		//
		public const int eSkillObjectType_TrapOnce	= 2;		//
		public const int eSkillObjectType_Ability	= 3;		//
		public ESkillObjectType()
		{
			_value = 0;
		}

		public ESkillObjectType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ESkillObjectType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ESkillObjectType v)
		{
			v = new ESkillObjectType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eSkillObjectType_Bullet" ;
			case 1:
				return   "eSkillObjectType_Trap" ;
			case 2:
				return   "eSkillObjectType_TrapOnce" ;
			case 3:
				return   "eSkillObjectType_Ability" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class ESkillObjectTargetType
	{
		public const int eSkillObjectTargetType_Monster	= 0;		//monster
		public const int eSkillObjectTargetType_Player	= 1;		//player
		public ESkillObjectTargetType()
		{
			_value = 0;
		}

		public ESkillObjectTargetType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, ESkillObjectTargetType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out ESkillObjectTargetType v)
		{
			v = new ESkillObjectTargetType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eSkillObjectTargetType_Monster" ;
			case 1:
				return   "eSkillObjectTargetType_Player" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//AllyNpc
	public class EAllyNpcType
	{
		public const int eAllyNpcType_Partner	= 0;		//Partner
		public const int eAllyNpcType_Mission	= 1;		//Mission
		public const int eAllyNpcType_Friend	= 2;		//Friend
		public EAllyNpcType()
		{
			_value = 0;
		}

		public EAllyNpcType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EAllyNpcType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EAllyNpcType v)
		{
			v = new EAllyNpcType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eAllyNpcType_Partner" ;
			case 1:
				return   "eAllyNpcType_Mission" ;
			case 2:
				return   "eAllyNpcType_Friend" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class SSpecialEffect
	{
		public SSpecialEffect()
		{
			value		= 0;
		}

		public ESpecialType		specialType;				//
		public int		value = 0;				//

		public static void Write(Packet os, SSpecialEffect v)
		{
			ESpecialType.Write(os, v.specialType);
			os.WriteInt(v.value);
		}

		public static void Read(Packet ins, out SSpecialEffect v)
		{
			v = new SSpecialEffect();
			ESpecialType.Read(ins, out v.specialType);
			v.value = ins.ReadInt();
		}
	}

	//
	public class vectorSpecialEffect : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorSpecialEffect v)
		{
			os.WriteInt(v.Count);
			foreach (SSpecialEffect m in v)
			{
				SSpecialEffect.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorSpecialEffect v)
		{
			v = new vectorSpecialEffect();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SSpecialEffect m;
				SSpecialEffect.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SSkillData
	{
		public SSkillData()
		{
			skillID		= 0;
			mpNeed		= 0;
			prepareTime		= 0;
			timeToMaxPower		= 0;
			incrementDmg		= 0;
			animDuration		= 0;
			coldTime		= 0;
			attackCount		= 0;
			attackCoefficient		= 0;
			baseVal		= 0;
			abilityBonus		= 0;
		}

		public int		skillID = 0;				//
		public string		skillName = "";				//
		public ESkillProgramType		programType;				//
		public EStatusElementType		elementType;				//
		public ETargetType		targetType;				//
		public int		mpNeed = 0;				//
		public int		prepareTime = 0;				//
		public int		timeToMaxPower = 0;				//
		public int		incrementDmg = 0;				//
		public int		animDuration = 0;				//
		public int		coldTime = 0;				//
		public int		attackCount = 0;				//
		public int		attackTime = 0;				//
		public int		attackCoefficient = 0;				//
		public EDamageType		dmgType;				//
		public float		baseVal = 0;				//baseVal
		public float		abilityBonus = 0;				//bonus
		public EAttributeType		attrType;				//
		public EAttackPosType		attackPosType;				//
		public EAreaType		areaType;				//
		public float		areaWidth = 0;				//
		public float		areaLength = 0;				//
		public int		level = 0;				//level
		public ETalent		discipline;				//discipline
		public int		karma = 0;				//karma
		public vectorInt		objectIDVec;				//
		public vectorInt		selfStatusVec;				//
		public vectorInt		targetStatusVec;				//
		public int		trainingTime = 0;				//

		public static void Write(Packet os, SSkillData v)
		{
			os.WriteInt(v.skillID);
			os.WriteString(v.skillName);
			ESkillProgramType.Write(os, v.programType);
			EStatusElementType.Write(os, v.elementType);
			ETargetType.Write(os, v.targetType);
			os.WriteInt(v.mpNeed);
			os.WriteInt(v.prepareTime);
			os.WriteInt(v.timeToMaxPower);
			os.WriteInt(v.incrementDmg);
			os.WriteInt(v.animDuration);
			os.WriteInt(v.coldTime);
			os.WriteInt(v.attackCount);
			os.WriteInt(v.attackTime);
			os.WriteInt(v.attackCoefficient);
			EDamageType.Write(os, v.dmgType);
			os.WriteFloat(v.baseVal);
			os.WriteFloat(v.abilityBonus);
			EAttributeType.Write(os, v.attrType);
			EAttackPosType.Write(os, v.attackPosType);
			EAreaType.Write(os, v.areaType);
			os.WriteFloat(v.areaWidth);
			os.WriteFloat(v.areaLength);
			os.WriteInt(v.level);
			ETalent.Write(os, v.discipline);
			os.WriteInt(v.karma);
			vectorInt.Write(os, v.objectIDVec);
			vectorInt.Write(os, v.selfStatusVec);
			vectorInt.Write(os, v.targetStatusVec);
			os.WriteInt(v.trainingTime);
		}

		public static void Read(Packet ins, out SSkillData v)
		{
			v = new SSkillData();
			v.skillID = ins.ReadInt();
			v.skillName = ins.ReadString();
			ESkillProgramType.Read(ins, out v.programType);
			EStatusElementType.Read(ins, out v.elementType);
			ETargetType.Read(ins, out v.targetType);
			v.mpNeed = ins.ReadInt();
			v.prepareTime = ins.ReadInt();
			v.timeToMaxPower = ins.ReadInt();
			v.incrementDmg = ins.ReadInt();
			v.animDuration = ins.ReadInt();
			v.coldTime = ins.ReadInt();
			v.attackCount = ins.ReadInt();
			v.attackTime = ins.ReadInt();
			v.attackCoefficient = ins.ReadInt();
			EDamageType.Read(ins, out v.dmgType);
			v.baseVal = ins.ReadFloat();
			v.abilityBonus = ins.ReadFloat();
			EAttributeType.Read(ins, out v.attrType);
			EAttackPosType.Read(ins, out v.attackPosType);
			EAreaType.Read(ins, out v.areaType);
			v.areaWidth = ins.ReadFloat();
			v.areaLength = ins.ReadFloat();
			v.level = ins.ReadInt();
			ETalent.Read(ins, out v.discipline);
			v.karma = ins.ReadInt();
			vectorInt.Read(ins, out v.objectIDVec);
			vectorInt.Read(ins, out v.selfStatusVec);
			vectorInt.Read(ins, out v.targetStatusVec);
			v.trainingTime = ins.ReadInt();
		}
	}

	//
	public class SEffectData
	{
		public SEffectData()
		{
			effectD		= 0;
			effectEndStatus		= 0;
		}

		public int		effectD = 0;				//
		public string		effectName = "";				//
		public EEffectType		typeID;				//
		public int		effectEndStatus = 0;				//
		public string		paramValues = "";				//
		public string		des = "";				//

		public static void Write(Packet os, SEffectData v)
		{
			os.WriteInt(v.effectD);
			os.WriteString(v.effectName);
			EEffectType.Write(os, v.typeID);
			os.WriteInt(v.effectEndStatus);
			os.WriteString(v.paramValues);
			os.WriteString(v.des);
		}

		public static void Read(Packet ins, out SEffectData v)
		{
			v = new SEffectData();
			v.effectD = ins.ReadInt();
			v.effectName = ins.ReadString();
			EEffectType.Read(ins, out v.typeID);
			v.effectEndStatus = ins.ReadInt();
			v.paramValues = ins.ReadString();
			v.des = ins.ReadString();
		}
	}

	//effect
	public class vectorEffectData : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorEffectData v)
		{
			os.WriteInt(v.Count);
			foreach (SEffectData m in v)
			{
				SEffectData.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorEffectData v)
		{
			v = new vectorEffectData();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SEffectData m;
				SEffectData.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//status
	public class EStatusEffectType
	{
		public const int eStatusEffectType_None	= 0;		//none
		public const int eStatusEffectType_Stunned	= 300;		//Stunned
		public const int eStatusEffectType_Shocked	= 301;		//Shocked
		public const int eStatusEffectType_Frozen	= 302;		//Frozen
		public const int eStatusEffectType_Slowed	= 303;		//Slowed
		public const int eStatusEffectType_Knockback	= 304;		//Knockback
		public const int eStatusEffectType_Poisioned	= 305;		//Poisioned
		public const int eStatusEffectType_Burning	= 306;		//Burning
		public const int eStatusEffectType_Bloodthirsty	= 307;		//Bloodthirsty
		public const int eStatusEffectType_Fleeing	= 308;		//Fleeing
		public EStatusEffectType()
		{
			_value = 0;
		}

		public EStatusEffectType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EStatusEffectType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EStatusEffectType v)
		{
			v = new EStatusEffectType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eStatusEffectType_None" ;
			case 300:
				return   "eStatusEffectType_Stunned" ;
			case 301:
				return   "eStatusEffectType_Shocked" ;
			case 302:
				return   "eStatusEffectType_Frozen" ;
			case 303:
				return   "eStatusEffectType_Slowed" ;
			case 304:
				return   "eStatusEffectType_Knockback" ;
			case 305:
				return   "eStatusEffectType_Poisioned" ;
			case 306:
				return   "eStatusEffectType_Burning" ;
			case 307:
				return   "eStatusEffectType_Bloodthirsty" ;
			case 308:
				return   "eStatusEffectType_Fleeing" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//
	public class SStatusData
	{
		public SStatusData()
		{
			statusID		= 0;
			objType		= 0;
			createCondition		= 0;
			endCondition		= 0;
		}

		public int		statusID = 0;				//
		public string		statusName = "";				//
		public EStatusType		statusType;				//
		public int		bonus = 0;				//bonues
		public int		duration = 0;				//
		public int		chance = 0;				//
		public int		objType = 0;				//
		public EStatusReplaceType		replaceType;				//
		public int		createCondition = 0;				//
		public int		endCondition = 0;				//
		public vectorInt		effectVec;				//effect Vector
		public string		des = "";				//
		public EStatusEffectType		effectType;				//
		public EStatusElementType		elementType;				//element type

		public static void Write(Packet os, SStatusData v)
		{
			os.WriteInt(v.statusID);
			os.WriteString(v.statusName);
			EStatusType.Write(os, v.statusType);
			os.WriteInt(v.bonus);
			os.WriteInt(v.duration);
			os.WriteInt(v.chance);
			os.WriteInt(v.objType);
			EStatusReplaceType.Write(os, v.replaceType);
			os.WriteInt(v.createCondition);
			os.WriteInt(v.endCondition);
			vectorInt.Write(os, v.effectVec);
			os.WriteString(v.des);
			EStatusEffectType.Write(os, v.effectType);
			EStatusElementType.Write(os, v.elementType);
		}

		public static void Read(Packet ins, out SStatusData v)
		{
			v = new SStatusData();
			v.statusID = ins.ReadInt();
			v.statusName = ins.ReadString();
			EStatusType.Read(ins, out v.statusType);
			v.bonus = ins.ReadInt();
			v.duration = ins.ReadInt();
			v.chance = ins.ReadInt();
			v.objType = ins.ReadInt();
			EStatusReplaceType.Read(ins, out v.replaceType);
			v.createCondition = ins.ReadInt();
			v.endCondition = ins.ReadInt();
			vectorInt.Read(ins, out v.effectVec);
			v.des = ins.ReadString();
			EStatusEffectType.Read(ins, out v.effectType);
			EStatusElementType.Read(ins, out v.elementType);
		}
	}

	//
	public class SGmItemInfo
	{
		public SGmItemInfo()
		{
			ID		= 0;
			count		= 1;
			rent		= false;
			validTime		= 0;
		}

		public int		ID = 0;				//
		public uint		count = 0;				//
		public bool		rent = false;				//
		public int		validTime = 0;				//

		public static void Write(Packet os, SGmItemInfo v)
		{
			os.WriteInt(v.ID);
			os.WriteUint(v.count);
			os.WriteBool(v.rent);
			os.WriteInt(v.validTime);
		}

		public static void Read(Packet ins, out SGmItemInfo v)
		{
			v = new SGmItemInfo();
			v.ID = ins.ReadInt();
			v.count = ins.ReadUint();
			v.rent = ins.ReadBool();
			v.validTime = ins.ReadInt();
		}
	}

	//
	public class vectorGmItemInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorGmItemInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SGmItemInfo m in v)
			{
				SGmItemInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorGmItemInfos v)
		{
			v = new vectorGmItemInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SGmItemInfo m;
				SGmItemInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}

	//
	public class SGmMailInfo
	{
		public SGmMailInfo()
		{
			ticket		= 0;
			token		= 0;
		}

		public string		recvName = "";				//recvName
		public string		title = "";				//title
		public string		content = "";				//content
		public int		ticket = 0;				//coin
		public int		token = 0;				//gold
		public vectorGmItemInfos		itemVec;				//item vector

		public static void Write(Packet os, SGmMailInfo v)
		{
			os.WriteString(v.recvName);
			os.WriteString(v.title);
			os.WriteString(v.content);
			os.WriteInt(v.ticket);
			os.WriteInt(v.token);
			vectorGmItemInfos.Write(os, v.itemVec);
		}

		public static void Read(Packet ins, out SGmMailInfo v)
		{
			v = new SGmMailInfo();
			v.recvName = ins.ReadString();
			v.title = ins.ReadString();
			v.content = ins.ReadString();
			v.ticket = ins.ReadInt();
			v.token = ins.ReadInt();
			vectorGmItemInfos.Read(ins, out v.itemVec);
		}
	}

	//
	public class SCharStatData
	{
		public SCharStatData()
		{
			missionNum		= 0;
			totalKilled		= 0;
			bossKilled		= 0;
			wantedKilled		= 0;
			totalTime		= 0;
		}

		public int		missionNum = 0;				//missionNum
		public int		totalKilled = 0;				//totalKilled
		public int		bossKilled = 0;				//bossKilled
		public int		wantedKilled = 0;				//wantedKilled
		public int		totalTime = 0;				//play time

		public static void Write(Packet os, SCharStatData v)
		{
			os.WriteInt(v.missionNum);
			os.WriteInt(v.totalKilled);
			os.WriteInt(v.bossKilled);
			os.WriteInt(v.wantedKilled);
			os.WriteInt(v.totalTime);
		}

		public static void Read(Packet ins, out SCharStatData v)
		{
			v = new SCharStatData();
			v.missionNum = ins.ReadInt();
			v.totalKilled = ins.ReadInt();
			v.bossKilled = ins.ReadInt();
			v.wantedKilled = ins.ReadInt();
			v.totalTime = ins.ReadInt();
		}
	}

	//unique item
	public class SUniqueItem
	{
		public SUniqueItem()
		{
			typeID		= 0;
			PrefabID		= 0;
			gem		= 0;
			element		= 0;
			enchant		= 0;
			limitCount		= 0;
		}

		public int		typeID = 0;				//TypeID
		public int		PrefabID = 0;				//prefab
		public string		itemName = "";				//item name
		public int		gem = 0;				//gem
		public int		element = 0;				//element
		public int		enchant = 0;				//enchant
		public int		limitCount = 0;				//limitCount

		public static void Write(Packet os, SUniqueItem v)
		{
			os.WriteInt(v.typeID);
			os.WriteInt(v.PrefabID);
			os.WriteString(v.itemName);
			os.WriteInt(v.gem);
			os.WriteInt(v.element);
			os.WriteInt(v.enchant);
			os.WriteInt(v.limitCount);
		}

		public static void Read(Packet ins, out SUniqueItem v)
		{
			v = new SUniqueItem();
			v.typeID = ins.ReadInt();
			v.PrefabID = ins.ReadInt();
			v.itemName = ins.ReadString();
			v.gem = ins.ReadInt();
			v.element = ins.ReadInt();
			v.enchant = ins.ReadInt();
			v.limitCount = ins.ReadInt();
		}
	}

	//EMailType
	public class EMailType
	{
		public const int eMailType_System	= 0;		//System
		public const int eMailType_User	= 1;		//User
		public const int eMailType_Reject	= 2;		//Reject
		public EMailType()
		{
			_value = 0;
		}

		public EMailType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EMailType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EMailType v)
		{
			v = new EMailType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eMailType_System" ;
			case 1:
				return   "eMailType_User" ;
			case 2:
				return   "eMailType_Reject" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//EMailState
	public class EMailState
	{
		public const int eMailState_Unread	= 0;		//Unread
		public const int eMailState_Read	= 1;		//Read
		public const int eMailState_Deleted	= 2;		//Deleted
		public EMailState()
		{
			_value = 0;
		}

		public EMailState(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EMailState v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EMailState v)
		{
			v = new EMailState();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eMailState_Unread" ;
			case 1:
				return   "eMailState_Read" ;
			case 2:
				return   "eMailState_Deleted" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//MailReason
	public class EMailReason
	{
		public const int eMailReason_OK	= 0;		//OK
		public const int eMailReason_PlayerNotExist	= 1;		//PlayerNotExist
		public const int eMailReason_InBlack	= 2;		//InBlack
		public const int eMailReason_RecvFull	= 3;		//RecvFull
		public const int eMailReason_SendFull	= 4;		//SendFull
		public EMailReason()
		{
			_value = 0;
		}

		public EMailReason(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EMailReason v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EMailReason v)
		{
			v = new EMailReason();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eMailReason_OK" ;
			case 1:
				return   "eMailReason_PlayerNotExist" ;
			case 2:
				return   "eMailReason_InBlack" ;
			case 3:
				return   "eMailReason_RecvFull" ;
			case 4:
				return   "eMailReason_SendFull" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	//SMailInfo
	public class SMailInfo
	{
		public SMailInfo()
		{
			id		= 0;
			senderID		= 0;
			recvID		= 0;
			karma		= 0;
			crystal		= 0;
			time		= 0;
			timeout		= 0;
		}

		public int		id = 0;				//id
		public EMailType		type;				//type
		public EMailState		state;				//state
		public int		senderID = 0;				//senderID
		public string		senderName = "";				//senderName
		public int		recvID = 0;				//recvID
		public string		recvName = "";				//recvName
		public string		title = "";				//title
		public string		content = "";				//content
		public int		karma = 0;				//karma
		public int		crystal = 0;				//crystal
		public long		time = 0;				//time
		public long		timeout = 0;				//timeout
		public vectorItemInfos		itemVec;				//item vector
		public vectorInt		petIDVec;				//pet id vector
		public EMailReason		reason;				//reason

		public static void Write(Packet os, SMailInfo v)
		{
			os.WriteInt(v.id);
			EMailType.Write(os, v.type);
			EMailState.Write(os, v.state);
			os.WriteInt(v.senderID);
			os.WriteString(v.senderName);
			os.WriteInt(v.recvID);
			os.WriteString(v.recvName);
			os.WriteString(v.title);
			os.WriteString(v.content);
			os.WriteInt(v.karma);
			os.WriteInt(v.crystal);
			os.WriteLong(v.time);
			os.WriteLong(v.timeout);
			vectorItemInfos.Write(os, v.itemVec);
			vectorInt.Write(os, v.petIDVec);
			EMailReason.Write(os, v.reason);
		}

		public static void Read(Packet ins, out SMailInfo v)
		{
			v = new SMailInfo();
			v.id = ins.ReadInt();
			EMailType.Read(ins, out v.type);
			EMailState.Read(ins, out v.state);
			v.senderID = ins.ReadInt();
			v.senderName = ins.ReadString();
			v.recvID = ins.ReadInt();
			v.recvName = ins.ReadString();
			v.title = ins.ReadString();
			v.content = ins.ReadString();
			v.karma = ins.ReadInt();
			v.crystal = ins.ReadInt();
			v.time = ins.ReadLong();
			v.timeout = ins.ReadLong();
			vectorItemInfos.Read(ins, out v.itemVec);
			vectorInt.Read(ins, out v.petIDVec);
			EMailReason.Read(ins, out v.reason);
		}
	}

	//maiID-mailInfo
	public class mapMailInfos : Dictionary<int, SMailInfo>
	{
		public static void Write(Packet os, mapMailInfos v)
		{
			os.WriteInt(v.Count);
			foreach (KeyValuePair<int, SMailInfo> m in v)
			{
				os.WriteInt(m.Key);
				SMailInfo.Write(os, m.Value);
			}
		}
		public static void Read(Packet ins, out mapMailInfos v)
		{
			v = new mapMailInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				int	tempKey;
				tempKey = ins.ReadInt();

				SMailInfo tempValue;
				SMailInfo.Read(ins, out tempValue);

				v.Add(tempKey, tempValue);
			}
		}
	}

	//vectorMailInfos
	public class vectorMailInfos : System.Collections.ArrayList
	{
		public static void Write(Packet os, vectorMailInfos v)
		{
			os.WriteInt(v.Count);
			foreach (SMailInfo m in v)
			{
				SMailInfo.Write(os, m);
			}
		}
		public static void Read(Packet ins, out vectorMailInfos v)
		{
			v = new vectorMailInfos();
			int count = ins.ReadInt();
			for (int i = 0; i < count; i++)
			{
				SMailInfo m;
				SMailInfo.Read(ins, out m);
				v.Add(m);
			}
		}
	}


