/*=============================================================================
*	Copyright (C) 2006-2011, Zhang Kun. All Rights Reserved.
*	Generated by: ProtocolGen 1.3
=============================================================================*/
//
using System;
//
using System.Threading;
//
using System.Collections.Generic;

	//
	public class EEventDBType
	{
		public const int eEventType_Character	= 0;		//
		public const int eEventType_Account	= 1;		//
		public EEventDBType()
		{
			_value = 0;
		}

		public EEventDBType(int v)
		{
			_value = v;
		}

		public static void Write(Packet ins, EEventDBType v)
		{
			ins.WriteInt(v._value);
		}
		public static void Read(Packet os, out EEventDBType v)
		{
			v = new EEventDBType();
			v._value = os.ReadInt();
		}

		public int Get()
		{
			return _value;
		}

		public void Set(int v)
		{
			_value = v;
		}

	    public  string  GetString( )
	    {
		   switch(_value)
		   {
			case 0:
				return   "eEventType_Character" ;
			case 1:
				return   "eEventType_Account" ;
			default:
			    return   "UnKnownError" ;
		   }
	    }

		int _value;
	};

	public class ProtocolGame_METHOD
	{
	#region ID definitions
		public const int uMethodID_AcceptMission	= 0x2671513a;
		public const int uMethodID_AcceptMissionFail	= 0x5a06c44c;
		public const int uMethodID_AcceptMissionOk	= 0x23e31e2;
		public const int uMethodID_AddExpNTF	= 0x32147f5a;
		public const int uMethodID_AddNewAbilityNotify	= 0x39db31aa;
		public const int uMethodID_AddNewMasteryNotify	= 0x72bad093;
		public const int uMethodID_BroadCastCraftingItemOK 	= 0x212e9bec;
		public const int uMethodID_BuyCharSlotRequest	= 0x239521db;
		public const int uMethodID_BuyCharSlotResult	= 0x2e769d19;
		public const int uMethodID_BuyConsumeItem	= 0x30d43d37;
		public const int uMethodID_BuyConsumeItemSuccAck	= 0x5f3ca0e8;
		public const int uMethodID_BuyItem	= 0x58dbf93f;
		public const int uMethodID_BuyItemFailed	= 0x173a71fc;
		public const int uMethodID_BuyItemSuccAck	= 0x4bbfb540;
		public const int uMethodID_BuyPet	= 0x4fd494e7;
		public const int uMethodID_BuyPetAck	= 0xd3edb3a;
		public const int uMethodID_ChangeCharacterAttribNTF	= 0x42c0dc03;
		public const int uMethodID_ChangeGenderReq	= 0x1b3da913;
		public const int uMethodID_ChangeGenderResult	= 0x7f198b8c;
		public const int uMethodID_ChangeNameReq	= 0x734db755;
		public const int uMethodID_ChangeNameResult	= 0x9e00782;
		public const int uMethodID_ChatFailed	= 0x4f88fe4b;
		public const int uMethodID_ChatRequest	= 0x272d1175;
		public const int uMethodID_ChatRequestAck	= 0x1824fb34;
		public const int uMethodID_ChatResponse	= 0x2ca9aef3;
		public const int uMethodID_CraftingItem 	= 0x316d3259;
		public const int uMethodID_CraftingItemFailed 	= 0x7a4473b0;
		public const int uMethodID_CraftingItemOK 	= 0x51108549;
		public const int uMethodID_DelItem	= 0x25ca37a4;
		public const int uMethodID_DelItemFailed	= 0x732e7c99;
		public const int uMethodID_DeleteMail	= 0x574cf938;
		public const int uMethodID_DeleteMailItem	= 0x5e47601b;
		public const int uMethodID_DeleteMailPet	= 0x1c15e3db;
		public const int uMethodID_DeleteMailResult	= 0x50e4f8b9;
		public const int uMethodID_EquipErrorFailed	= 0x2ab4fe9f;
		public const int uMethodID_EquipItem	= 0x735dc30d;
		public const int uMethodID_GetDayReward	= 0x69d41337;
		public const int uMethodID_GetDayRewardResult	= 0x317566e0;
		public const int uMethodID_GetFriendReward	= 0x460f4251;
		public const int uMethodID_GetGiftAck	= 0x29208115;
		public const int uMethodID_GetGiftReq	= 0x2924f5ba;
		public const int uMethodID_GetLeaderboardInfo	= 0x7dba1753;
		public const int uMethodID_GetMailAll	= 0x3cc4874a;
		public const int uMethodID_GetMailAllItems	= 0x4122465a;
		public const int uMethodID_GetMailAllItemsResult	= 0x360af08b;
		public const int uMethodID_GetMailAllPets	= 0x6af25936;
		public const int uMethodID_GetMailAllResult	= 0x26c54bfb;
		public const int uMethodID_GetMailCrystal	= 0x225817af;
		public const int uMethodID_GetMailCrystalResult	= 0x381d898;
		public const int uMethodID_GetMailItem	= 0x19a5bcd6;
		public const int uMethodID_GetMailItemResult	= 0x686f73a7;
		public const int uMethodID_GetMailKarma	= 0x4062b379;
		public const int uMethodID_GetMailKarmaResult	= 0x414734d2;
		public const int uMethodID_GetMailPet	= 0x3cc87144;
		public const int uMethodID_GetMailPetResult	= 0x94fee5;
		public const int uMethodID_GetPlayerMail	= 0x2488106c;
		public const int uMethodID_GetPlayerMailResult	= 0x41301fcd;
		public const int uMethodID_GetRedeemGift	= 0xc693488;
		public const int uMethodID_GetRedeemGiftResult	= 0x6b5caf89;
		public const int uMethodID_GetWellData	= 0x84618f0;
		public const int uMethodID_GetWellDataResult	= 0x183543b1;
		public const int uMethodID_GetWellKarma	= 0x36be3f7a;
		public const int uMethodID_GetWellKarmaResult	= 0xf577cab;
		public const int uMethodID_LeaveWorld	= 0x26917cc5;
		public const int uMethodID_LevelUp 	= 0x4f3cc0df;
		public const int uMethodID_MaterialMailNotify	= 0x6cae9cf5;
		public const int uMethodID_MissionAreaInfoAck	= 0x3b7de398;
		public const int uMethodID_MissionCompleteNTF	= 0x26549011;
		public const int uMethodID_MissionFailAck	= 0x37187ec9;
		public const int uMethodID_MissionFailReq	= 0x371cf36e;
		public const int uMethodID_MissionFailedNTF	= 0x5113944d;
		public const int uMethodID_MissionListAck	= 0x60d79;
		public const int uMethodID_MissionListReq	= 0xa821e;
		public const int uMethodID_MissionProcessReq	= 0x6bea46f9;
		public const int uMethodID_NewRedeemGift	= 0x566671a;
		public const int uMethodID_NotifyItemDestroy	= 0xf602bc8;
		public const int uMethodID_NotifyItemSwap	= 0x50234afd;
		public const int uMethodID_NotifyItemUpdate	= 0xa69ab9f;
		public const int uMethodID_OpenMail	= 0x5f28d4e7;
		public const int uMethodID_PetRentTimeEndNTF	= 0x799dc100;
		public const int uMethodID_ProcessFriendReward	= 0x453bc86e;
		public const int uMethodID_ProcessRedeemGift	= 0x73d1bffd;
		public const int uMethodID_ProcessRedeemGiftResult	= 0x1ac4bcb6;
		public const int uMethodID_RecvNewMail	= 0x6436a28b;
		public const int uMethodID_ReloadMap 	= 0x3fa4968b;
		public const int uMethodID_RequestBagInfo	= 0x103f2625;
		public const int uMethodID_RequestDayReward	= 0x3bd47c8a;
		public const int uMethodID_RequestDayRewardFailed	= 0x7986258f;
		public const int uMethodID_RequestDayRewardOK	= 0x3710a792;
		public const int uMethodID_RequestPlayerConsumeShopInfo	= 0x4e24fd8a;
		public const int uMethodID_RequestPlayerShopInfo	= 0x1987204e;
		public const int uMethodID_RoleFreePetListNTF	= 0x6d05a30b;
		public const int uMethodID_RoleMasteryListAck	= 0x60327ed0;
		public const int uMethodID_RoleMasteryListReq	= 0x6036f375;
		public const int uMethodID_RolePetListAck	= 0x1362fc70;
		public const int uMethodID_RolePetListReq	= 0x13677115;
		public const int uMethodID_SaleItem	= 0x68671bdc;
		public const int uMethodID_SaleItemFailed	= 0x7749d811;
		public const int uMethodID_SelectDayRewardNTF	= 0x6b4efbab;
		public const int uMethodID_SendBagInfo	= 0x79d003d4;
		public const int uMethodID_SendFriendRewardInfo	= 0x68f84591;
		public const int uMethodID_SendMail	= 0x2130aaa1;
		public const int uMethodID_SendMailResult	= 0x7e52edba;
		public const int uMethodID_SendMissionProcess	= 0x6a572951;
		public const int uMethodID_SendShopConsumeIteminfo	= 0x8b9884d;
		public const int uMethodID_SendShopIteminfo	= 0x1ec3c8fd;
		public const int uMethodID_SendShopRareitemTrackInfo	= 0x37bbf3a8;
		public const int uMethodID_SendSkillInfo	= 0x32ed0165;
		public const int uMethodID_ServerSystemTimeNotify	= 0x5f8961be;
		public const int uMethodID_SpeedUpCoolDown	= 0x4864d33;
		public const int uMethodID_SpeedUpCoolDownResult	= 0x3cdc217c;
		public const int uMethodID_SplitItem	= 0x46d93073;
		public const int uMethodID_SplitItemFailed	= 0x1572b910;
		public const int uMethodID_StudyAbility	= 0x7f2b6d23;
		public const int uMethodID_StudyAbilityFailed	= 0x1046ba40;
		public const int uMethodID_StudyAbilitySucceed	= 0x3d121e4f;
		public const int uMethodID_SwapItem	= 0x6228180c;
		public const int uMethodID_SwapItemFailed	= 0x1df0acc1;
		public const int uMethodID_TutorialEnterAck	= 0x21156da9;
		public const int uMethodID_TutorialEnterReq	= 0x2119e24e;
		public const int uMethodID_UnEquipErrorFailed	= 0x43c8227c;
		public const int uMethodID_UnequipItem	= 0x62488be4;
		public const int uMethodID_UpdateBadge	= 0x3381131c;
		public const int uMethodID_UpdateBaseAttr	= 0x208eaf25;
		public const int uMethodID_UpdateCacheMoneyInfo 	= 0x6c6c2bfd;
		public const int uMethodID_UpdateCharStatData	= 0x60142937;
		public const int uMethodID_UpdateCoolDown	= 0x6ed5ea2;
		public const int uMethodID_UpdateElementAttr	= 0xc80f536;
		public const int uMethodID_UpdateElementChance	= 0x528d3069;
		public const int uMethodID_UpdateEvent	= 0x6afada73;
		public const int uMethodID_UpdateJoule 	= 0x2f3791f2;
		public const int uMethodID_UpdateLeaderboardInfo	= 0x1a864980;
		public const int uMethodID_UpdateMoneyInfo 	= 0x325af991;
		public const int uMethodID_UpdateReviveNum	= 0x44223cd2;
		public const int uMethodID_UpdateTutorialInfo	= 0x37d29a47;
		public const int uMethodID_UpgradeWell	= 0x6cb9f2d0;
		public const int uMethodID_UpgradeWellResult	= 0x61139291;
		public const int uMethodID_UserCharacterInfo	= 0x7e535d9e;
		public const int uMethodID_UserCreateAccountCharacter	= 0x2c75d66d;
		public const int uMethodID_UserCreateCharacter	= 0x4a7e8568;
		public const int uMethodID_UserCreateCharacterFailed	= 0x1d6213bd;
		public const int uMethodID_UserCreateCharacterOK	= 0x3b5d1160;
		public const int uMethodID_UserDelCharacter	= 0x40213e67;
		public const int uMethodID_UserDelCharacterResult	= 0x59651290;
		public const int uMethodID_UserLogin	= 0xce102e4;
		public const int uMethodID_UserLoginFailed	= 0x751085d9;
		public const int uMethodID_UserLoginOK	= 0x57aaeebc;
		public const int uMethodID_UserLogout	= 0x172610eb;
		public const int uMethodID_UserReconnect	= 0x5469770e;
		public const int uMethodID_UserReconnectNotify	= 0x569f4c9f;
		public const int uMethodID_UserSelectCharacter	= 0x453c0ad8;
		public const int uMethodID_UserSelectCharacterFailed	= 0x6fb2ffad;
		public const int uMethodID_UserSelectCharacterOK	= 0x25f31250;
		public const int uMethodID_YouCheat 	= 0x1b96589a;
		public const int uMethodID_assignTalentAck	= 0x284f6904;
		public const int uMethodID_assignTalentReq	= 0x2853dda9;
		public const int uMethodID_branchCompleteNTF	= 0x4db32f63;
		public const int uMethodID_buyAllAreaByKarmaAck	= 0x5ce7ef36;
		public const int uMethodID_buyAllAreaByKarmaReq	= 0x5cec63db;
		public const int uMethodID_buyStash	= 0x14d0a31d;
		public const int uMethodID_buyStashAck	= 0x54db3ec;
		public const int uMethodID_buyThreatLevelByKarma	= 0x3e35273;
		public const int uMethodID_buyThreatLevelByKarmaAck	= 0x2dc6bafe;
		public const int uMethodID_choosePet	= 0x121a7bce;
		public const int uMethodID_choosePetAck	= 0x5eb32417;
		public const int uMethodID_conversationNpcCheckAck	= 0xb3829a5;
		public const int uMethodID_conversationNpcCheckReq	= 0xb3c9e4a;
		public const int uMethodID_decreaseCoolDown	= 0x17c116df;
		public const int uMethodID_decreaseCoolDownAck	= 0x7f792462;
		public const int uMethodID_exploretaskcompleteAck	= 0x2919fdaa;
		public const int uMethodID_exploretaskcompleteReq	= 0x291e724f;
		public const int uMethodID_hasAssignedTalentPointAck	= 0x7aac232b;
		public const int uMethodID_hasAssignedTalentPointReq	= 0x7ab097d0;
		public const int uMethodID_masteryLvlupAck	= 0x30826725;
		public const int uMethodID_masteryLvlupReq	= 0x3086dbca;
		public const int uMethodID_missionShopNTF	= 0x34359f48;
		public const int uMethodID_pingRequest	= 0x4417ca2b;
		public const int uMethodID_pingRequestAck	= 0x3bfd8f66;
		public const int uMethodID_protecttaskBeginReq	= 0x614b1783;
		public const int uMethodID_protecttaskEndReq	= 0x6d99ca21;
		public const int uMethodID_roleAttribReq	= 0x27a7fc3c;
		public const int uMethodID_taskCompleteNTF	= 0x55cecf90;
		public const int uMethodID_unLockAreaAck	= 0x12615092;
		public const int uMethodID_unLockAreaReq	= 0x1265c537;
		public const int uMethodID_useItem	= 0x2563040;
	#endregion
	}

	public class ProtocolGame_SendRequest
	{

		//
		// Param : account	
		// Param : userType	userType
		// Param : clientType	clientType
		// Param : password	password
		// Param : tocken	tocken
		public static Packet UserLogin(string account, EUserType userType, EClientType clientType, string password, string tocken)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UserLogin);
			stream.WriteString(account);
			EUserType.Write(stream, userType);
			EClientType.Write(stream, clientType);
			stream.WriteString(password);
			stream.WriteString(tocken);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet UserLogout()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UserLogout);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : isReconnect	
		public static Packet UserReconnect(bool isReconnect)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UserReconnect);
			stream.WriteBool(isReconnect);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : characterID	
		public static Packet UserSelectCharacter(int characterID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UserSelectCharacter);
			stream.WriteInt(characterID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : createdata	SCharacterCreationData
		public static Packet UserCreateCharacter(SCharacterCreationData createdata)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UserCreateCharacter);
			SCharacterCreationData.Write(stream, createdata);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : accountInfo	
		public static Packet UserCreateAccountCharacter(SAccountCreationData accountInfo)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UserCreateAccountCharacter);
			SAccountCreationData.Write(stream, accountInfo);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : characterID	
		public static Packet UserDelCharacter(int characterID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UserDelCharacter);
			stream.WriteInt(characterID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet BuyCharSlotRequest()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_BuyCharSlotRequest);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet LeaveWorld()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_LeaveWorld);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//reload map data
		// Param : mapNameVec	level name vector
		public static Packet ReloadMap (vectorString mapNameVec)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_ReloadMap );
			vectorString.Write(stream, mapNameVec);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet roleAttribReq()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_roleAttribReq);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//change name request
		// Param : charID	char id
		// Param : newName	new name
		public static Packet ChangeNameReq(int charID, string newName)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_ChangeNameReq);
			stream.WriteInt(charID);
			stream.WriteString(newName);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//change gender request
		// Param : charID	char id
		// Param : sex	gender
		public static Packet ChangeGenderReq(int charID, int sex)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_ChangeGenderReq);
			stream.WriteInt(charID);
			stream.WriteInt(sex);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet RequestBagInfo()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_RequestBagInfo);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//buy item
		// Param : isRare	
		// Param : info	item info
		public static Packet BuyItem(bool isRare, SBuyitemInfo info)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_BuyItem);
			stream.WriteBool(isRare);
			SBuyitemInfo.Write(stream, info);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//buy consume item
		// Param : consumeItemType	1: material 2: 
		// Param : itemID	item id
		// Param : buyCount	
		public static Packet BuyConsumeItem(int consumeItemType, int itemID, int buyCount)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_BuyConsumeItem);
			stream.WriteInt(consumeItemType);
			stream.WriteInt(itemID);
			stream.WriteInt(buyCount);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//SaleItem
		// Param : bagID	bagID
		// Param : slot	slot
		public static Packet SaleItem(byte bagID, uint slot)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_SaleItem);
			stream.WriteByte(bagID);
			stream.WriteUint(slot);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : bagID	bagID
		// Param : srcslot	
		// Param : dstslot	
		// Param : count	
		public static Packet SplitItem(byte bagID, uint srcslot, uint dstslot, uint count)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_SplitItem);
			stream.WriteByte(bagID);
			stream.WriteUint(srcslot);
			stream.WriteUint(dstslot);
			stream.WriteUint(count);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : srcbagID	srcbagID
		// Param : srcslot	
		// Param : dstbagID	dstbagID
		// Param : dstslot	
		public static Packet SwapItem(byte srcbagID, uint srcslot, byte dstbagID, uint dstslot)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_SwapItem);
			stream.WriteByte(srcbagID);
			stream.WriteUint(srcslot);
			stream.WriteByte(dstbagID);
			stream.WriteUint(dstslot);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : bagID	bagID
		// Param : slot	slot
		public static Packet DelItem(byte bagID, uint slot)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_DelItem);
			stream.WriteByte(bagID);
			stream.WriteUint(slot);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : part	
		// Param : bagID	bagID
		// Param : slot	slot
		public static Packet EquipItem(byte part, byte bagID, uint slot)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_EquipItem);
			stream.WriteByte(part);
			stream.WriteByte(bagID);
			stream.WriteUint(slot);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : part	
		// Param : bagID	bagID
		// Param : slot	slot
		public static Packet UnequipItem(byte part, byte bagID, uint slot)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UnequipItem);
			stream.WriteByte(part);
			stream.WriteByte(bagID);
			stream.WriteUint(slot);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : bagID	bagID
		// Param : slot	slot
		public static Packet useItem(byte bagID, uint slot)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_useItem);
			stream.WriteByte(bagID);
			stream.WriteUint(slot);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet RequestDayReward()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_RequestDayReward);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet GetDayReward()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetDayReward);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : isRare	
		public static Packet RequestPlayerShopInfo(bool isRare)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_RequestPlayerShopInfo);
			stream.WriteBool(isRare);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : shopType	1: material
		public static Packet RequestPlayerConsumeShopInfo(int shopType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_RequestPlayerConsumeShopInfo);
			stream.WriteInt(shopType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//Get leaderboard
		// Param : leaderboardType	
		public static Packet GetLeaderboardInfo(ELeaderboardType leaderboardType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetLeaderboardInfo);
			ELeaderboardType.Write(stream, leaderboardType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//request gift
		// Param : key	key of gift
		public static Packet GetGiftReq(string key)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetGiftReq);
			stream.WriteString(key);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//request redeem gift
		public static Packet GetRedeemGift()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetRedeemGift);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//process redeem gift
		// Param : redeemCode	redeem code
		public static Packet ProcessRedeemGift(string redeemCode)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_ProcessRedeemGift);
			stream.WriteString(redeemCode);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : chatType	
		// Param : targetID	
		// Param : itemID	
		// Param : chatMsg	
		public static Packet ChatRequest(EChatType chatType, int targetID, int itemID, string chatMsg)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_ChatRequest);
			EChatType.Write(stream, chatType);
			stream.WriteInt(targetID);
			stream.WriteInt(itemID);
			stream.WriteString(chatMsg);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : npcID	npc ID
		// Param : abilityID	
		// Param : moneyType	moneyType
		public static Packet StudyAbility(int npcID, int abilityID, EMoneyType moneyType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_StudyAbility);
			stream.WriteInt(npcID);
			stream.WriteInt(abilityID);
			EMoneyType.Write(stream, moneyType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : npcID	npc ID
		// Param : missionID	
		public static Packet AcceptMission(int npcID, int missionID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_AcceptMission);
			stream.WriteInt(npcID);
			stream.WriteInt(missionID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet MissionListReq()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_MissionListReq);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : MisssionID	
		// Param : taskid	task id
		// Param : trackType	track type
		// Param : objectID	objectID
		// Param : NpcID	NPC ID
		public static Packet conversationNpcCheckReq(int MisssionID, int taskid, int trackType, int objectID, int NpcID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_conversationNpcCheckReq);
			stream.WriteInt(MisssionID);
			stream.WriteInt(taskid);
			stream.WriteInt(trackType);
			stream.WriteInt(objectID);
			stream.WriteInt(NpcID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : missionID	mission ID
		// Param : branchID	branch id
		// Param : taskid	task ID
		// Param : trackType	track type
		// Param : objectID	objectID
		public static Packet exploretaskcompleteReq(int missionID, int branchID, int taskid, int trackType, int objectID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_exploretaskcompleteReq);
			stream.WriteInt(missionID);
			stream.WriteInt(branchID);
			stream.WriteInt(taskid);
			stream.WriteInt(trackType);
			stream.WriteInt(objectID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : missionID	mission ID
		// Param : BranchID	branch ID
		// Param : taskid	task ID
		// Param : trackType	track type
		// Param : objectID	npc id
		public static Packet protecttaskBeginReq(int missionID, int BranchID, int taskid, int trackType, int objectID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_protecttaskBeginReq);
			stream.WriteInt(missionID);
			stream.WriteInt(BranchID);
			stream.WriteInt(taskid);
			stream.WriteInt(trackType);
			stream.WriteInt(objectID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : missionID	mission ID
		// Param : BranchID	branch ID
		// Param : taskid	task ID
		// Param : trackType	track type
		// Param : objectID	npc id
		public static Packet protecttaskEndReq(int missionID, int BranchID, int taskid, int trackType, int objectID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_protecttaskEndReq);
			stream.WriteInt(missionID);
			stream.WriteInt(BranchID);
			stream.WriteInt(taskid);
			stream.WriteInt(trackType);
			stream.WriteInt(objectID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : missionID	mission ID
		public static Packet MissionFailReq(int missionID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_MissionFailReq);
			stream.WriteInt(missionID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet MissionProcessReq()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_MissionProcessReq);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : areaID	
		public static Packet unLockAreaReq(int areaID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_unLockAreaReq);
			stream.WriteInt(areaID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : missionID	
		// Param : AddOrSub	1: sub threat level  2: add threat level
		public static Packet buyThreatLevelByKarma(int missionID, int AddOrSub)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_buyThreatLevelByKarma);
			stream.WriteInt(missionID);
			stream.WriteInt(AddOrSub);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : missionID	MISSIONID
		// Param : bType	
		public static Packet decreaseCoolDown(int missionID, int bType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_decreaseCoolDown);
			stream.WriteInt(missionID);
			stream.WriteInt(bType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet buyAllAreaByKarmaReq()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_buyAllAreaByKarmaReq);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet RolePetListReq()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_RolePetListReq);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : PetID	
		// Param : Num	
		public static Packet BuyPet(int PetID, int Num)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_BuyPet);
			stream.WriteInt(PetID);
			stream.WriteInt(Num);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param :  PetID	
		public static Packet choosePet(int  PetID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_choosePet);
			stream.WriteInt( PetID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : talent1	
		// Param : talent2	
		// Param : talent3	
		public static Packet assignTalentReq(int talent1, int talent2, int talent3)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_assignTalentReq);
			stream.WriteInt(talent1);
			stream.WriteInt(talent2);
			stream.WriteInt(talent3);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet hasAssignedTalentPointReq()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_hasAssignedTalentPointReq);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : cooldownType	cooldown type
		// Param : id	id
		// Param : decreaseCooldownType	decrease cooldown type
		public static Packet SpeedUpCoolDown(ECooldownType cooldownType, int id, EDecreaseCooldownType decreaseCooldownType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_SpeedUpCoolDown);
			ECooldownType.Write(stream, cooldownType);
			stream.WriteInt(id);
			EDecreaseCooldownType.Write(stream, decreaseCooldownType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//crafting item
		// Param : bagID	bagID
		// Param : itemslot	
		// Param : craftType	craft type
		// Param : moneyType	money type
		// Param : craftID	craft id
		// Param : materialMap	material map
		// Param : buyMaterial	
		public static Packet CraftingItem (byte bagID, uint itemslot, ECraftType craftType, EMoneyType moneyType, int craftID, mapCraftMaterial materialMap, bool buyMaterial)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_CraftingItem );
			stream.WriteByte(bagID);
			stream.WriteUint(itemslot);
			ECraftType.Write(stream, craftType);
			EMoneyType.Write(stream, moneyType);
			stream.WriteInt(craftID);
			mapCraftMaterial.Write(stream, materialMap);
			stream.WriteBool(buyMaterial);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//mastery level up
		// Param : masteryType	masteryType
		public static Packet masteryLvlupReq(EMasteryType masteryType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_masteryLvlupReq);
			EMasteryType.Write(stream, masteryType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		public static Packet RoleMasteryListReq()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_RoleMasteryListReq);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//process friend reward
		public static Packet ProcessFriendReward()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_ProcessFriendReward);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//Get friend reward
		public static Packet GetFriendReward()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetFriendReward);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//tutorialReq
		// Param : charID	char id
		public static Packet TutorialEnterReq(int charID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_TutorialEnterReq);
			stream.WriteInt(charID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//pingRequest
		public static Packet pingRequest()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_pingRequest);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//update event
		// Param : eventDBType	event db type
		// Param : eventID	event ID
		// Param : eventData	event data
		public static Packet UpdateEvent(EEventDBType eventDBType, int eventID, string eventData)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UpdateEvent);
			EEventDBType.Write(stream, eventDBType);
			stream.WriteInt(eventID);
			stream.WriteString(eventData);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//get well data
		public static Packet GetWellData()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetWellData);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//upgrade well
		// Param : wellType	well type
		public static Packet UpgradeWell(EWellType wellType)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_UpgradeWell);
			EWellType.Write(stream, wellType);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//get well karma
		public static Packet GetWellKarma()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetWellKarma);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//buy stash
		public static Packet buyStash()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_buyStash);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailInfo	
		// Param : itemSlotVec	slot vector
		public static Packet SendMail(SMailInfo mailInfo, vectorInt itemSlotVec)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_SendMail);
			SMailInfo.Write(stream, mailInfo);
			vectorInt.Write(stream, itemSlotVec);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//DeleteMail
		// Param : mailID	id
		public static Packet DeleteMail(int mailID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_DeleteMail);
			stream.WriteInt(mailID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailID	
		public static Packet OpenMail(int mailID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_OpenMail);
			stream.WriteInt(mailID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailID	
		public static Packet GetMailKarma(int mailID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetMailKarma);
			stream.WriteInt(mailID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailID	
		public static Packet GetMailCrystal(int mailID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetMailCrystal);
			stream.WriteInt(mailID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailID	mail ID
		// Param : itemSlotID	mail item slot ID
		public static Packet DeleteMailItem(int mailID, int itemSlotID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_DeleteMailItem);
			stream.WriteInt(mailID);
			stream.WriteInt(itemSlotID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailID	mail ID
		// Param : itemSlotID	mail item slot ID
		public static Packet GetMailItem(int mailID, int itemSlotID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetMailItem);
			stream.WriteInt(mailID);
			stream.WriteInt(itemSlotID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//GetMailAllItem
		// Param : mailID	mail ID
		public static Packet GetMailAllItems(int mailID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetMailAllItems);
			stream.WriteInt(mailID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailID	mail ID
		// Param : petSlotID	mail pet slot ID
		public static Packet GetMailPet(int mailID, int petSlotID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetMailPet);
			stream.WriteInt(mailID);
			stream.WriteInt(petSlotID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//GetMailAllPet
		// Param : mailID	mail ID
		public static Packet GetMailAllPets(int mailID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetMailAllPets);
			stream.WriteInt(mailID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//
		// Param : mailID	mail ID
		// Param : petSlotID	mail pet slot ID
		public static Packet DeleteMailPet(int mailID, int petSlotID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_DeleteMailPet);
			stream.WriteInt(mailID);
			stream.WriteInt(petSlotID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//GetMailAll(Item,pet,money)
		// Param : mailID	mail ID
		public static Packet GetMailAll(int mailID)
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetMailAll);
			stream.WriteInt(mailID);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}

		//Get player mail
		public static Packet GetPlayerMail()
		{
			Packet stream = new Packet();
			int size = 0;
			stream.WriteInt(size);
			short type = 0;
			stream.WriteShort(type);

			stream.WriteInt(ProtocolGame_METHOD.uMethodID_GetPlayerMail);

			size = stream.get_used_size() - 6;
			stream.Patch(size, 0);

			return stream;
		}
	};

	public interface ProtocolGame_ICallbackReceiver
	{
	#region Requests

		//
		// Param : reconnected	
		// Param : accountInfo	account
		// Param : characterDataList	
		void On_UserLoginOK(bool reconnected, SAccountInfo accountInfo, vectorCharacterInfoLogins characterDataList);

		//
		// Param : error	
		void On_UserLoginFailed(EServerErrorType error);

		//
		// Param : charName	char name
		// Param : missionName	mission name
		void On_UserReconnectNotify(string charName, string missionName);

		//
		// Param : characterInfo	
		void On_UserCreateCharacterOK(SCharacterInfoLogin characterInfo);

		//
		// Param : error	
		void On_UserCreateCharacterFailed(EServerErrorType error);

		//
		// Param : characterData	
		// Param : attrVec	
		void On_UserSelectCharacterOK(SCharacterInfoBasic characterData, vectorAttrChange attrVec);

		//
		// Param : error	
		void On_UserSelectCharacterFailed(EServerErrorType error);

		//
		// Param : characterID	characterID
		// Param : error	error type
		void On_UserDelCharacterResult(int characterID, EServerErrorType error);

		//
		// Param : result	result
		void On_BuyCharSlotResult(EServerErrorType result);

		//
		// Param : attrVec	
		void On_ChangeCharacterAttribNTF(vectorAttrChange attrVec);

		//
		// Param : money	
		void On_UpdateMoneyInfo (SMoneyInfo money);

		//
		// Param : money	
		void On_UpdateCacheMoneyInfo (SMoneyInfo money);

		//
		// Param : istutorial	tutorial
		void On_UpdateTutorialInfo(bool istutorial);

		//update joule
		// Param : joule	joule
		void On_UpdateJoule (ulong joule);

		//
		// Param : catolog	1
		// Param : val	
		void On_AddExpNTF(int catolog, ulong val);

		//level up
		// Param : level	current level
		// Param : catolog	
		void On_LevelUp (int level, int catolog);

		//cheat
		void On_YouCheat ();

		//leaderboard
		// Param : leaderboardType	
		// Param : leaderboardInfo	
		// Param : isClientGet	
		void On_UpdateLeaderboardInfo(ELeaderboardType leaderboardType, SLeaderboardTable leaderboardInfo, bool isClientGet);

		//
		// Param : characterData	
		void On_UserCharacterInfo(SCharacterInfoBasic characterData);

		//
		// Param : skillInfo	
		void On_SendSkillInfo(SPlayerSkillInfo skillInfo);

		//friend reward
		// Param : rewardInfo	friend reward
		void On_SendFriendRewardInfo(mapFriendHireReward rewardInfo);

		//update base attributes
		// Param : attrVec	base attr vec
		void On_UpdateBaseAttr(vectorAttrChange attrVec);

		//update char stat data
		// Param : statData	stat data
		void On_UpdateCharStatData(SCharStatData statData);

		//change name result
		// Param : charID	char id
		// Param : newName	new name
		// Param : result	result
		void On_ChangeNameResult(int charID, string newName, EServerErrorType result);

		//change gender result
		// Param : charID	char id
		// Param : sex	gender
		// Param : result	result
		void On_ChangeGenderResult(int charID, int sex, EServerErrorType result);

		//
		// Param : baggroupinfo	
		void On_SendBagInfo(SBagGroup baggroupinfo);

		//
		// Param : isUpdateIn12	
		// Param : vectorShopItem	
		void On_SendShopIteminfo(bool isUpdateIn12, vectorShopItemInfos vectorShopItem);

		//
		// Param : isUpdateIn12	
		// Param : shopType	
		// Param : vectorShopConsumeItem	
		void On_SendShopConsumeIteminfo(bool isUpdateIn12, int shopType, vectorShopConsumeItemInfos vectorShopConsumeItem);

		//
		// Param : isUpdateIn12	
		// Param : vectorShopItem	
		// Param : wDay	
		void On_SendShopRareitemTrackInfo(bool isUpdateIn12, vectorShopItemInfos vectorShopItem, int wDay);

		//
		// Param : isRare	
		// Param : info	item info
		void On_BuyItemSuccAck(int isRare, SBuyitemInfo info);

		//
		// Param : itemType	1: material 2: 
		// Param : itemID	itemID
		// Param : buycount	buy count
		void On_BuyConsumeItemSuccAck(int itemType, int itemID, int buycount);

		//
		// Param : reason	
		void On_BuyItemFailed(EServerErrorType reason);

		//update revive num
		// Param : num	
		void On_UpdateReviveNum(int num);

		//
		// Param : reason	
		void On_SaleItemFailed(EServerErrorType reason);

		//
		// Param : reason	
		void On_SplitItemFailed(EServerErrorType reason);

		//
		// Param : reason	
		void On_SwapItemFailed(EServerErrorType reason);

		//
		// Param : reason	
		void On_DelItemFailed(EServerErrorType reason);

		//notify swap item
		// Param : srcbagID	bagID
		// Param : srcslot	srcslot
		// Param : dstbagID	bagID
		// Param : dstslot	dstslot
		void On_NotifyItemSwap(byte srcbagID, uint srcslot, byte dstbagID, uint dstslot);

		//
		// Param : bagID	bag ID
		// Param : iteminfo	
		void On_NotifyItemUpdate(byte bagID, SItemInfo iteminfo);

		//
		// Param : bagID	bag ID
		// Param : slot	
		void On_NotifyItemDestroy(byte bagID, uint slot);

		//
		// Param : reason	
		void On_EquipErrorFailed(EServerErrorType reason);

		//
		// Param : reason	
		void On_UnEquipErrorFailed(EServerErrorType reason);

		//
		// Param : reward	bag ID
		void On_RequestDayRewardOK(SDayReward reward);

		//
		// Param : reason	
		void On_RequestDayRewardFailed(EServerErrorType reason);

		//
		// Param : reason	
		void On_GetDayRewardResult(EServerErrorType reason);

		//
		// Param : DayRewardNum	num 1, 2,3, 4
		void On_SelectDayRewardNTF(int DayRewardNum);

		//
		// Param : chatType	
		// Param : senderID	
		// Param : senderName	
		// Param : chatMsg	
		void On_ChatResponse(EChatType chatType, int senderID, string senderName, string chatMsg);

		//
		// Param : reason	
		void On_ChatFailed(EServerErrorType reason);

		//
		// Param : npcID	npc ID
		// Param : abilityID	
		void On_StudyAbilitySucceed(int npcID, int abilityID);

		//
		// Param : errType	error
		// Param : npcID	npc ID
		// Param : abilityID	
		void On_StudyAbilityFailed(EServerErrorType errType, int npcID, int abilityID);

		//
		// Param : abilityID	
		void On_AddNewAbilityNotify(int abilityID);

		//request gift result
		// Param : gift	gift
		// Param : result	result
		void On_GetGiftAck(SGift gift, EServerErrorType result);

		//new redeem gift
		// Param : gift	new gift
		void On_NewRedeemGift(SRedeemGift gift);

		//request redeem gift result
		// Param : giftMap	gift map
		void On_GetRedeemGiftResult(mapRedeemGift giftMap);

		//process redeem gift result
		// Param : gift	gift
		// Param : result	result
		void On_ProcessRedeemGiftResult(SRedeemGift gift, EServerErrorType result);

		//
		// Param : returnCode	1:
		void On_AcceptMissionOk(int returnCode);

		//
		// Param : returnCode	
		void On_AcceptMissionFail(int returnCode);

		//
		// Param : MisssionID	
		// Param : branchID	branchID
		// Param : taskID	task ID
		// Param : exp	
		// Param : karma	
		void On_taskCompleteNTF(int MisssionID, int branchID, int taskID, int exp, int karma);

		//
		// Param : MisssionID	
		// Param : branchID	branchID
		// Param : taskID	task ID
		// Param : exp	
		// Param : karma	
		void On_branchCompleteNTF(int MisssionID, int branchID, int taskID, int exp, int karma);

		//
		// Param : MisssionID	
		// Param : exp	
		// Param : karma	
		void On_MissionCompleteNTF(int MisssionID, int exp, int karma);

		//
		// Param : SAcceptMissionRelateVec	
		void On_MissionListAck(vectorSAcceptMissionRelate SAcceptMissionRelateVec);

		//
		// Param : SMissionAreaRelateVec	mission relate
		void On_MissionAreaInfoAck(vectorSMissionAreaRelate SMissionAreaRelateVec);

		//
		// Param : MisssionID	
		// Param : reason	
		void On_MissionFailedNTF(int MisssionID, EServerErrorType reason);

		//
		// Param : MisssionID	
		// Param : taskid	task id
		// Param : trackType	track type
		// Param : objectID	objectID
		// Param : NpcID	NPC ID
		// Param : reason	
		void On_conversationNpcCheckAck(int MisssionID, int taskid, int trackType, int objectID, int NpcID, EServerErrorType reason);

		//
		// Param : missionID	mission ID
		// Param : taskid	task ID
		// Param : trackType	track type
		// Param : objectID	objectID
		// Param : reason	
		void On_exploretaskcompleteAck(int missionID, int taskid, int trackType, int objectID, EServerErrorType reason);

		//badgeNum
		// Param : badgeNum	badgeNum
		void On_UpdateBadge(int badgeNum);

		//UpdateElementAttr
		// Param : elementAtrrVec	element attr vec
		void On_UpdateElementAttr(vectorElementValue elementAtrrVec);

		//UpdateElementChance
		// Param : elementAtrrVec	element chance vec
		void On_UpdateElementChance(vectorElementValue elementAtrrVec);

		//
		// Param : missionID	mission ID
		// Param : returnCode	
		void On_MissionFailAck(int missionID, int returnCode);

		//
		// Param : missionProcess	mission process
		void On_SendMissionProcess(SMissionProcess missionProcess);

		//
		// Param : areaID	
		// Param : returnCode	
		void On_unLockAreaAck(int areaID, EServerErrorType returnCode);

		//
		// Param : returnCode	
		// Param : missionID	
		// Param : subOrAdd	1: sub threat level  2: add threat level
		// Param : nextThreatTime	
		void On_buyThreatLevelByKarmaAck(EServerErrorType returnCode, int missionID, int subOrAdd, int nextThreatTime);

		//
		// Param : returnCode	
		void On_buyAllAreaByKarmaAck(EServerErrorType returnCode);

		//
		// Param : returnCode	
		// Param : missionID	MISSIONID
		// Param : bType	
		void On_decreaseCoolDownAck(EServerErrorType returnCode, int missionID, int bType);

		//mission shop item
		// Param : missionShopItemVec	shop item list
		void On_missionShopNTF(vectorShopItemInfos missionShopItemVec);

		//
		// Param : PetID	
		// Param : Num	
		// Param : reason	
		void On_BuyPetAck(int PetID, int Num, EServerErrorType reason);

		//
		// Param :  PetID	
		// Param : reason	
		void On_choosePetAck(int  PetID, EServerErrorType reason);

		//
		// Param : petInfoVec	
		void On_RolePetListAck(vectorSPetInfo petInfoVec);

		//
		// Param : freePetInfoVec	
		void On_RoleFreePetListNTF(vectorInt freePetInfoVec);

		//
		// Param : PetID	
		void On_PetRentTimeEndNTF(int PetID);

		//
		// Param : reason	
		void On_assignTalentAck(EServerErrorType reason);

		//
		// Param : prowess	prowess
		// Param : fortitude	fortitude
		// Param : cunning	cunning
		// Param : leftTalentPoint	left talent point
		void On_hasAssignedTalentPointAck(int prowess, int fortitude, int cunning, int leftTalentPoint);

		//crafting item Ok
		// Param : bagID	bagID
		// Param : itemSlot	itemSlot
		// Param : iteminfo	item info
		void On_CraftingItemOK (byte bagID, byte itemSlot, SItemInfo iteminfo);

		//crafting item Failed
		// Param : reason	reason
		void On_CraftingItemFailed (EServerErrorType reason);

		//crafting item Ok
		// Param : charID	charID
		// Param : nickname	nickname
		// Param : iteminfo	item info
		void On_BroadCastCraftingItemOK (int charID, string nickname, SItemShowInfo iteminfo);

		//mastery level up ack
		// Param : masteryType	masteryType
		// Param : returnCode	
		void On_masteryLvlupAck(EMasteryType masteryType, EServerErrorType returnCode);

		//
		// Param : MasteryLevelInfoVec	vectorMasteryLevelInfo
		void On_RoleMasteryListAck(vectorMasteryLevelInfo MasteryLevelInfoVec);

		//
		// Param : masteryID	ID
		void On_AddNewMasteryNotify(int masteryID);

		//
		// Param : chatType	
		// Param : targetID	
		// Param : itemID	
		// Param : chatMsg	
		// Param : eReturncode	eGS_ChatCmdError
		void On_ChatRequestAck(EChatType chatType, int targetID, int itemID, string chatMsg, int eReturncode);

		//
		// Param : charID	char id
		// Param : returnCode	
		void On_TutorialEnterAck(int charID, int returnCode);

		//pingRequestAck
		void On_pingRequestAck();

		//
		// Param : cooldownType	cooldown type
		// Param : id	id
		// Param : targetTime	
		void On_UpdateCoolDown(ECooldownType cooldownType, int id, long targetTime);

		//speed up cooldown result
		// Param : result	result
		// Param : cooldownType	cooldown type
		// Param : id	id
		// Param : targetTime	
		void On_SpeedUpCoolDownResult(EServerErrorType result, ECooldownType cooldownType, int id, long targetTime);

		//get well data result
		// Param : wellData	well data
		// Param : curTime	current time
		void On_GetWellDataResult(SWellData wellData, ulong curTime);

		//upgrade well result
		// Param : wellType	well type
		// Param : level	level after upgrade
		// Param : result	result type
		void On_UpgradeWellResult(EWellType wellType, int level, EServerErrorType result);

		//get well karma result
		// Param : result	result type
		void On_GetWellKarmaResult(EServerErrorType result);

		//
		// Param : result	result
		// Param : mailInfo	mail info
		void On_SendMailResult(EServerErrorType result, SMailInfo mailInfo);

		//GetMailKarmaResult
		// Param : mailID	
		// Param : result	result
		void On_GetMailKarmaResult(int mailID, EServerErrorType result);

		//GetMailcrystalResult
		// Param : mailID	
		// Param : result	result
		void On_GetMailCrystalResult(int mailID, EServerErrorType result);

		//
		// Param : vectorMailInfo	mail info vector
		void On_RecvNewMail(vectorMailInfos vectorMailInfo);

		//
		// Param : vectorMailInfo	mail info vector
		void On_GetPlayerMailResult(vectorMailInfos vectorMailInfo);

		//DeleteMail
		// Param : result	result
		// Param : mailIDVec	id vector
		void On_DeleteMailResult(EServerErrorType result, vectorInt mailIDVec);

		//
		// Param : result	result
		// Param : mailID	mail ID
		// Param : itemSlotID	mail item slot ID
		void On_GetMailItemResult(EServerErrorType result, int mailID, int itemSlotID);

		//
		// Param : result	result
		// Param : mailID	mail ID
		// Param : petSlotID	mail pet slot ID
		void On_GetMailPetResult(EServerErrorType result, int mailID, int petSlotID);

		//GetMailAllItemsResult
		// Param : mailID	mail ID
		// Param : result	result
		void On_GetMailAllItemsResult(int mailID, EServerErrorType result);

		//GetMailAllResult
		// Param : mailID	mail ID
		// Param : result	result
		void On_GetMailAllResult(int mailID, EServerErrorType result);

		//
		void On_MaterialMailNotify();

		//buy stash
		// Param : stashNum	stat num
		// Param : result	result
		void On_buyStashAck(int stashNum, EServerErrorType result);

		//
		// Param : curTime	current system time
		void On_ServerSystemTimeNotify(long curTime);
	#endregion
	}

	public sealed class ProtocolGame_ReceiveCallback
	{
	#region Parse Code.

		static void __parse__On_UserLoginOK(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			bool	reconnected;
			reconnected = ins.ReadBool();
			SAccountInfo	accountInfo;
			SAccountInfo.Read(ins, out accountInfo);
			vectorCharacterInfoLogins	characterDataList;
			vectorCharacterInfoLogins.Read(ins, out characterDataList);
			receiver.On_UserLoginOK(reconnected, accountInfo, characterDataList);
		}

		static void __parse__On_UserLoginFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	error;
			EServerErrorType.Read(ins, out error);
			receiver.On_UserLoginFailed(error);
		}

		static void __parse__On_UserReconnectNotify(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			string charName;
			charName = ins.ReadString();
			string missionName;
			missionName = ins.ReadString();
			receiver.On_UserReconnectNotify(charName, missionName);
		}

		static void __parse__On_UserCreateCharacterOK(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SCharacterInfoLogin	characterInfo;
			SCharacterInfoLogin.Read(ins, out characterInfo);
			receiver.On_UserCreateCharacterOK(characterInfo);
		}

		static void __parse__On_UserCreateCharacterFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	error;
			EServerErrorType.Read(ins, out error);
			receiver.On_UserCreateCharacterFailed(error);
		}

		static void __parse__On_UserSelectCharacterOK(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SCharacterInfoBasic	characterData;
			SCharacterInfoBasic.Read(ins, out characterData);
			vectorAttrChange	attrVec;
			vectorAttrChange.Read(ins, out attrVec);
			receiver.On_UserSelectCharacterOK(characterData, attrVec);
		}

		static void __parse__On_UserSelectCharacterFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	error;
			EServerErrorType.Read(ins, out error);
			receiver.On_UserSelectCharacterFailed(error);
		}

		static void __parse__On_UserDelCharacterResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	characterID;
			characterID = ins.ReadInt();
			EServerErrorType	error;
			EServerErrorType.Read(ins, out error);
			receiver.On_UserDelCharacterResult(characterID, error);
		}

		static void __parse__On_BuyCharSlotResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_BuyCharSlotResult(result);
		}

		static void __parse__On_ChangeCharacterAttribNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorAttrChange	attrVec;
			vectorAttrChange.Read(ins, out attrVec);
			receiver.On_ChangeCharacterAttribNTF(attrVec);
		}

		static void __parse__On_UpdateMoneyInfo (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SMoneyInfo	money;
			SMoneyInfo.Read(ins, out money);
			receiver.On_UpdateMoneyInfo (money);
		}

		static void __parse__On_UpdateCacheMoneyInfo (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SMoneyInfo	money;
			SMoneyInfo.Read(ins, out money);
			receiver.On_UpdateCacheMoneyInfo (money);
		}

		static void __parse__On_UpdateTutorialInfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			bool	istutorial;
			istutorial = ins.ReadBool();
			receiver.On_UpdateTutorialInfo(istutorial);
		}

		static void __parse__On_UpdateJoule (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			ulong joule;
			joule = ins.ReadUint64();
			receiver.On_UpdateJoule (joule);
		}

		static void __parse__On_AddExpNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	catolog;
			catolog = ins.ReadInt();
			ulong val;
			val = ins.ReadUint64();
			receiver.On_AddExpNTF(catolog, val);
		}

		static void __parse__On_LevelUp (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	level;
			level = ins.ReadInt();
			int	catolog;
			catolog = ins.ReadInt();
			receiver.On_LevelUp (level, catolog);
		}

		static void __parse__On_YouCheat (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			receiver.On_YouCheat ();
		}

		static void __parse__On_UpdateLeaderboardInfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			ELeaderboardType	leaderboardType;
			ELeaderboardType.Read(ins, out leaderboardType);
			SLeaderboardTable	leaderboardInfo;
			SLeaderboardTable.Read(ins, out leaderboardInfo);
			bool	isClientGet;
			isClientGet = ins.ReadBool();
			receiver.On_UpdateLeaderboardInfo(leaderboardType, leaderboardInfo, isClientGet);
		}

		static void __parse__On_UserCharacterInfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SCharacterInfoBasic	characterData;
			SCharacterInfoBasic.Read(ins, out characterData);
			receiver.On_UserCharacterInfo(characterData);
		}

		static void __parse__On_SendSkillInfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SPlayerSkillInfo	skillInfo;
			SPlayerSkillInfo.Read(ins, out skillInfo);
			receiver.On_SendSkillInfo(skillInfo);
		}

		static void __parse__On_SendFriendRewardInfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			mapFriendHireReward	rewardInfo;
			mapFriendHireReward.Read(ins, out rewardInfo);
			receiver.On_SendFriendRewardInfo(rewardInfo);
		}

		static void __parse__On_UpdateBaseAttr(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorAttrChange	attrVec;
			vectorAttrChange.Read(ins, out attrVec);
			receiver.On_UpdateBaseAttr(attrVec);
		}

		static void __parse__On_UpdateCharStatData(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SCharStatData	statData;
			SCharStatData.Read(ins, out statData);
			receiver.On_UpdateCharStatData(statData);
		}

		static void __parse__On_ChangeNameResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	charID;
			charID = ins.ReadInt();
			string newName;
			newName = ins.ReadString();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_ChangeNameResult(charID, newName, result);
		}

		static void __parse__On_ChangeGenderResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	charID;
			charID = ins.ReadInt();
			int	sex;
			sex = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_ChangeGenderResult(charID, sex, result);
		}

		static void __parse__On_SendBagInfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SBagGroup	baggroupinfo;
			SBagGroup.Read(ins, out baggroupinfo);
			receiver.On_SendBagInfo(baggroupinfo);
		}

		static void __parse__On_SendShopIteminfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			bool	isUpdateIn12;
			isUpdateIn12 = ins.ReadBool();
			vectorShopItemInfos	vectorShopItem;
			vectorShopItemInfos.Read(ins, out vectorShopItem);
			receiver.On_SendShopIteminfo(isUpdateIn12, vectorShopItem);
		}

		static void __parse__On_SendShopConsumeIteminfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			bool	isUpdateIn12;
			isUpdateIn12 = ins.ReadBool();
			int	shopType;
			shopType = ins.ReadInt();
			vectorShopConsumeItemInfos	vectorShopConsumeItem;
			vectorShopConsumeItemInfos.Read(ins, out vectorShopConsumeItem);
			receiver.On_SendShopConsumeIteminfo(isUpdateIn12, shopType, vectorShopConsumeItem);
		}

		static void __parse__On_SendShopRareitemTrackInfo(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			bool	isUpdateIn12;
			isUpdateIn12 = ins.ReadBool();
			vectorShopItemInfos	vectorShopItem;
			vectorShopItemInfos.Read(ins, out vectorShopItem);
			int	wDay;
			wDay = ins.ReadInt();
			receiver.On_SendShopRareitemTrackInfo(isUpdateIn12, vectorShopItem, wDay);
		}

		static void __parse__On_BuyItemSuccAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	isRare;
			isRare = ins.ReadInt();
			SBuyitemInfo	info;
			SBuyitemInfo.Read(ins, out info);
			receiver.On_BuyItemSuccAck(isRare, info);
		}

		static void __parse__On_BuyConsumeItemSuccAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	itemType;
			itemType = ins.ReadInt();
			int	itemID;
			itemID = ins.ReadInt();
			int	buycount;
			buycount = ins.ReadInt();
			receiver.On_BuyConsumeItemSuccAck(itemType, itemID, buycount);
		}

		static void __parse__On_BuyItemFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_BuyItemFailed(reason);
		}

		static void __parse__On_UpdateReviveNum(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	num;
			num = ins.ReadInt();
			receiver.On_UpdateReviveNum(num);
		}

		static void __parse__On_SaleItemFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_SaleItemFailed(reason);
		}

		static void __parse__On_SplitItemFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_SplitItemFailed(reason);
		}

		static void __parse__On_SwapItemFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_SwapItemFailed(reason);
		}

		static void __parse__On_DelItemFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_DelItemFailed(reason);
		}

		static void __parse__On_NotifyItemSwap(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			byte	srcbagID;
			srcbagID = ins.ReadByte();
			uint	srcslot;
			srcslot = ins.ReadUint();
			byte	dstbagID;
			dstbagID = ins.ReadByte();
			uint	dstslot;
			dstslot = ins.ReadUint();
			receiver.On_NotifyItemSwap(srcbagID, srcslot, dstbagID, dstslot);
		}

		static void __parse__On_NotifyItemUpdate(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			byte	bagID;
			bagID = ins.ReadByte();
			SItemInfo	iteminfo;
			SItemInfo.Read(ins, out iteminfo);
			receiver.On_NotifyItemUpdate(bagID, iteminfo);
		}

		static void __parse__On_NotifyItemDestroy(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			byte	bagID;
			bagID = ins.ReadByte();
			uint	slot;
			slot = ins.ReadUint();
			receiver.On_NotifyItemDestroy(bagID, slot);
		}

		static void __parse__On_EquipErrorFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_EquipErrorFailed(reason);
		}

		static void __parse__On_UnEquipErrorFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_UnEquipErrorFailed(reason);
		}

		static void __parse__On_RequestDayRewardOK(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SDayReward	reward;
			SDayReward.Read(ins, out reward);
			receiver.On_RequestDayRewardOK(reward);
		}

		static void __parse__On_RequestDayRewardFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_RequestDayRewardFailed(reason);
		}

		static void __parse__On_GetDayRewardResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_GetDayRewardResult(reason);
		}

		static void __parse__On_SelectDayRewardNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	DayRewardNum;
			DayRewardNum = ins.ReadInt();
			receiver.On_SelectDayRewardNTF(DayRewardNum);
		}

		static void __parse__On_ChatResponse(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EChatType	chatType;
			EChatType.Read(ins, out chatType);
			int	senderID;
			senderID = ins.ReadInt();
			string senderName;
			senderName = ins.ReadString();
			string chatMsg;
			chatMsg = ins.ReadString();
			receiver.On_ChatResponse(chatType, senderID, senderName, chatMsg);
		}

		static void __parse__On_ChatFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_ChatFailed(reason);
		}

		static void __parse__On_StudyAbilitySucceed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	npcID;
			npcID = ins.ReadInt();
			int	abilityID;
			abilityID = ins.ReadInt();
			receiver.On_StudyAbilitySucceed(npcID, abilityID);
		}

		static void __parse__On_StudyAbilityFailed(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	errType;
			EServerErrorType.Read(ins, out errType);
			int	npcID;
			npcID = ins.ReadInt();
			int	abilityID;
			abilityID = ins.ReadInt();
			receiver.On_StudyAbilityFailed(errType, npcID, abilityID);
		}

		static void __parse__On_AddNewAbilityNotify(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	abilityID;
			abilityID = ins.ReadInt();
			receiver.On_AddNewAbilityNotify(abilityID);
		}

		static void __parse__On_GetGiftAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SGift	gift;
			SGift.Read(ins, out gift);
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_GetGiftAck(gift, result);
		}

		static void __parse__On_NewRedeemGift(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SRedeemGift	gift;
			SRedeemGift.Read(ins, out gift);
			receiver.On_NewRedeemGift(gift);
		}

		static void __parse__On_GetRedeemGiftResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			mapRedeemGift	giftMap;
			mapRedeemGift.Read(ins, out giftMap);
			receiver.On_GetRedeemGiftResult(giftMap);
		}

		static void __parse__On_ProcessRedeemGiftResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SRedeemGift	gift;
			SRedeemGift.Read(ins, out gift);
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_ProcessRedeemGiftResult(gift, result);
		}

		static void __parse__On_AcceptMissionOk(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	returnCode;
			returnCode = ins.ReadInt();
			receiver.On_AcceptMissionOk(returnCode);
		}

		static void __parse__On_AcceptMissionFail(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	returnCode;
			returnCode = ins.ReadInt();
			receiver.On_AcceptMissionFail(returnCode);
		}

		static void __parse__On_taskCompleteNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	MisssionID;
			MisssionID = ins.ReadInt();
			int	branchID;
			branchID = ins.ReadInt();
			int	taskID;
			taskID = ins.ReadInt();
			int	exp;
			exp = ins.ReadInt();
			int	karma;
			karma = ins.ReadInt();
			receiver.On_taskCompleteNTF(MisssionID, branchID, taskID, exp, karma);
		}

		static void __parse__On_branchCompleteNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	MisssionID;
			MisssionID = ins.ReadInt();
			int	branchID;
			branchID = ins.ReadInt();
			int	taskID;
			taskID = ins.ReadInt();
			int	exp;
			exp = ins.ReadInt();
			int	karma;
			karma = ins.ReadInt();
			receiver.On_branchCompleteNTF(MisssionID, branchID, taskID, exp, karma);
		}

		static void __parse__On_MissionCompleteNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	MisssionID;
			MisssionID = ins.ReadInt();
			int	exp;
			exp = ins.ReadInt();
			int	karma;
			karma = ins.ReadInt();
			receiver.On_MissionCompleteNTF(MisssionID, exp, karma);
		}

		static void __parse__On_MissionListAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorSAcceptMissionRelate	SAcceptMissionRelateVec;
			vectorSAcceptMissionRelate.Read(ins, out SAcceptMissionRelateVec);
			receiver.On_MissionListAck(SAcceptMissionRelateVec);
		}

		static void __parse__On_MissionAreaInfoAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorSMissionAreaRelate	SMissionAreaRelateVec;
			vectorSMissionAreaRelate.Read(ins, out SMissionAreaRelateVec);
			receiver.On_MissionAreaInfoAck(SMissionAreaRelateVec);
		}

		static void __parse__On_MissionFailedNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	MisssionID;
			MisssionID = ins.ReadInt();
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_MissionFailedNTF(MisssionID, reason);
		}

		static void __parse__On_conversationNpcCheckAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	MisssionID;
			MisssionID = ins.ReadInt();
			int	taskid;
			taskid = ins.ReadInt();
			int	trackType;
			trackType = ins.ReadInt();
			int	objectID;
			objectID = ins.ReadInt();
			int	NpcID;
			NpcID = ins.ReadInt();
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_conversationNpcCheckAck(MisssionID, taskid, trackType, objectID, NpcID, reason);
		}

		static void __parse__On_exploretaskcompleteAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	missionID;
			missionID = ins.ReadInt();
			int	taskid;
			taskid = ins.ReadInt();
			int	trackType;
			trackType = ins.ReadInt();
			int	objectID;
			objectID = ins.ReadInt();
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_exploretaskcompleteAck(missionID, taskid, trackType, objectID, reason);
		}

		static void __parse__On_UpdateBadge(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	badgeNum;
			badgeNum = ins.ReadInt();
			receiver.On_UpdateBadge(badgeNum);
		}

		static void __parse__On_UpdateElementAttr(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorElementValue	elementAtrrVec;
			vectorElementValue.Read(ins, out elementAtrrVec);
			receiver.On_UpdateElementAttr(elementAtrrVec);
		}

		static void __parse__On_UpdateElementChance(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorElementValue	elementAtrrVec;
			vectorElementValue.Read(ins, out elementAtrrVec);
			receiver.On_UpdateElementChance(elementAtrrVec);
		}

		static void __parse__On_MissionFailAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	missionID;
			missionID = ins.ReadInt();
			int	returnCode;
			returnCode = ins.ReadInt();
			receiver.On_MissionFailAck(missionID, returnCode);
		}

		static void __parse__On_SendMissionProcess(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SMissionProcess	missionProcess;
			SMissionProcess.Read(ins, out missionProcess);
			receiver.On_SendMissionProcess(missionProcess);
		}

		static void __parse__On_unLockAreaAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	areaID;
			areaID = ins.ReadInt();
			EServerErrorType	returnCode;
			EServerErrorType.Read(ins, out returnCode);
			receiver.On_unLockAreaAck(areaID, returnCode);
		}

		static void __parse__On_buyThreatLevelByKarmaAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	returnCode;
			EServerErrorType.Read(ins, out returnCode);
			int	missionID;
			missionID = ins.ReadInt();
			int	subOrAdd;
			subOrAdd = ins.ReadInt();
			int	nextThreatTime;
			nextThreatTime = ins.ReadInt();
			receiver.On_buyThreatLevelByKarmaAck(returnCode, missionID, subOrAdd, nextThreatTime);
		}

		static void __parse__On_buyAllAreaByKarmaAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	returnCode;
			EServerErrorType.Read(ins, out returnCode);
			receiver.On_buyAllAreaByKarmaAck(returnCode);
		}

		static void __parse__On_decreaseCoolDownAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	returnCode;
			EServerErrorType.Read(ins, out returnCode);
			int	missionID;
			missionID = ins.ReadInt();
			int	bType;
			bType = ins.ReadInt();
			receiver.On_decreaseCoolDownAck(returnCode, missionID, bType);
		}

		static void __parse__On_missionShopNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorShopItemInfos	missionShopItemVec;
			vectorShopItemInfos.Read(ins, out missionShopItemVec);
			receiver.On_missionShopNTF(missionShopItemVec);
		}

		static void __parse__On_BuyPetAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	PetID;
			PetID = ins.ReadInt();
			int	Num;
			Num = ins.ReadInt();
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_BuyPetAck(PetID, Num, reason);
		}

		static void __parse__On_choosePetAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	 PetID;
			 PetID = ins.ReadInt();
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_choosePetAck( PetID, reason);
		}

		static void __parse__On_RolePetListAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorSPetInfo	petInfoVec;
			vectorSPetInfo.Read(ins, out petInfoVec);
			receiver.On_RolePetListAck(petInfoVec);
		}

		static void __parse__On_RoleFreePetListNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorInt	freePetInfoVec;
			vectorInt.Read(ins, out freePetInfoVec);
			receiver.On_RoleFreePetListNTF(freePetInfoVec);
		}

		static void __parse__On_PetRentTimeEndNTF(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	PetID;
			PetID = ins.ReadInt();
			receiver.On_PetRentTimeEndNTF(PetID);
		}

		static void __parse__On_assignTalentAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_assignTalentAck(reason);
		}

		static void __parse__On_hasAssignedTalentPointAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	prowess;
			prowess = ins.ReadInt();
			int	fortitude;
			fortitude = ins.ReadInt();
			int	cunning;
			cunning = ins.ReadInt();
			int	leftTalentPoint;
			leftTalentPoint = ins.ReadInt();
			receiver.On_hasAssignedTalentPointAck(prowess, fortitude, cunning, leftTalentPoint);
		}

		static void __parse__On_CraftingItemOK (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			byte	bagID;
			bagID = ins.ReadByte();
			byte	itemSlot;
			itemSlot = ins.ReadByte();
			SItemInfo	iteminfo;
			SItemInfo.Read(ins, out iteminfo);
			receiver.On_CraftingItemOK (bagID, itemSlot, iteminfo);
		}

		static void __parse__On_CraftingItemFailed (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	reason;
			EServerErrorType.Read(ins, out reason);
			receiver.On_CraftingItemFailed (reason);
		}

		static void __parse__On_BroadCastCraftingItemOK (Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	charID;
			charID = ins.ReadInt();
			string nickname;
			nickname = ins.ReadString();
			SItemShowInfo	iteminfo;
			SItemShowInfo.Read(ins, out iteminfo);
			receiver.On_BroadCastCraftingItemOK (charID, nickname, iteminfo);
		}

		static void __parse__On_masteryLvlupAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EMasteryType	masteryType;
			EMasteryType.Read(ins, out masteryType);
			EServerErrorType	returnCode;
			EServerErrorType.Read(ins, out returnCode);
			receiver.On_masteryLvlupAck(masteryType, returnCode);
		}

		static void __parse__On_RoleMasteryListAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorMasteryLevelInfo	MasteryLevelInfoVec;
			vectorMasteryLevelInfo.Read(ins, out MasteryLevelInfoVec);
			receiver.On_RoleMasteryListAck(MasteryLevelInfoVec);
		}

		static void __parse__On_AddNewMasteryNotify(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	masteryID;
			masteryID = ins.ReadInt();
			receiver.On_AddNewMasteryNotify(masteryID);
		}

		static void __parse__On_ChatRequestAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EChatType	chatType;
			EChatType.Read(ins, out chatType);
			int	targetID;
			targetID = ins.ReadInt();
			int	itemID;
			itemID = ins.ReadInt();
			string chatMsg;
			chatMsg = ins.ReadString();
			int	eReturncode;
			eReturncode = ins.ReadInt();
			receiver.On_ChatRequestAck(chatType, targetID, itemID, chatMsg, eReturncode);
		}

		static void __parse__On_TutorialEnterAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	charID;
			charID = ins.ReadInt();
			int	returnCode;
			returnCode = ins.ReadInt();
			receiver.On_TutorialEnterAck(charID, returnCode);
		}

		static void __parse__On_pingRequestAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			receiver.On_pingRequestAck();
		}

		static void __parse__On_UpdateCoolDown(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			ECooldownType	cooldownType;
			ECooldownType.Read(ins, out cooldownType);
			int	id;
			id = ins.ReadInt();
			long targetTime;
			targetTime = ins.ReadLong();
			receiver.On_UpdateCoolDown(cooldownType, id, targetTime);
		}

		static void __parse__On_SpeedUpCoolDownResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			ECooldownType	cooldownType;
			ECooldownType.Read(ins, out cooldownType);
			int	id;
			id = ins.ReadInt();
			long targetTime;
			targetTime = ins.ReadLong();
			receiver.On_SpeedUpCoolDownResult(result, cooldownType, id, targetTime);
		}

		static void __parse__On_GetWellDataResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			SWellData	wellData;
			SWellData.Read(ins, out wellData);
			ulong curTime;
			curTime = ins.ReadUint64();
			receiver.On_GetWellDataResult(wellData, curTime);
		}

		static void __parse__On_UpgradeWellResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EWellType	wellType;
			EWellType.Read(ins, out wellType);
			int	level;
			level = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_UpgradeWellResult(wellType, level, result);
		}

		static void __parse__On_GetWellKarmaResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_GetWellKarmaResult(result);
		}

		static void __parse__On_SendMailResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			SMailInfo	mailInfo;
			SMailInfo.Read(ins, out mailInfo);
			receiver.On_SendMailResult(result, mailInfo);
		}

		static void __parse__On_GetMailKarmaResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	mailID;
			mailID = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_GetMailKarmaResult(mailID, result);
		}

		static void __parse__On_GetMailCrystalResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	mailID;
			mailID = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_GetMailCrystalResult(mailID, result);
		}

		static void __parse__On_RecvNewMail(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorMailInfos	vectorMailInfo;
			vectorMailInfos.Read(ins, out vectorMailInfo);
			receiver.On_RecvNewMail(vectorMailInfo);
		}

		static void __parse__On_GetPlayerMailResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			vectorMailInfos	vectorMailInfo;
			vectorMailInfos.Read(ins, out vectorMailInfo);
			receiver.On_GetPlayerMailResult(vectorMailInfo);
		}

		static void __parse__On_DeleteMailResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			vectorInt	mailIDVec;
			vectorInt.Read(ins, out mailIDVec);
			receiver.On_DeleteMailResult(result, mailIDVec);
		}

		static void __parse__On_GetMailItemResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			int	mailID;
			mailID = ins.ReadInt();
			int	itemSlotID;
			itemSlotID = ins.ReadInt();
			receiver.On_GetMailItemResult(result, mailID, itemSlotID);
		}

		static void __parse__On_GetMailPetResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			int	mailID;
			mailID = ins.ReadInt();
			int	petSlotID;
			petSlotID = ins.ReadInt();
			receiver.On_GetMailPetResult(result, mailID, petSlotID);
		}

		static void __parse__On_GetMailAllItemsResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	mailID;
			mailID = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_GetMailAllItemsResult(mailID, result);
		}

		static void __parse__On_GetMailAllResult(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	mailID;
			mailID = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_GetMailAllResult(mailID, result);
		}

		static void __parse__On_MaterialMailNotify(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			receiver.On_MaterialMailNotify();
		}

		static void __parse__On_buyStashAck(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			int	stashNum;
			stashNum = ins.ReadInt();
			EServerErrorType	result;
			EServerErrorType.Read(ins, out result);
			receiver.On_buyStashAck(stashNum, result);
		}

		static void __parse__On_ServerSystemTimeNotify(Packet ins, ProtocolGame_ICallbackReceiver receiver)
		{
			long curTime;
			curTime = ins.ReadLong();
			receiver.On_ServerSystemTimeNotify(curTime);
		}

		public static bool Parse(ProtocolGame_ICallbackReceiver receiver, Packet pak)
		{
			int methodID = 0;
			methodID = pak.ReadInt();

			switch(methodID)
			{
			case ProtocolGame_METHOD.uMethodID_UserLoginOK:
				__parse__On_UserLoginOK(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserLoginFailed:
				__parse__On_UserLoginFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserReconnectNotify:
				__parse__On_UserReconnectNotify(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserCreateCharacterOK:
				__parse__On_UserCreateCharacterOK(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserCreateCharacterFailed:
				__parse__On_UserCreateCharacterFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserSelectCharacterOK:
				__parse__On_UserSelectCharacterOK(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserSelectCharacterFailed:
				__parse__On_UserSelectCharacterFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserDelCharacterResult:
				__parse__On_UserDelCharacterResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_BuyCharSlotResult:
				__parse__On_BuyCharSlotResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ChangeCharacterAttribNTF:
				__parse__On_ChangeCharacterAttribNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateMoneyInfo :
				__parse__On_UpdateMoneyInfo (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateCacheMoneyInfo :
				__parse__On_UpdateCacheMoneyInfo (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateTutorialInfo:
				__parse__On_UpdateTutorialInfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateJoule :
				__parse__On_UpdateJoule (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_AddExpNTF:
				__parse__On_AddExpNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_LevelUp :
				__parse__On_LevelUp (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_YouCheat :
				__parse__On_YouCheat (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateLeaderboardInfo:
				__parse__On_UpdateLeaderboardInfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UserCharacterInfo:
				__parse__On_UserCharacterInfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendSkillInfo:
				__parse__On_SendSkillInfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendFriendRewardInfo:
				__parse__On_SendFriendRewardInfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateBaseAttr:
				__parse__On_UpdateBaseAttr(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateCharStatData:
				__parse__On_UpdateCharStatData(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ChangeNameResult:
				__parse__On_ChangeNameResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ChangeGenderResult:
				__parse__On_ChangeGenderResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendBagInfo:
				__parse__On_SendBagInfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendShopIteminfo:
				__parse__On_SendShopIteminfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendShopConsumeIteminfo:
				__parse__On_SendShopConsumeIteminfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendShopRareitemTrackInfo:
				__parse__On_SendShopRareitemTrackInfo(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_BuyItemSuccAck:
				__parse__On_BuyItemSuccAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_BuyConsumeItemSuccAck:
				__parse__On_BuyConsumeItemSuccAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_BuyItemFailed:
				__parse__On_BuyItemFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateReviveNum:
				__parse__On_UpdateReviveNum(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SaleItemFailed:
				__parse__On_SaleItemFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SplitItemFailed:
				__parse__On_SplitItemFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SwapItemFailed:
				__parse__On_SwapItemFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_DelItemFailed:
				__parse__On_DelItemFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_NotifyItemSwap:
				__parse__On_NotifyItemSwap(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_NotifyItemUpdate:
				__parse__On_NotifyItemUpdate(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_NotifyItemDestroy:
				__parse__On_NotifyItemDestroy(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_EquipErrorFailed:
				__parse__On_EquipErrorFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UnEquipErrorFailed:
				__parse__On_UnEquipErrorFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_RequestDayRewardOK:
				__parse__On_RequestDayRewardOK(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_RequestDayRewardFailed:
				__parse__On_RequestDayRewardFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetDayRewardResult:
				__parse__On_GetDayRewardResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SelectDayRewardNTF:
				__parse__On_SelectDayRewardNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ChatResponse:
				__parse__On_ChatResponse(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ChatFailed:
				__parse__On_ChatFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_StudyAbilitySucceed:
				__parse__On_StudyAbilitySucceed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_StudyAbilityFailed:
				__parse__On_StudyAbilityFailed(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_AddNewAbilityNotify:
				__parse__On_AddNewAbilityNotify(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetGiftAck:
				__parse__On_GetGiftAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_NewRedeemGift:
				__parse__On_NewRedeemGift(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetRedeemGiftResult:
				__parse__On_GetRedeemGiftResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ProcessRedeemGiftResult:
				__parse__On_ProcessRedeemGiftResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_AcceptMissionOk:
				__parse__On_AcceptMissionOk(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_AcceptMissionFail:
				__parse__On_AcceptMissionFail(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_taskCompleteNTF:
				__parse__On_taskCompleteNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_branchCompleteNTF:
				__parse__On_branchCompleteNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_MissionCompleteNTF:
				__parse__On_MissionCompleteNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_MissionListAck:
				__parse__On_MissionListAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_MissionAreaInfoAck:
				__parse__On_MissionAreaInfoAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_MissionFailedNTF:
				__parse__On_MissionFailedNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_conversationNpcCheckAck:
				__parse__On_conversationNpcCheckAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_exploretaskcompleteAck:
				__parse__On_exploretaskcompleteAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateBadge:
				__parse__On_UpdateBadge(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateElementAttr:
				__parse__On_UpdateElementAttr(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateElementChance:
				__parse__On_UpdateElementChance(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_MissionFailAck:
				__parse__On_MissionFailAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendMissionProcess:
				__parse__On_SendMissionProcess(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_unLockAreaAck:
				__parse__On_unLockAreaAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_buyThreatLevelByKarmaAck:
				__parse__On_buyThreatLevelByKarmaAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_buyAllAreaByKarmaAck:
				__parse__On_buyAllAreaByKarmaAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_decreaseCoolDownAck:
				__parse__On_decreaseCoolDownAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_missionShopNTF:
				__parse__On_missionShopNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_BuyPetAck:
				__parse__On_BuyPetAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_choosePetAck:
				__parse__On_choosePetAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_RolePetListAck:
				__parse__On_RolePetListAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_RoleFreePetListNTF:
				__parse__On_RoleFreePetListNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_PetRentTimeEndNTF:
				__parse__On_PetRentTimeEndNTF(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_assignTalentAck:
				__parse__On_assignTalentAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_hasAssignedTalentPointAck:
				__parse__On_hasAssignedTalentPointAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_CraftingItemOK :
				__parse__On_CraftingItemOK (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_CraftingItemFailed :
				__parse__On_CraftingItemFailed (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_BroadCastCraftingItemOK :
				__parse__On_BroadCastCraftingItemOK (pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_masteryLvlupAck:
				__parse__On_masteryLvlupAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_RoleMasteryListAck:
				__parse__On_RoleMasteryListAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_AddNewMasteryNotify:
				__parse__On_AddNewMasteryNotify(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ChatRequestAck:
				__parse__On_ChatRequestAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_TutorialEnterAck:
				__parse__On_TutorialEnterAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_pingRequestAck:
				__parse__On_pingRequestAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpdateCoolDown:
				__parse__On_UpdateCoolDown(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SpeedUpCoolDownResult:
				__parse__On_SpeedUpCoolDownResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetWellDataResult:
				__parse__On_GetWellDataResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_UpgradeWellResult:
				__parse__On_UpgradeWellResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetWellKarmaResult:
				__parse__On_GetWellKarmaResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_SendMailResult:
				__parse__On_SendMailResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetMailKarmaResult:
				__parse__On_GetMailKarmaResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetMailCrystalResult:
				__parse__On_GetMailCrystalResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_RecvNewMail:
				__parse__On_RecvNewMail(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetPlayerMailResult:
				__parse__On_GetPlayerMailResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_DeleteMailResult:
				__parse__On_DeleteMailResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetMailItemResult:
				__parse__On_GetMailItemResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetMailPetResult:
				__parse__On_GetMailPetResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetMailAllItemsResult:
				__parse__On_GetMailAllItemsResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_GetMailAllResult:
				__parse__On_GetMailAllResult(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_MaterialMailNotify:
				__parse__On_MaterialMailNotify(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_buyStashAck:
				__parse__On_buyStashAck(pak, receiver);
				return true;
			case ProtocolGame_METHOD.uMethodID_ServerSystemTimeNotify:
				__parse__On_ServerSystemTimeNotify(pak, receiver);
				return true;
			}

			return false;
		}
	#endregion
	}

